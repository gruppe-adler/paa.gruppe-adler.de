(()=>{"use strict";var t=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{h(i.next(t))}catch(t){s(t)}}function a(t){try{h(i.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}h((i=i.apply(t,e||[])).next())}))};class e extends Error{constructor(){super('AFF not ready yet. Remember awaiting the "aff.ready" promise, before accessing any methods or properties.'),this.name="AFFNotReadyError"}}const r=new Map([[0,"OK"],[-1,"Unknown Error"],[-2,"Read Error"],[-3,"Argument Error"],[-4,"Invalid State"],[-5,"IO Error"],[-6,"Compression Error"],[-7,"Invalid State"]]);class i extends Error{constructor(t){var e;super(`${null!==(e=r.get(t))&&void 0!==e?e:"Unknown Error Code"} (Code: ${t})`),this.name="AFFExceptionError"}}class n{constructor(e,r){this.instance=null,this.memory=new WebAssembly.Memory({initial:256,maximum:32768}),this.dataView=new DataView(this.memory.buffer),this.ready=function(e,r){return t(this,void 0,void 0,(function*(){if(void 0!==WebAssembly.instantiateStreaming){const{instance:t}=yield WebAssembly.instantiateStreaming(e,r);return t}const t=yield(yield e).arrayBuffer();return(yield WebAssembly.instantiate(t,r)).instance}))}(e,{env:{memory:this.memory,__sys_stat64:(t,e)=>(this.setErrNo(5),-1),emscripten_notify_memory_growth:t=>this.updateViews()},wasi_snapshot_preview1:{fd_read:(t,e,r,i)=>(this.setErrNo(5),-1),fd_close:t=>(this.setErrNo(5),-1),fd_seek:(t,e,r,i,n)=>(this.setErrNo(5),-1),fd_write:(t,e,r,i)=>(this.setErrNo(5),-1),environ_sizes_get:(t,e)=>(this.dataView.setInt32(t,0,!0),this.dataView.setInt32(e,0,!0),0),environ_get:(t,e)=>0,proc_exit:t=>{var e;null===(e=null==r?void 0:r.exit)||void 0===e||e.call(r,t)}}}).then((t=>{this.instance=t,this.updateViews()}))}get exports(){var t;return null===(t=this.instance)||void 0===t?void 0:t.exports}updateViews(){this.dataView=new DataView(this.memory.buffer)}malloc(t){if(null===this.exports)throw new e;const r=this.exports.malloc(t);if(0===r)throw new Error("Failed to allocate memory");return r}free(t){if(null===this.exports)throw new e;this.exports.free(t)}writeBufferToMemory(t){const e=this.malloc(t.byteLength),r=new Uint8Array(t);for(let t=0;t<r.length;t++)this.dataView.setUint8(e+t,r[t]);return e}getBytesFromMemory(t,e){return new Uint8Array(this.memory.buffer).slice(t,t+e)}setErrNo(t){if(null===this.exports)throw new e;this.dataView.setInt32(this.exports.__errno_location(),t)}getLastAFFException(){if(null===this.exports)throw new e;const t=this.exports.get_last_aff_exception();return new i(t)}encode(t){if(null===this.exports)throw new e;const r=this.malloc(4),i=this.writeBufferToMemory(t.data.buffer),n=this.exports.encode(t.width,t.height,i,r);if(0===n)throw this.getLastAFFException();const s=this.dataView.getUint32(r,!0),o=this.getBytesFromMemory(n,s);if(0===this.exports.free_encoded_data(n))throw this.getLastAFFException();return this.free(r),this.free(i),o}decode(t){if(null===this.exports)throw new e;const r=this.malloc(4),i=this.malloc(2),n=this.malloc(2),s=this.writeBufferToMemory(t.buffer),o=this.exports.decode(s,t.length,i,n,r);if(0===o)throw this.getLastAFFException();const a=this.dataView.getUint32(r,!0),h=this.dataView.getUint16(i,!0),c=this.dataView.getUint16(n,!0),f=this.getBytesFromMemory(o,a),d=new ImageData(new Uint8ClampedArray(f.buffer),h,c);return this.free(r),this.free(i),this.free(n),this.free(s),d}}var s=function(t,e,r,i){return new(r||(r=Promise))((function(n,s){function o(t){try{h(i.next(t))}catch(t){s(t)}}function a(t){try{h(i.throw(t))}catch(t){s(t)}}function h(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(o,a)}h((i=i.apply(t,e||[])).next())}))};function o(e){return s(this,void 0,void 0,(function*(){const r=(yield function(e="/grad_aff_paa.wasm",r){return t(this,void 0,void 0,(function*(){("string"==typeof e||e instanceof Request||e instanceof URL)&&(e instanceof URL&&(e=e.toString()),e=fetch(e));const t=new n(e,r);return yield t.ready,t}))}()).encode(e);return new Blob([r.buffer],{type:"image/vnd.paa"})}))}addEventListener("message",(t=>s(void 0,void 0,void 0,(function*(){const e=t.data;let r;try{r={type:"data",data:yield o(e)}}catch(t){r={type:"error",data:t}}postMessage(r,this)}))))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,