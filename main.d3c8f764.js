/*! For license information please see main.d3c8f764.js.LICENSE.txt */
!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var i in r)("object"==typeof exports?exports:t)[i]=r[i]}}(self,(function(){return(()=>{var __webpack_modules__={6497:(t,e)=>{function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===r(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===r(t)},e.isError=function(t){return"[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=Buffer.isBuffer},7187:t=>{"use strict";var e,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};e=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function n(){n.init.call(this)}t.exports=n,t.exports.once=function(t,e){return new Promise((function(r,i){function a(){void 0!==n&&t.removeListener("error",n),r([].slice.call(arguments))}var n;"error"!==e&&(n=function(r){t.removeListener(e,a),i(r)},t.once("error",n)),t.once(e,a)}))},n.EventEmitter=n,n.prototype._events=void 0,n.prototype._eventsCount=0,n.prototype._maxListeners=void 0;var s=10;function o(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function h(t){return void 0===t._maxListeners?n.defaultMaxListeners:t._maxListeners}function l(t,e,r,i){var a,n,s,l;if(o(r),void 0===(n=t._events)?(n=t._events=Object.create(null),t._eventsCount=0):(void 0!==n.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),n=t._events),s=n[e]),void 0===s)s=n[e]=r,++t._eventsCount;else if("function"==typeof s?s=n[e]=i?[r,s]:[s,r]:i?s.unshift(r):s.push(r),(a=h(t))>0&&s.length>a&&!s.warned){s.warned=!0;var p=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");p.name="MaxListenersExceededWarning",p.emitter=t,p.type=e,p.count=s.length,l=p,console&&console.warn&&console.warn(l)}return t}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(t,e,r){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},a=p.bind(i);return a.listener=r,i.wrapFn=a,a}function f(t,e,r){var i=t._events;if(void 0===i)return[];var a=i[e];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(a):u(a,a.length)}function d(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function u(t,e){for(var r=new Array(e),i=0;i<e;++i)r[i]=t[i];return r}Object.defineProperty(n,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");s=t}}),n.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},n.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},n.prototype.getMaxListeners=function(){return h(this)},n.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var a="error"===t,n=this._events;if(void 0!==n)a=a&&void 0===n.error;else if(!a)return!1;if(a){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var o=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw o.context=s,o}var h=n[t];if(void 0===h)return!1;if("function"==typeof h)i(h,this,e);else{var l=h.length,p=u(h,l);for(r=0;r<l;++r)i(p[r],this,e)}return!0},n.prototype.addListener=function(t,e){return l(this,t,e,!1)},n.prototype.on=n.prototype.addListener,n.prototype.prependListener=function(t,e){return l(this,t,e,!0)},n.prototype.once=function(t,e){return o(e),this.on(t,c(this,t,e)),this},n.prototype.prependOnceListener=function(t,e){return o(e),this.prependListener(t,c(this,t,e)),this},n.prototype.removeListener=function(t,e){var r,i,a,n,s;if(o(e),void 0===(i=this._events))return this;if(void 0===(r=i[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(a=-1,n=r.length-1;n>=0;n--)if(r[n]===e||r[n].listener===e){s=r[n].listener,a=n;break}if(a<0)return this;0===a?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,a),1===r.length&&(i[t]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",t,s||e)}return this},n.prototype.off=n.prototype.removeListener,n.prototype.removeAllListeners=function(t){var e,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var a,n=Object.keys(r);for(i=0;i<n.length;++i)"removeListener"!==(a=n[i])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},n.prototype.listeners=function(t){return f(this,t,!0)},n.prototype.rawListeners=function(t){return f(this,t,!1)},n.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},n.prototype.listenerCount=d,n.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},624:(t,e,r)=>{"use strict";var i,a,n=r.g.MutationObserver||r.g.WebKitMutationObserver;if(process.browser)if(n){var s=0,o=new n(c),h=r.g.document.createTextNode("");o.observe(h,{characterData:!0}),i=function(){h.data=s=++s%2}}else if(r.g.setImmediate||void 0===r.g.MessageChannel)i="document"in r.g&&"onreadystatechange"in r.g.document.createElement("script")?function(){var t=r.g.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},r.g.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var l=new r.g.MessageChannel;l.port1.onmessage=c,i=function(){l.port2.postMessage(0)}}else i=function(){process.nextTick(c)};var p=[];function c(){var t,e;a=!0;for(var r=p.length;r;){for(e=p,p=[],t=-1;++t<r;)e[t]();r=p.length}a=!1}t.exports=function(t){1!==p.push(t)||a||i()}},4378:(t,e,r)=>{try{var i=r(6372);if("function"!=typeof i.inherits)throw"";t.exports=i.inherits}catch(e){t.exports=r(5717)}},5717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},5826:t=>{var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},8458:(t,e,r)=>{"use strict";var i=r(8910),a=r(3790),n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e.encode=function(t){for(var e,r,a,s,o,h,l,p=[],c=0,f=t.length,d=f,u="string"!==i.getTypeOf(t);c<t.length;)d=f-c,u?(e=t[c++],r=c<f?t[c++]:0,a=c<f?t[c++]:0):(e=t.charCodeAt(c++),r=c<f?t.charCodeAt(c++):0,a=c<f?t.charCodeAt(c++):0),s=e>>2,o=(3&e)<<4|r>>4,h=d>1?(15&r)<<2|a>>6:64,l=d>2?63&a:64,p.push(n.charAt(s)+n.charAt(o)+n.charAt(h)+n.charAt(l));return p.join("")},e.decode=function(t){var e,r,i,s,o,h,l=0,p=0,c="data:";if(t.substr(0,c.length)===c)throw new Error("Invalid base64 input, it looks like a data url.");var f,d=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===n.charAt(64)&&d--,t.charAt(t.length-2)===n.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(f=a.uint8array?new Uint8Array(0|d):new Array(0|d);l<t.length;)e=n.indexOf(t.charAt(l++))<<2|(s=n.indexOf(t.charAt(l++)))>>4,r=(15&s)<<4|(o=n.indexOf(t.charAt(l++)))>>2,i=(3&o)<<6|(h=n.indexOf(t.charAt(l++))),f[p++]=e,64!==o&&(f[p++]=r),64!==h&&(f[p++]=i);return f}},7326:(t,e,r)=>{"use strict";var i=r(8565),a=r(5301),n=r(2541),s=r(5977);function o(t,e,r,i,a){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=i,this.compressedContent=a}o.prototype={getContentWorker:function(){var t=new a(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new s("data_length")),e=this;return t.on("end",(function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),t},getCompressedWorker:function(){return new a(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(t,e,r){return t.pipe(new n).pipe(new s("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new s("compressedSize")).withStreamInfo("compression",e)},t.exports=o},1678:(t,e,r)=>{"use strict";var i=r(3718);e.STORE={magic:"\0\0",compressWorker:function(t){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},e.DEFLATE=r(1033)},6988:(t,e,r)=>{"use strict";var i=r(8910),a=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,e){return void 0!==t&&t.length?"string"!==i.getTypeOf(t)?function(t,e,r,i){var n=a,s=0+r;t^=-1;for(var o=0;o<s;o++)t=t>>>8^n[255&(t^e[o])];return-1^t}(0|e,t,t.length):function(t,e,r,i){var n=a,s=0+r;t^=-1;for(var o=0;o<s;o++)t=t>>>8^n[255&(t^e.charCodeAt(o))];return-1^t}(0|e,t,t.length):0}},6032:(t,e)=>{"use strict";e.base64=!1,e.binary=!1,e.dir=!1,e.createFolders=!0,e.date=null,e.compression=null,e.compressionOptions=null,e.comment=null,e.unixPermissions=null,e.dosPermissions=null},8565:(t,e,r)=>{"use strict";var i;i="undefined"!=typeof Promise?Promise:r(6783),t.exports={Promise:i}},1033:(t,e,r)=>{"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,a=r(9591),n=r(8910),s=r(3718),o=i?"uint8array":"array";function h(t,e){s.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}e.magic="\b\0",n.inherits(h,s),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(n.transformTo(o,t.data),!1)},h.prototype.flush=function(){s.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){s.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new a[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},e.compressWorker=function(t){return new h("Deflate",t)},e.uncompressWorker=function(){return new h("Inflate",{})}},4979:(t,e,r)=>{"use strict";var i=r(8910),a=r(3718),n=r(3600),s=r(6988),o=r(1141),h=function(t,e){var r,i="";for(r=0;r<e;r++)i+=String.fromCharCode(255&t),t>>>=8;return i},l=function(t,e,r,a,l,p){var c,f,d=t.file,u=t.compression,m=p!==n.utf8encode,y=i.transformTo("string",p(d.name)),g=i.transformTo("string",n.utf8encode(d.name)),v=d.comment,x=i.transformTo("string",p(v)),b=i.transformTo("string",n.utf8encode(v)),k=g.length!==d.name.length,_=b.length!==v.length,E="",w="",S="",A=d.dir,P=d.date,C={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(C.crc32=t.crc32,C.compressedSize=t.compressedSize,C.uncompressedSize=t.uncompressedSize);var D=0;e&&(D|=8),m||!k&&!_||(D|=2048);var T,F,M=0,I=0;A&&(M|=16),"UNIX"===l?(I=798,M|=(F=T=d.unixPermissions,T||(F=A?16893:33204),(65535&F)<<16)):(I=20,M|=63&(d.dosPermissions||0)),c=P.getUTCHours(),c<<=6,c|=P.getUTCMinutes(),c<<=5,c|=P.getUTCSeconds()/2,f=P.getUTCFullYear()-1980,f<<=4,f|=P.getUTCMonth()+1,f<<=5,f|=P.getUTCDate(),k&&(w=h(1,1)+h(s(y),4)+g,E+="up"+h(w.length,2)+w),_&&(S=h(1,1)+h(s(x),4)+b,E+="uc"+h(S.length,2)+S);var B="";return B+="\n\0",B+=h(D,2),B+=u.magic,B+=h(c,2),B+=h(f,2),B+=h(C.crc32,4),B+=h(C.compressedSize,4),B+=h(C.uncompressedSize,4),B+=h(y.length,2),B+=h(E.length,2),{fileRecord:o.LOCAL_FILE_HEADER+B+y+E,dirRecord:o.CENTRAL_FILE_HEADER+h(I,2)+B+h(x.length,2)+"\0\0\0\0"+h(M,4)+h(a,4)+y+E+x}},p=function(t){return o.DATA_DESCRIPTOR+h(t.crc32,4)+h(t.compressedSize,4)+h(t.uncompressedSize,4)};function c(t,e,r,i){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=i,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}i.inherits(c,a),c.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,a.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-i-1))/r:100}}))},c.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=l(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},c.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=l(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:p(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},c.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,a=function(t,e,r,a,n){var s=i.transformTo("string",n(a));return o.CENTRAL_DIRECTORY_END+"\0\0\0\0"+h(t,2)+h(t,2)+h(e,4)+h(r,4)+h(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:a,meta:{percent:100}})},c.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},c.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()})),t.on("error",(function(t){e.error(t)})),this},c.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},c.prototype.error=function(t){var e=this._sources;if(!a.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},c.prototype.lock=function(){a.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},t.exports=c},7834:(t,e,r)=>{"use strict";var i=r(1678),a=r(4979);e.generateWorker=function(t,e,r){var n=new a(e.streamFiles,r,e.platform,e.encodeFileName),s=0;try{t.forEach((function(t,r){s++;var a=function(t,e){var r=t||e,a=i[r];if(!a)throw new Error(r+" is not a valid compression method !");return a}(r.options.compression,e.compression),o=r.options.compressionOptions||e.compressionOptions||{},h=r.dir,l=r.date;r._compressWorker(a,o).withStreamInfo("file",{name:t,dir:h,date:l,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(n)})),n.entriesCount=s}catch(t){n.error(t)}return n}},6085:(t,e,r)=>{"use strict";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var t=new i;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}i.prototype=r(7132),i.prototype.loadAsync=r(1062),i.support=r(3790),i.defaults=r(6032),i.version="3.6.0",i.loadAsync=function(t,e){return(new i).loadAsync(t,e)},i.external=r(8565),t.exports=i},1062:(t,e,r)=>{"use strict";var i=r(8910),a=r(8565),n=r(3600),s=r(6624),o=r(2541),h=r(2182);function l(t){return new a.Promise((function(e,r){var i=t.decompressed.getContentWorker().pipe(new o);i.on("error",(function(t){r(t)})).on("end",(function(){i.streamInfo.crc32!==t.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):e()})).resume()}))}t.exports=function(t,e){var r=this;return e=i.extend(e||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),h.isNode&&h.isStream(t)?a.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):i.prepareContent("the loaded zip file",t,!0,e.optimizedBinaryString,e.base64).then((function(t){var r=new s(e);return r.load(t),r})).then((function(t){var r=[a.Promise.resolve(t)],i=t.files;if(e.checkCRC32)for(var n=0;n<i.length;n++)r.push(l(i[n]));return a.Promise.all(r)})).then((function(t){for(var i=t.shift(),a=i.files,n=0;n<a.length;n++){var s=a[n];r.file(s.fileNameStr,s.decompressed,{binary:!0,optimizedBinaryString:!0,date:s.date,dir:s.dir,comment:s.fileCommentStr.length?s.fileCommentStr:null,unixPermissions:s.unixPermissions,dosPermissions:s.dosPermissions,createFolders:e.createFolders})}return i.zipComment.length&&(r.comment=i.zipComment),r}))}},660:(t,e,r)=>{"use strict";var i=r(8910),a=r(3718);function n(t,e){a.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}i.inherits(n,a),n.prototype._bindStream=function(t){var e=this;this._stream=t,t.pause(),t.on("data",(function(t){e.push({data:t,meta:{percent:0}})})).on("error",(function(t){e.isPaused?this.generatedError=t:e.error(t)})).on("end",(function(){e.isPaused?e._upstreamEnded=!0:e.end()}))},n.prototype.pause=function(){return!!a.prototype.pause.call(this)&&(this._stream.pause(),!0)},n.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=n},1220:(t,e,r)=>{"use strict";var i=r(1451).Readable;function a(t,e,r){i.call(this,e),this._helper=t;var a=this;t.on("data",(function(t,e){a.push(t)||a._helper.pause(),r&&r(e)})).on("error",(function(t){a.emit("error",t)})).on("end",(function(){a.push(null)}))}r(8910).inherits(a,i),a.prototype._read=function(){this._helper.resume()},t.exports=a},2182:t=>{"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}},7132:(t,e,r)=>{"use strict";var i=r(3600),a=r(8910),n=r(3718),s=r(1285),o=r(6032),h=r(7326),l=r(6859),p=r(7834),c=r(2182),f=r(660),d=function(t,e,r){var i,s=a.getTypeOf(e),p=a.extend(r||{},o);p.date=p.date||new Date,null!==p.compression&&(p.compression=p.compression.toUpperCase()),"string"==typeof p.unixPermissions&&(p.unixPermissions=parseInt(p.unixPermissions,8)),p.unixPermissions&&16384&p.unixPermissions&&(p.dir=!0),p.dosPermissions&&16&p.dosPermissions&&(p.dir=!0),p.dir&&(t=m(t)),p.createFolders&&(i=u(t))&&y.call(this,i,!0);var d="string"===s&&!1===p.binary&&!1===p.base64;r&&void 0!==r.binary||(p.binary=!d),(e instanceof h&&0===e.uncompressedSize||p.dir||!e||0===e.length)&&(p.base64=!1,p.binary=!0,e="",p.compression="STORE",s="string");var g;g=e instanceof h||e instanceof n?e:c.isNode&&c.isStream(e)?new f(t,e):a.prepareContent(t,e,p.binary,p.optimizedBinaryString,p.base64);var v=new l(t,g,p);this.files[t]=v},u=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return e>0?t.substring(0,e):""},m=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},y=function(t,e){return e=void 0!==e?e:o.createFolders,t=m(t),this.files[t]||d.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function g(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var v={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,i;for(e in this.files)this.files.hasOwnProperty(e)&&(i=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,i))},filter:function(t){var e=[];return this.forEach((function(r,i){t(r,i)&&e.push(i)})),e},file:function(t,e,r){if(1===arguments.length){if(g(t)){var i=t;return this.filter((function(t,e){return!e.dir&&i.test(t)}))}var a=this.files[this.root+t];return a&&!a.dir?a:null}return t=this.root+t,d.call(this,t,e,r),this},folder:function(t){if(!t)return this;if(g(t))return this.filter((function(e,r){return r.dir&&t.test(e)}));var e=this.root+t,r=y.call(this,e),i=this.clone();return i.root=r.name,i},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!==t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var r=this.filter((function(e,r){return r.name.slice(0,t.length)===t})),i=0;i<r.length;i++)delete this.files[r[i].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=a.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");a.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var o=r.comment||this.comment||"";e=p.generateWorker(this,r,o)}catch(t){(e=new n("error")).error(t)}return new s(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};t.exports=v},2370:(t,e,r)=>{"use strict";var i=r(8542);function a(t){i.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}r(8910).inherits(a,i),a.prototype.byteAt=function(t){return this.data[this.zero+t]},a.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),a=t.charCodeAt(3),n=this.length-4;n>=0;--n)if(this.data[n]===e&&this.data[n+1]===r&&this.data[n+2]===i&&this.data[n+3]===a)return n-this.zero;return-1},a.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),a=t.charCodeAt(3),n=this.readData(4);return e===n[0]&&r===n[1]&&i===n[2]&&a===n[3]},a.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=a},8542:(t,e,r)=>{"use strict";var i=r(8910);function a(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}a.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return i.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},t.exports=a},9583:(t,e,r)=>{"use strict";var i=r(414);function a(t){i.call(this,t)}r(8910).inherits(a,i),a.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=a},9226:(t,e,r)=>{"use strict";var i=r(8542);function a(t){i.call(this,t)}r(8910).inherits(a,i),a.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},a.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},a.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},a.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=a},414:(t,e,r)=>{"use strict";var i=r(2370);function a(t){i.call(this,t)}r(8910).inherits(a,i),a.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=a},8435:(t,e,r)=>{"use strict";var i=r(8910),a=r(3790),n=r(2370),s=r(9226),o=r(9583),h=r(414);t.exports=function(t){var e=i.getTypeOf(t);return i.checkSupport(e),"string"!==e||a.uint8array?"nodebuffer"===e?new o(t):a.uint8array?new h(i.transformTo("uint8array",t)):new n(i.transformTo("array",t)):new s(t)}},1141:(t,e)=>{"use strict";e.LOCAL_FILE_HEADER="PK",e.CENTRAL_FILE_HEADER="PK",e.CENTRAL_DIRECTORY_END="PK",e.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",e.ZIP64_CENTRAL_DIRECTORY_END="PK",e.DATA_DESCRIPTOR="PK\b"},4293:(t,e,r)=>{"use strict";var i=r(3718),a=r(8910);function n(t){i.call(this,"ConvertWorker to "+t),this.destType=t}a.inherits(n,i),n.prototype.processChunk=function(t){this.push({data:a.transformTo(this.destType,t.data),meta:t.meta})},t.exports=n},2541:(t,e,r)=>{"use strict";var i=r(3718),a=r(6988);function n(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}r(8910).inherits(n,i),n.prototype.processChunk=function(t){this.streamInfo.crc32=a(t.data,this.streamInfo.crc32||0),this.push(t)},t.exports=n},5977:(t,e,r)=>{"use strict";var i=r(8910),a=r(3718);function n(t){a.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}i.inherits(n,a),n.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}a.prototype.processChunk.call(this,t)},t.exports=n},5301:(t,e,r)=>{"use strict";var i=r(8910),a=r(3718);function n(t){a.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then((function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=i.getTypeOf(t),e.isPaused||e._tickAndRepeat()}),(function(t){e.error(t)}))}i.inherits(n,a),n.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this.data=null},n.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},n.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},n.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=n},3718:t=>{"use strict";function e(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}e.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",(function(t){e.processChunk(t)})),t.on("end",(function(){e.end()})),t.on("error",(function(t){e.error(t)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;this.isPaused=!1;var t=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},t.exports=e},1285:(t,e,r)=>{"use strict";var i=r(8910),a=r(4293),n=r(3718),s=r(8458),o=r(3790),h=r(8565),l=null;if(o.nodestream)try{l=r(1220)}catch(t){}function p(t,e,r){var s=e;switch(e){case"blob":case"arraybuffer":s="uint8array";break;case"base64":s="string"}try{this._internalType=s,this._outputType=e,this._mimeType=r,i.checkSupport(s),this._worker=t.pipe(new a(s)),t.lock()}catch(t){this._worker=new n("error"),this._worker.error(t)}}p.prototype={accumulate:function(t){return e=this,r=t,new h.Promise((function(t,a){var n=[],o=e._internalType,h=e._outputType,l=e._mimeType;e.on("data",(function(t,e){n.push(t),r&&r(e)})).on("error",(function(t){n=[],a(t)})).on("end",(function(){try{var e=function(t,e,r){switch(t){case"blob":return i.newBlob(i.transformTo("arraybuffer",e),r);case"base64":return s.encode(e);default:return i.transformTo(t,e)}}(h,function(t,e){var r,i=0,a=null,n=0;for(r=0;r<e.length;r++)n+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(a=new Uint8Array(n),r=0;r<e.length;r++)a.set(e[r],i),i+=e[r].length;return a;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(o,n),l);t(e)}catch(t){a(t)}n=[]})).resume()}));var e,r},on:function(t,e){var r=this;return"data"===t?this._worker.on(t,(function(t){e.call(r,t.data,t.meta)})):this._worker.on(t,(function(){i.delay(e,arguments,r)})),this},resume:function(){return i.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(i.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new l(this,{objectMode:"nodebuffer"!==this._outputType},t)}},t.exports=p},3790:(t,e,r)=>{"use strict";if(e.base64=!0,e.array=!0,e.string=!0,e.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,e.nodebuffer="undefined"!=typeof Buffer,e.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)e.blob=!1;else{var i=new ArrayBuffer(0);try{e.blob=0===new Blob([i],{type:"application/zip"}).size}catch(t){try{var a=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);a.append(i),e.blob=0===a.getBlob("application/zip").size}catch(t){e.blob=!1}}}try{e.nodestream=!!r(1451).Readable}catch(t){e.nodestream=!1}},3600:(t,e,r)=>{"use strict";for(var i=r(8910),a=r(3790),n=r(2182),s=r(3718),o=new Array(256),h=0;h<256;h++)o[h]=h>=252?6:h>=248?5:h>=240?4:h>=224?3:h>=192?2:1;function l(){s.call(this,"utf-8 decode"),this.leftOver=null}function p(){s.call(this,"utf-8 encode")}o[254]=o[254]=1,e.utf8encode=function(t){return a.nodebuffer?n.newBufferFrom(t,"utf-8"):function(t){var e,r,i,n,s,o=t.length,h=0;for(n=0;n<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<o&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),h+=r<128?1:r<2048?2:r<65536?3:4;for(e=a.uint8array?new Uint8Array(h):new Array(h),s=0,n=0;s<h;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<o&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:r<2048?(e[s++]=192|r>>>6,e[s++]=128|63&r):r<65536?(e[s++]=224|r>>>12,e[s++]=128|r>>>6&63,e[s++]=128|63&r):(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63,e[s++]=128|r>>>6&63,e[s++]=128|63&r);return e}(t)},e.utf8decode=function(t){return a.nodebuffer?i.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,a,n,s=t.length,h=new Array(2*s);for(r=0,e=0;e<s;)if((a=t[e++])<128)h[r++]=a;else if((n=o[a])>4)h[r++]=65533,e+=n-1;else{for(a&=2===n?31:3===n?15:7;n>1&&e<s;)a=a<<6|63&t[e++],n--;n>1?h[r++]=65533:a<65536?h[r++]=a:(a-=65536,h[r++]=55296|a>>10&1023,h[r++]=56320|1023&a)}return h.length!==r&&(h.subarray?h=h.subarray(0,r):h.length=r),i.applyFromCharCode(h)}(t=i.transformTo(a.uint8array?"uint8array":"array",t))},i.inherits(l,s),l.prototype.processChunk=function(t){var r=i.transformTo(a.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(a.uint8array){var n=r;(r=new Uint8Array(n.length+this.leftOver.length)).set(this.leftOver,0),r.set(n,this.leftOver.length)}else r=this.leftOver.concat(r);this.leftOver=null}var s=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+o[t[r]]>e?r:e}(r),h=r;s!==r.length&&(a.uint8array?(h=r.subarray(0,s),this.leftOver=r.subarray(s,r.length)):(h=r.slice(0,s),this.leftOver=r.slice(s,r.length))),this.push({data:e.utf8decode(h),meta:t.meta})},l.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:e.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},e.Utf8DecodeWorker=l,i.inherits(p,s),p.prototype.processChunk=function(t){this.push({data:e.utf8encode(t.data),meta:t.meta})},e.Utf8EncodeWorker=p},8910:(t,e,r)=>{"use strict";var i=r(3790),a=r(8458),n=r(2182),s=r(1623),o=r(8565);function h(t){return t}function l(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}e.newBlob=function(t,r){e.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(t),i.getBlob(r)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var p={stringifyByChunk:function(t,e,r){var i=[],a=0,n=t.length;if(n<=r)return String.fromCharCode.apply(null,t);for(;a<n;)"array"===e||"nodebuffer"===e?i.push(String.fromCharCode.apply(null,t.slice(a,Math.min(a+r,n)))):i.push(String.fromCharCode.apply(null,t.subarray(a,Math.min(a+r,n)))),a+=r;return i.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return i.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return i.nodebuffer&&1===String.fromCharCode.apply(null,n.allocBuffer(1)).length}catch(t){return!1}}()}};function c(t){var r=65536,i=e.getTypeOf(t),a=!0;if("uint8array"===i?a=p.applyCanBeUsed.uint8array:"nodebuffer"===i&&(a=p.applyCanBeUsed.nodebuffer),a)for(;r>1;)try{return p.stringifyByChunk(t,i,r)}catch(t){r=Math.floor(r/2)}return p.stringifyByChar(t)}function f(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}e.applyFromCharCode=c;var d={};d.string={string:h,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return d.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,n.allocBuffer(t.length))}},d.array={string:c,array:h,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return n.newBufferFrom(t)}},d.arraybuffer={string:function(t){return c(new Uint8Array(t))},array:function(t){return f(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:h,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return n.newBufferFrom(new Uint8Array(t))}},d.uint8array={string:c,array:function(t){return f(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:h,nodebuffer:function(t){return n.newBufferFrom(t)}},d.nodebuffer={string:c,array:function(t){return f(t,new Array(t.length))},arraybuffer:function(t){return d.nodebuffer.uint8array(t).buffer},uint8array:function(t){return f(t,new Uint8Array(t.length))},nodebuffer:h},e.transformTo=function(t,r){if(r||(r=""),!t)return r;e.checkSupport(t);var i=e.getTypeOf(r);return d[i][t](r)},e.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":i.nodebuffer&&n.isBuffer(t)?"nodebuffer":i.uint8array&&t instanceof Uint8Array?"uint8array":i.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},e.checkSupport=function(t){if(!i[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},e.MAX_VALUE_16BITS=65535,e.MAX_VALUE_32BITS=-1,e.pretty=function(t){var e,r,i="";for(r=0;r<(t||"").length;r++)i+="\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return i},e.delay=function(t,e,r){s((function(){t.apply(r||null,e||[])}))},e.inherits=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r},e.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},e.prepareContent=function(t,r,n,s,h){return o.Promise.resolve(r).then((function(t){return i.blob&&(t instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(t)))&&"undefined"!=typeof FileReader?new o.Promise((function(e,r){var i=new FileReader;i.onload=function(t){e(t.target.result)},i.onerror=function(t){r(t.target.error)},i.readAsArrayBuffer(t)})):t})).then((function(r){var p,c=e.getTypeOf(r);return c?("arraybuffer"===c?r=e.transformTo("uint8array",r):"string"===c&&(h?r=a.decode(r):n&&!0!==s&&(r=l(p=r,i.uint8array?new Uint8Array(p.length):new Array(p.length)))),r):o.Promise.reject(new Error("Can't read the data of '"+t+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},6624:(t,e,r)=>{"use strict";var i=r(8435),a=r(8910),n=r(1141),s=r(9392),o=(r(3600),r(3790));function h(t){this.files=[],this.loadOptions=t}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+a.pretty(e)+", expected "+a.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var i=this.reader.readString(4)===e;return this.reader.setIndex(r),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=o.uint8array?"uint8array":"array",r=a.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,i=this.zip64EndOfCentralSize-44;0<i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(n.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(n.CENTRAL_FILE_HEADER);)(t=new s({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(n.CENTRAL_DIRECTORY_END);if(t<0)throw this.isSignature(0,n.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(t);var e=t;if(this.checkSignature(n.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===a.MAX_VALUE_16BITS||this.diskWithCentralDirStart===a.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===a.MAX_VALUE_16BITS||this.centralDirRecords===a.MAX_VALUE_16BITS||this.centralDirSize===a.MAX_VALUE_32BITS||this.centralDirOffset===a.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(n.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(n.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,n.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(n.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(n.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var i=e-r;if(i>0)this.isSignature(e,n.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error("Corrupted zip: missing "+Math.abs(i)+" bytes.")},prepareReader:function(t){this.reader=i(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=h},9392:(t,e,r)=>{"use strict";var i=r(8435),a=r(8910),n=r(7326),s=r(6988),o=r(3600),h=r(1678),l=r(3790);function p(t,e){this.options=t,this.loadOptions=e}p.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in h)if(h.hasOwnProperty(e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+a.pretty(this.compressionMethod)+" unknown (inner file : "+a.transformTo("string",this.fileName)+")");this.decompressed=new n(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0===t&&(this.dosPermissions=63&this.externalFileAttributes),3===t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===a.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===a.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===a.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===a.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,i,a=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<a;)e=t.readInt(2),r=t.readInt(2),i=t.readData(r),this.extraFields[e]={id:e,length:r,value:i};t.setIndex(a)},handleUTF8:function(){var t=l.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=a.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var n=a.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(n)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=i(t.value);return 1!==e.readInt(1)||s(this.fileName)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=i(t.value);return 1!==e.readInt(1)||s(this.fileComment)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null}},t.exports=p},6859:(t,e,r)=>{"use strict";var i=r(1285),a=r(5301),n=r(3600),s=r(7326),o=r(3718),h=function(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}};h.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var a="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var s=!this._dataBinary;s&&!a&&(e=e.pipe(new n.Utf8EncodeWorker)),!s&&a&&(e=e.pipe(new n.Utf8DecodeWorker))}catch(t){(e=new o("error")).error(t)}return new i(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof s&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new n.Utf8EncodeWorker)),s.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof o?this._data:new a(this._data)}};for(var l=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],p=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},c=0;c<l.length;c++)h.prototype[l[c]]=p;t.exports=h},6783:(t,e,r)=>{"use strict";var i=r(624);function a(){}var n={},s=["REJECTED"],o=["FULFILLED"],h=["PENDING"];if(!process.browser)var l=["UNHANDLED"];function p(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=h,this.queue=[],this.outcome=void 0,process.browser||(this.handled=l),t!==a&&u(this,t)}function c(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(t,e,r){i((function(){var i;try{i=e(r)}catch(e){return n.reject(t,e)}i===t?n.reject(t,new TypeError("Cannot resolve promise with itself")):n.resolve(t,i)}))}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function u(t,e){var r=!1;function i(e){r||(r=!0,n.reject(t,e))}function a(e){r||(r=!0,n.resolve(t,e))}var s=m((function(){e(a,i)}));"error"===s.status&&i(s.value)}function m(t,e){var r={};try{r.value=t(e),r.status="success"}catch(t){r.status="error",r.value=t}return r}t.exports=p,p.prototype.finally=function(t){if("function"!=typeof t)return this;var e=this.constructor;return this.then((function(r){return e.resolve(t()).then((function(){return r}))}),(function(r){return e.resolve(t()).then((function(){throw r}))}))},p.prototype.catch=function(t){return this.then(null,t)},p.prototype.then=function(t,e){if("function"!=typeof t&&this.state===o||"function"!=typeof e&&this.state===s)return this;var r=new this.constructor(a);return process.browser||this.handled===l&&(this.handled=null),this.state!==h?f(r,this.state===o?t:e,this.outcome):this.queue.push(new c(r,t,e)),r},c.prototype.callFulfilled=function(t){n.resolve(this.promise,t)},c.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t)},c.prototype.callRejected=function(t){n.reject(this.promise,t)},c.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t)},n.resolve=function(t,e){var r=m(d,e);if("error"===r.status)return n.reject(t,r.value);var i=r.value;if(i)u(t,i);else{t.state=o,t.outcome=e;for(var a=-1,s=t.queue.length;++a<s;)t.queue[a].callFulfilled(e)}return t},n.reject=function(t,e){t.state=s,t.outcome=e,process.browser||t.handled===l&&i((function(){t.handled===l&&process.emit("unhandledRejection",e,t)}));for(var r=-1,a=t.queue.length;++r<a;)t.queue[r].callRejected(e);return t},p.resolve=function(t){return t instanceof this?t:n.resolve(new this(a),t)},p.reject=function(t){var e=new this(a);return n.reject(e,t)},p.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,i=!1;if(!r)return this.resolve([]);for(var s=new Array(r),o=0,h=-1,l=new this(a);++h<r;)p(t[h],h);return l;function p(t,a){e.resolve(t).then((function(t){s[a]=t,++o!==r||i||(i=!0,n.resolve(l,s))}),(function(t){i||(i=!0,n.reject(l,t))}))}},p.race=function(t){if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var e=t.length,r=!1;if(!e)return this.resolve([]);for(var i,s=-1,o=new this(a);++s<e;)i=t[s],this.resolve(i).then((function(t){r||(r=!0,n.resolve(o,t))}),(function(t){r||(r=!0,n.reject(o,t))}));return o}},1248:(module,exports,__webpack_require__)=>{var __WEBPACK_AMD_DEFINE_RESULT__,root,factory;"undefined"!=typeof navigator&&(root=window||{},factory=function(window){"use strict";var svgNS="http://www.w3.org/2000/svg",locationHref="",initialDefaultFrame=-999999,subframeEnabled=!0,expressionsPlugin,isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),cachedColors={},bmRnd,bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};function ProjectInterface(){return{}}!function(){var t,e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],r=e.length;for(t=0;t<r;t+=1)BMMath[e[t]]=Math[e[t]]}(),BMMath.random=Math.random,BMMath.abs=function(t){if("object"==typeof t&&t.length){var e,r=createSizedArray(t.length),i=t.length;for(e=0;e<i;e+=1)r[e]=Math.abs(t[e]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function roundValues(t){bmRnd=t?Math.round:function(t){return t}}function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,i){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=i<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,i){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=i<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}function BMAnimationConfigErrorEvent(t,e){this.type=t,this.nativeError=e}roundValues(!1);var createElementID=(_count=0,function(){return"__lottie_element_"+(_count+=1)}),_count;function HSVtoRGB(t,e,r){var i,a,n,s,o,h,l,p;switch(h=r*(1-e),l=r*(1-(o=6*t-(s=Math.floor(6*t)))*e),p=r*(1-(1-o)*e),s%6){case 0:i=r,a=p,n=h;break;case 1:i=l,a=r,n=h;break;case 2:i=h,a=r,n=p;break;case 3:i=h,a=l,n=r;break;case 4:i=p,a=h,n=r;break;case 5:i=r,a=h,n=l}return[i,a,n]}function RGBtoHSV(t,e,r){var i,a=Math.max(t,e,r),n=Math.min(t,e,r),s=a-n,o=0===a?0:s/a,h=a/255;switch(a){case n:i=0;break;case t:i=e-r+s*(e<r?6:0),i/=6*s;break;case e:i=r-t+2*s,i/=6*s;break;case r:i=t-e+4*s,i/=6*s}return[i,o,h]}function addSaturationToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(255*t[0],255*t[1],255*t[2]);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t,e,r=[];for(t=0;t<256;t+=1)e=t.toString(16),r[t]=1===e.length?"0"+e:e;return function(t,e,i){return t<0&&(t=0),e<0&&(e=0),i<0&&(i=0),"#"+r[t]+r[e]+r[i]}}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(t,e){if(this._cbs[t])for(var r=this._cbs[t].length,i=0;i<r;i+=1)this._cbs[t][i](e)},addEventListener:function(t,e){return this._cbs[t]||(this._cbs[t]=[]),this._cbs[t].push(e),function(){this.removeEventListener(t,e)}.bind(this)},removeEventListener:function(t,e){if(e){if(this._cbs[t]){for(var r=0,i=this._cbs[t].length;r<i;)this._cbs[t][r]===e&&(this._cbs[t].splice(r,1),r-=1,i-=1),r+=1;this._cbs[t].length||(this._cbs[t]=null)}}else this._cbs[t]=null}};var createTypedArray=function(){function t(t,e){var r,i=0,a=[];switch(t){case"int16":case"uint8c":r=1;break;default:r=1.1}for(i=0;i<e;i+=1)a.push(r);return a}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?function(e,r){return"float32"===e?new Float32Array(r):"int16"===e?new Int16Array(r):"uint8c"===e?new Uint8ClampedArray(r):t(e,r)}:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function createNS(t){return document.createElementNS(svgNS,t)}function createTag(t){return document.createElement(t)}function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&(this.dynamicProperties.push(t),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){var t;this._mdf=!1;var e=this.dynamicProperties.length;for(t=0;t<e;t+=1)this.dynamicProperties[t].getValue(),this.dynamicProperties[t]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(t){this.container=t,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var getBlendMode=(blendModeEnums={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"},function(t){return blendModeEnums[t]||""}),blendModeEnums,Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,i=Math.round;function a(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function n(r){if(0===r)return this;var i=t(r),a=e(r);return this._t(i,-a,0,0,a,i,0,0,0,0,1,0,0,0,0,1)}function s(r){if(0===r)return this;var i=t(r),a=e(r);return this._t(1,0,0,0,0,i,-a,0,0,a,i,0,0,0,0,1)}function o(r){if(0===r)return this;var i=t(r),a=e(r);return this._t(i,0,a,0,0,1,0,0,-a,0,i,0,0,0,0,1)}function h(r){if(0===r)return this;var i=t(r),a=e(r);return this._t(i,-a,0,0,a,i,0,0,0,0,1,0,0,0,0,1)}function l(t,e){return this._t(1,e,t,1,0,0)}function p(t,e){return this.shear(r(t),r(e))}function c(i,a){var n=t(a),s=e(a);return this._t(n,s,0,0,-s,n,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(i),1,0,0,0,0,1,0,0,0,0,1)._t(n,-s,0,0,s,n,0,0,0,0,1,0,0,0,0,1)}function f(t,e,r){return r||0===r||(r=1),1===t&&1===e&&1===r?this:this._t(t,0,0,0,0,e,0,0,0,0,r,0,0,0,0,1)}function d(t,e,r,i,a,n,s,o,h,l,p,c,f,d,u,m){return this.props[0]=t,this.props[1]=e,this.props[2]=r,this.props[3]=i,this.props[4]=a,this.props[5]=n,this.props[6]=s,this.props[7]=o,this.props[8]=h,this.props[9]=l,this.props[10]=p,this.props[11]=c,this.props[12]=f,this.props[13]=d,this.props[14]=u,this.props[15]=m,this}function u(t,e,r){return r=r||0,0!==t||0!==e||0!==r?this._t(1,0,0,0,0,1,0,0,0,0,1,0,t,e,r,1):this}function m(t,e,r,i,a,n,s,o,h,l,p,c,f,d,u,m){var y=this.props;if(1===t&&0===e&&0===r&&0===i&&0===a&&1===n&&0===s&&0===o&&0===h&&0===l&&1===p&&0===c)return y[12]=y[12]*t+y[15]*f,y[13]=y[13]*n+y[15]*d,y[14]=y[14]*p+y[15]*u,y[15]*=m,this._identityCalculated=!1,this;var g=y[0],v=y[1],x=y[2],b=y[3],k=y[4],_=y[5],E=y[6],w=y[7],S=y[8],A=y[9],P=y[10],C=y[11],D=y[12],T=y[13],F=y[14],M=y[15];return y[0]=g*t+v*a+x*h+b*f,y[1]=g*e+v*n+x*l+b*d,y[2]=g*r+v*s+x*p+b*u,y[3]=g*i+v*o+x*c+b*m,y[4]=k*t+_*a+E*h+w*f,y[5]=k*e+_*n+E*l+w*d,y[6]=k*r+_*s+E*p+w*u,y[7]=k*i+_*o+E*c+w*m,y[8]=S*t+A*a+P*h+C*f,y[9]=S*e+A*n+P*l+C*d,y[10]=S*r+A*s+P*p+C*u,y[11]=S*i+A*o+P*c+C*m,y[12]=D*t+T*a+F*h+M*f,y[13]=D*e+T*n+F*l+M*d,y[14]=D*r+T*s+F*p+M*u,y[15]=D*i+T*o+F*c+M*m,this._identityCalculated=!1,this}function y(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function g(t){for(var e=0;e<16;){if(t.props[e]!==this.props[e])return!1;e+=1}return!0}function v(t){var e;for(e=0;e<16;e+=1)t.props[e]=this.props[e];return t}function x(t){var e;for(e=0;e<16;e+=1)this.props[e]=t[e]}function b(t,e,r){return{x:t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],y:t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],z:t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}}function k(t,e,r){return t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12]}function _(t,e,r){return t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13]}function E(t,e,r){return t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]}function w(){var t=this.props[0]*this.props[5]-this.props[1]*this.props[4],e=this.props[5]/t,r=-this.props[1]/t,i=-this.props[4]/t,a=this.props[0]/t,n=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/t,s=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/t,o=new Matrix;return o.props[0]=e,o.props[1]=r,o.props[4]=i,o.props[5]=a,o.props[12]=n,o.props[13]=s,o}function S(t){return this.getInverseMatrix().applyToPointArray(t[0],t[1],t[2]||0)}function A(t){var e,r=t.length,i=[];for(e=0;e<r;e+=1)i[e]=S(t[e]);return i}function P(t,e,r){var i=createTypedArray("float32",6);if(this.isIdentity())i[0]=t[0],i[1]=t[1],i[2]=e[0],i[3]=e[1],i[4]=r[0],i[5]=r[1];else{var a=this.props[0],n=this.props[1],s=this.props[4],o=this.props[5],h=this.props[12],l=this.props[13];i[0]=t[0]*a+t[1]*s+h,i[1]=t[0]*n+t[1]*o+l,i[2]=e[0]*a+e[1]*s+h,i[3]=e[0]*n+e[1]*o+l,i[4]=r[0]*a+r[1]*s+h,i[5]=r[0]*n+r[1]*o+l}return i}function C(t,e,r){return this.isIdentity()?[t,e,r]:[t*this.props[0]+e*this.props[4]+r*this.props[8]+this.props[12],t*this.props[1]+e*this.props[5]+r*this.props[9]+this.props[13],t*this.props[2]+e*this.props[6]+r*this.props[10]+this.props[14]]}function D(t,e){if(this.isIdentity())return t+","+e;var r=this.props;return Math.round(100*(t*r[0]+e*r[4]+r[12]))/100+","+Math.round(100*(t*r[1]+e*r[5]+r[13]))/100}function T(){for(var t=0,e=this.props,r="matrix3d(";t<16;)r+=i(1e4*e[t])/1e4,r+=15===t?")":",",t+=1;return r}function F(t){return t<1e-6&&t>0||t>-1e-6&&t<0?i(1e4*t)/1e4:t}function M(){var t=this.props;return"matrix("+F(t[0])+","+F(t[1])+","+F(t[4])+","+F(t[5])+","+F(t[12])+","+F(t[13])+")"}return function(){this.reset=a,this.rotate=n,this.rotateX=s,this.rotateY=o,this.rotateZ=h,this.skew=p,this.skewFromAxis=c,this.shear=l,this.scale=f,this.setTransform=d,this.translate=u,this.transform=m,this.applyToPoint=b,this.applyToX=k,this.applyToY=_,this.applyToZ=E,this.applyToPointArray=C,this.applyToTriplePoints=P,this.applyToPointStringified=D,this.toCSS=T,this.to2dCSS=M,this.clone=v,this.cloneFromProps=x,this.equals=g,this.inversePoints=A,this.inversePoint=S,this.getInverseMatrix=w,this._t=this.transform,this.isIdentity=y,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();!function(t,e){var r=this,i=256,a=e.pow(i,6),n=e.pow(2,52),s=2*n,o=255;function h(t){var e,r=t.length,a=this,n=0,s=a.i=a.j=0,h=a.S=[];for(r||(t=[r++]);n<i;)h[n]=n++;for(n=0;n<i;n++)h[n]=h[s=o&s+t[n%r]+(e=h[n])],h[s]=e;a.g=function(t){for(var e,r=0,n=a.i,s=a.j,h=a.S;t--;)e=h[n=o&n+1],r=r*i+h[o&(h[n]=h[s=o&s+e])+(h[s]=e)];return a.i=n,a.j=s,r}}function l(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){var r,i=[],a=typeof t;if(e&&"object"==a)for(r in t)try{i.push(p(t[r],e-1))}catch(t){}return i.length?i:"string"==a?t:t+"\0"}function c(t,e){for(var r,i=t+"",a=0;a<i.length;)e[o&a]=o&(r^=19*e[o&a])+i.charCodeAt(a++);return f(e)}function f(t){return String.fromCharCode.apply(0,t)}e.seedrandom=function(o,d,u){var m=[],y=c(p((d=!0===d?{entropy:!0}:d||{}).entropy?[o,f(t)]:null===o?function(){try{var e=new Uint8Array(i);return(r.crypto||r.msCrypto).getRandomValues(e),f(e)}catch(e){var a=r.navigator,n=a&&a.plugins;return[+new Date,r,n,r.screen,f(t)]}}():o,3),m),g=new h(m),v=function(){for(var t=g.g(6),e=a,r=0;t<n;)t=(t+r)*i,e*=i,r=g.g(1);for(;t>=s;)t/=2,e/=2,r>>>=1;return(t+r)/e};return v.int32=function(){return 0|g.g(4)},v.quick=function(){return g.g(4)/4294967296},v.double=v,c(f(g.S),t),(d.pass||u||function(t,r,i,a){return a&&(a.S&&l(a,g),t.state=function(){return l(g,{})}),i?(e.random=t,r):t})(v,y,"global"in d?d.global:this==e,d.state)},c(e.random(),t)}([],BMMath);var BezierFactory=function(){var t={getBezierEasing:function(t,r,i,a,n){var s=n||("bez_"+t+"_"+r+"_"+i+"_"+a).replace(/\./g,"p");if(e[s])return e[s];var o=new l([t,r,i,a]);return e[s]=o,o}},e={},r=.1,i="function"==typeof Float32Array;function a(t,e){return 1-3*e+3*t}function n(t,e){return 3*e-6*t}function s(t){return 3*t}function o(t,e,r){return((a(e,r)*t+n(e,r))*t+s(e))*t}function h(t,e,r){return 3*a(e,r)*t*t+2*n(e,r)*t+s(e)}function l(t){this._p=t,this._mSampleValues=i?new Float32Array(11):new Array(11),this._precomputed=!1,this.get=this.get.bind(this)}return l.prototype={get:function(t){var e=this._p[0],r=this._p[1],i=this._p[2],a=this._p[3];return this._precomputed||this._precompute(),e===r&&i===a?t:0===t?0:1===t?1:o(this._getTForX(t),r,a)},_precompute:function(){var t=this._p[0],e=this._p[1],r=this._p[2],i=this._p[3];this._precomputed=!0,t===e&&r===i||this._calcSampleValues()},_calcSampleValues:function(){for(var t=this._p[0],e=this._p[2],i=0;i<11;++i)this._mSampleValues[i]=o(i*r,t,e)},_getTForX:function(t){for(var e=this._p[0],i=this._p[2],a=this._mSampleValues,n=0,s=1;10!==s&&a[s]<=t;++s)n+=r;var l=n+(t-a[--s])/(a[s+1]-a[s])*r,p=h(l,e,i);return p>=.001?function(t,e,r,i){for(var a=0;a<4;++a){var n=h(e,r,i);if(0===n)return e;e-=(o(e,r,i)-t)/n}return e}(t,l,e,i):0===p?l:function(t,e,r,i,a){var n,s,h=0;do{(n=o(s=e+(r-e)/2,i,a)-t)>0?r=s:e=s}while(Math.abs(n)>1e-7&&++h<10);return s}(t,n,n+r,e,i)}},t}();function extendPrototype(t,e){var r,i,a=t.length;for(r=0;r<a;r+=1)for(var n in i=t[r].prototype)Object.prototype.hasOwnProperty.call(i,n)&&(e.prototype[n]=i[n])}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}function bezFunction(){var t=Math;function e(t,e,r,i,a,n){var s=t*i+e*a+r*n-a*i-n*t-r*e;return s>-.001&&s<.001}var r=function(t,e,r,i){var a,n,s,o,h,l,p=defaultCurveSegments,c=0,f=[],d=[],u=bezierLengthPool.newElement();for(s=r.length,a=0;a<p;a+=1){for(h=a/(p-1),l=0,n=0;n<s;n+=1)o=bmPow(1-h,3)*t[n]+3*bmPow(1-h,2)*h*r[n]+3*(1-h)*bmPow(h,2)*i[n]+bmPow(h,3)*e[n],f[n]=o,null!==d[n]&&(l+=bmPow(f[n]-d[n],2)),d[n]=f[n];l&&(c+=l=bmSqrt(l)),u.percents[a]=h,u.lengths[a]=c}return u.addedLength=c,u};function i(t){this.segmentLength=0,this.points=new Array(t)}function a(t,e){this.partialLength=t,this.point=e}var n,s=(n={},function(t,r,s,o){var h=(t[0]+"_"+t[1]+"_"+r[0]+"_"+r[1]+"_"+s[0]+"_"+s[1]+"_"+o[0]+"_"+o[1]).replace(/\./g,"p");if(!n[h]){var l,p,c,f,d,u,m,y=defaultCurveSegments,g=0,v=null;2===t.length&&(t[0]!==r[0]||t[1]!==r[1])&&e(t[0],t[1],r[0],r[1],t[0]+s[0],t[1]+s[1])&&e(t[0],t[1],r[0],r[1],r[0]+o[0],r[1]+o[1])&&(y=2);var x=new i(y);for(c=s.length,l=0;l<y;l+=1){for(m=createSizedArray(c),d=l/(y-1),u=0,p=0;p<c;p+=1)f=bmPow(1-d,3)*t[p]+3*bmPow(1-d,2)*d*(t[p]+s[p])+3*(1-d)*bmPow(d,2)*(r[p]+o[p])+bmPow(d,3)*r[p],m[p]=f,null!==v&&(u+=bmPow(m[p]-v[p],2));g+=u=bmSqrt(u),x.points[l]=new a(u,m),v=m}x.segmentLength=g,n[h]=x}return n[h]});function o(t,e){var r=e.percents,i=e.lengths,a=r.length,n=bmFloor((a-1)*t),s=t*e.addedLength,o=0;if(n===a-1||0===n||s===i[n])return r[n];for(var h=i[n]>s?-1:1,l=!0;l;)if(i[n]<=s&&i[n+1]>s?(o=(s-i[n])/(i[n+1]-i[n]),l=!1):n+=h,n<0||n>=a-1){if(n===a-1)return r[n];l=!1}return r[n]+(r[n+1]-r[n])*o}var h=createTypedArray("float32",8);return{getSegmentsLength:function(t){var e,i=segmentsLengthPool.newElement(),a=t.c,n=t.v,s=t.o,o=t.i,h=t._length,l=i.lengths,p=0;for(e=0;e<h-1;e+=1)l[e]=r(n[e],n[e+1],s[e],o[e+1]),p+=l[e].addedLength;return a&&h&&(l[e]=r(n[e],n[0],s[e],o[0]),p+=l[e].addedLength),i.totalLength=p,i},getNewSegment:function(e,r,i,a,n,s,l){n<0?n=0:n>1&&(n=1);var p,c=o(n,l),f=o(s=s>1?1:s,l),d=e.length,u=1-c,m=1-f,y=u*u*u,g=c*u*u*3,v=c*c*u*3,x=c*c*c,b=u*u*m,k=c*u*m+u*c*m+u*u*f,_=c*c*m+u*c*f+c*u*f,E=c*c*f,w=u*m*m,S=c*m*m+u*f*m+u*m*f,A=c*f*m+u*f*f+c*m*f,P=c*f*f,C=m*m*m,D=f*m*m+m*f*m+m*m*f,T=f*f*m+m*f*f+f*m*f,F=f*f*f;for(p=0;p<d;p+=1)h[4*p]=t.round(1e3*(y*e[p]+g*i[p]+v*a[p]+x*r[p]))/1e3,h[4*p+1]=t.round(1e3*(b*e[p]+k*i[p]+_*a[p]+E*r[p]))/1e3,h[4*p+2]=t.round(1e3*(w*e[p]+S*i[p]+A*a[p]+P*r[p]))/1e3,h[4*p+3]=t.round(1e3*(C*e[p]+D*i[p]+T*a[p]+F*r[p]))/1e3;return h},getPointInSegment:function(e,r,i,a,n,s){var h=o(n,s),l=1-h;return[t.round(1e3*(l*l*l*e[0]+(h*l*l+l*h*l+l*l*h)*i[0]+(h*h*l+l*h*h+h*l*h)*a[0]+h*h*h*r[0]))/1e3,t.round(1e3*(l*l*l*e[1]+(h*l*l+l*h*l+l*l*h)*i[1]+(h*h*l+l*h*h+h*l*h)*a[1]+h*h*h*r[1]))/1e3]},buildBezierData:s,pointOnLine2D:e,pointOnLine3D:function(r,i,a,n,s,o,h,l,p){if(0===a&&0===o&&0===p)return e(r,i,n,s,h,l);var c,f=t.sqrt(t.pow(n-r,2)+t.pow(s-i,2)+t.pow(o-a,2)),d=t.sqrt(t.pow(h-r,2)+t.pow(l-i,2)+t.pow(p-a,2)),u=t.sqrt(t.pow(h-n,2)+t.pow(l-s,2)+t.pow(p-o,2));return(c=f>d?f>u?f-d-u:u-d-f:u>d?u-d-f:d-f-u)>-1e-4&&c<1e-4}}}!function(){for(var t=0,e=["ms","moz","webkit","o"],r=0;r<e.length&&!window.requestAnimationFrame;++r)window.requestAnimationFrame=window[e[r]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[r]+"CancelAnimationFrame"]||window[e[r]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e){var r=(new Date).getTime(),i=Math.max(0,16-(r-t)),a=setTimeout((function(){e(r+i)}),i);return t=r+i,a}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)})}();var bez=bezFunction();function dataFunctionManager(){function t(a,n,s){var o,h,l,p,c,f,d,u=a.length;for(h=0;h<u;h+=1)if("ks"in(o=a[h])&&!o.completed){if(o.completed=!0,o.tt&&(a[h-1].td=o.tt),o.hasMask){var m=o.masksProperties;for(p=m.length,l=0;l<p;l+=1)if(m[l].pt.k.i)i(m[l].pt.k);else for(f=m[l].pt.k.length,c=0;c<f;c+=1)m[l].pt.k[c].s&&i(m[l].pt.k[c].s[0]),m[l].pt.k[c].e&&i(m[l].pt.k[c].e[0])}0===o.ty?(o.layers=e(o.refId,n),t(o.layers,n,s)):4===o.ty?r(o.shapes):5===o.ty&&(0!==(d=o).t.a.length||"m"in d.t.p||(d.singleShape=!0))}}function e(t,e){for(var r=0,i=e.length;r<i;){if(e[r].id===t)return e[r].layers.__used?JSON.parse(JSON.stringify(e[r].layers)):(e[r].layers.__used=!0,e[r].layers);r+=1}return null}function r(t){var e,a,n;for(e=t.length-1;e>=0;e-=1)if("sh"===t[e].ty)if(t[e].ks.k.i)i(t[e].ks.k);else for(n=t[e].ks.k.length,a=0;a<n;a+=1)t[e].ks.k[a].s&&i(t[e].ks.k[a].s[0]),t[e].ks.k[a].e&&i(t[e].ks.k[a].e[0]);else"gr"===t[e].ty&&r(t[e].it)}function i(t){var e,r=t.i.length;for(e=0;e<r;e+=1)t.i[e][0]+=t.v[e][0],t.i[e][1]+=t.v[e][1],t.o[e][0]+=t.v[e][0],t.o[e][1]+=t.v[e][1]}function a(t,e){var r=e?e.split("."):[100,100,100];return t[0]>r[0]||!(r[0]>t[0])&&(t[1]>r[1]||!(r[1]>t[1])&&(t[2]>r[2]||!(r[2]>t[2])&&null))}var n,s=function(){var t=[4,4,14];function e(t){var e,r,i,a=t.length;for(e=0;e<a;e+=1)5===t[e].ty&&(void 0,i=(r=t[e]).t.d,r.t.d={k:[{s:i,t:0}]})}return function(r){if(a(t,r.v)&&(e(r.layers),r.assets)){var i,n=r.assets.length;for(i=0;i<n;i+=1)r.assets[i].layers&&e(r.assets[i].layers)}}}(),o=(n=[4,7,99],function(t){if(t.chars&&!a(n,t.v)){var e,r,s,o,h,l=t.chars.length;for(e=0;e<l;e+=1)if(t.chars[e].data&&t.chars[e].data.shapes)for(s=(h=t.chars[e].data.shapes[0].it).length,r=0;r<s;r+=1)(o=h[r].ks.k).__converted||(i(h[r].ks.k),o.__converted=!0)}}),h=function(){var t=[4,1,9];function e(t){var r,i,a,n=t.length;for(r=0;r<n;r+=1)if("gr"===t[r].ty)e(t[r].it);else if("fl"===t[r].ty||"st"===t[r].ty)if(t[r].c.k&&t[r].c.k[0].i)for(a=t[r].c.k.length,i=0;i<a;i+=1)t[r].c.k[i].s&&(t[r].c.k[i].s[0]/=255,t[r].c.k[i].s[1]/=255,t[r].c.k[i].s[2]/=255,t[r].c.k[i].s[3]/=255),t[r].c.k[i].e&&(t[r].c.k[i].e[0]/=255,t[r].c.k[i].e[1]/=255,t[r].c.k[i].e[2]/=255,t[r].c.k[i].e[3]/=255);else t[r].c.k[0]/=255,t[r].c.k[1]/=255,t[r].c.k[2]/=255,t[r].c.k[3]/=255}function r(t){var r,i=t.length;for(r=0;r<i;r+=1)4===t[r].ty&&e(t[r].shapes)}return function(e){if(a(t,e.v)&&(r(e.layers),e.assets)){var i,n=e.assets.length;for(i=0;i<n;i+=1)e.assets[i].layers&&r(e.assets[i].layers)}}}(),l=function(){var t=[4,4,18];function e(t){var r,i,a;for(r=t.length-1;r>=0;r-=1)if("sh"===t[r].ty)if(t[r].ks.k.i)t[r].ks.k.c=t[r].closed;else for(a=t[r].ks.k.length,i=0;i<a;i+=1)t[r].ks.k[i].s&&(t[r].ks.k[i].s[0].c=t[r].closed),t[r].ks.k[i].e&&(t[r].ks.k[i].e[0].c=t[r].closed);else"gr"===t[r].ty&&e(t[r].it)}function r(t){var r,i,a,n,s,o,h=t.length;for(i=0;i<h;i+=1){if((r=t[i]).hasMask){var l=r.masksProperties;for(n=l.length,a=0;a<n;a+=1)if(l[a].pt.k.i)l[a].pt.k.c=l[a].cl;else for(o=l[a].pt.k.length,s=0;s<o;s+=1)l[a].pt.k[s].s&&(l[a].pt.k[s].s[0].c=l[a].cl),l[a].pt.k[s].e&&(l[a].pt.k[s].e[0].c=l[a].cl)}4===r.ty&&e(r.shapes)}}return function(e){if(a(t,e.v)&&(r(e.layers),e.assets)){var i,n=e.assets.length;for(i=0;i<n;i+=1)e.assets[i].layers&&r(e.assets[i].layers)}}}(),p={completeData:function(e,r){e.__complete||(h(e),s(e),o(e),l(e),t(e.layers,e.assets,r),e.__complete=!0)}};return p.checkColors=h,p.checkChars=o,p.checkShapes=l,p.completeLayers=t,p}var dataManager=dataFunctionManager();function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",i="normal",a=e.length,n=0;n<a;n+=1)switch(e[n].toLowerCase()){case"italic":i="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200"}return{style:i,weight:t.fWeight||r}}var FontManager=function(){var t={w:0,size:0,shapes:[]},e=[];function r(t,e){var r=createTag("span");r.setAttribute("aria-hidden",!0),r.style.fontFamily=e;var i=createTag("span");i.innerText="giItT1WQy@!-/#",r.style.position="absolute",r.style.left="-10000px",r.style.top="-10000px",r.style.fontSize="300px",r.style.fontVariant="normal",r.style.fontStyle="normal",r.style.fontWeight="normal",r.style.letterSpacing="0",r.appendChild(i),document.body.appendChild(r);var a=i.offsetWidth;return i.style.fontFamily=function(t){var e,r=t.split(","),i=r.length,a=[];for(e=0;e<i;e+=1)"sans-serif"!==r[e]&&"monospace"!==r[e]&&a.push(r[e]);return a.join(",")}(t)+", "+e,{node:i,w:a,parent:r}}function i(t,e){var r=createNS("text");r.style.fontSize="100px";var i=getFontProperties(e);return r.setAttribute("font-family",e.fFamily),r.setAttribute("font-style",i.style),r.setAttribute("font-weight",i.weight),r.textContent="1",e.fClass?(r.style.fontFamily="inherit",r.setAttribute("class",e.fClass)):r.style.fontFamily=e.fFamily,t.appendChild(r),createTag("canvas").getContext("2d").font=e.fWeight+" "+e.fStyle+" 100px "+e.fFamily,r}e=e.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var a=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};return a.getCombinedCharacterCodes=function(){return e},a.prototype={addChars:function(t){if(t){var e;this.chars||(this.chars=[]);var r,i,a=t.length,n=this.chars.length;for(e=0;e<a;e+=1){for(r=0,i=!1;r<n;)this.chars[r].style===t[e].style&&this.chars[r].fFamily===t[e].fFamily&&this.chars[r].ch===t[e].ch&&(i=!0),r+=1;i||(this.chars.push(t[e]),n+=1)}}},addFonts:function(t,e){if(t){if(this.chars)return this.isLoaded=!0,void(this.fonts=t.list);var a,n=t.list,s=n.length,o=s;for(a=0;a<s;a+=1){var h,l,p=!0;if(n[a].loaded=!1,n[a].monoCase=r(n[a].fFamily,"monospace"),n[a].sansCase=r(n[a].fFamily,"sans-serif"),n[a].fPath){if("p"===n[a].fOrigin||3===n[a].origin){if((h=document.querySelectorAll('style[f-forigin="p"][f-family="'+n[a].fFamily+'"], style[f-origin="3"][f-family="'+n[a].fFamily+'"]')).length>0&&(p=!1),p){var c=createTag("style");c.setAttribute("f-forigin",n[a].fOrigin),c.setAttribute("f-origin",n[a].origin),c.setAttribute("f-family",n[a].fFamily),c.type="text/css",c.innerText="@font-face {font-family: "+n[a].fFamily+"; font-style: normal; src: url('"+n[a].fPath+"');}",e.appendChild(c)}}else if("g"===n[a].fOrigin||1===n[a].origin){for(h=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),l=0;l<h.length;l+=1)-1!==h[l].href.indexOf(n[a].fPath)&&(p=!1);if(p){var f=createTag("link");f.setAttribute("f-forigin",n[a].fOrigin),f.setAttribute("f-origin",n[a].origin),f.type="text/css",f.rel="stylesheet",f.href=n[a].fPath,document.body.appendChild(f)}}else if("t"===n[a].fOrigin||2===n[a].origin){for(h=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),l=0;l<h.length;l+=1)n[a].fPath===h[l].src&&(p=!1);if(p){var d=createTag("link");d.setAttribute("f-forigin",n[a].fOrigin),d.setAttribute("f-origin",n[a].origin),d.setAttribute("rel","stylesheet"),d.setAttribute("href",n[a].fPath),e.appendChild(d)}}}else n[a].loaded=!0,o-=1;n[a].helper=i(e,n[a]),n[a].cache={},this.fonts.push(n[a])}0===o?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}else this.isLoaded=!0},getCharData:function(e,r,i){for(var a=0,n=this.chars.length;a<n;){if(this.chars[a].ch===e&&this.chars[a].style===r&&this.chars[a].fFamily===i)return this.chars[a];a+=1}return("string"==typeof e&&13!==e.charCodeAt(0)||!e)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",e,r,i)),t},getFontByName:function(t){for(var e=0,r=this.fonts.length;e<r;){if(this.fonts[e].fName===t)return this.fonts[e];e+=1}return this.fonts[0]},measureText:function(t,e,r){var i=this.getFontByName(e),a=t.charCodeAt(0);if(!i.cache[a+1]){var n=i.helper;if(" "===t){n.textContent="|"+t+"|";var s=n.getComputedTextLength();n.textContent="||";var o=n.getComputedTextLength();i.cache[a+1]=(s-o)/100}else n.textContent=t,i.cache[a+1]=n.getComputedTextLength()/100}return i.cache[a+1]*r},checkLoadedFonts:function(){var t,e,r,i=this.fonts.length,a=i;for(t=0;t<i;t+=1)this.fonts[t].loaded?a-=1:"n"===this.fonts[t].fOrigin||0===this.fonts[t].origin?this.fonts[t].loaded=!0:(e=this.fonts[t].monoCase.node,r=this.fonts[t].monoCase.w,e.offsetWidth!==r?(a-=1,this.fonts[t].loaded=!0):(e=this.fonts[t].sansCase.node,r=this.fonts[t].sansCase.w,e.offsetWidth!==r&&(a-=1,this.fonts[t].loaded=!0)),this.fonts[t].loaded&&(this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent),this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));0!==a&&Date.now()-this.initTime<5e3?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)},setIsLoaded:function(){this.isLoaded=!0}},a}(),PropertyFactory=function(){var t=initialDefaultFrame,e=Math.abs;function r(t,e){var r,a=this.offsetTime;"multidimensional"===this.propType&&(r=createTypedArray("float32",this.pv.length));for(var n,s,o,h,l,p,c,f,d=e.lastIndex,u=d,m=this.keyframes.length-1,y=!0;y;){if(n=this.keyframes[u],s=this.keyframes[u+1],u===m-1&&t>=s.t-a){n.h&&(n=s),d=0;break}if(s.t-a>t){d=u;break}u<m-1?u+=1:(d=0,y=!1)}var g,v,x,b,k,_,E,w,S,A,P=s.t-a,C=n.t-a;if(n.to){n.bezierData||(n.bezierData=bez.buildBezierData(n.s,s.s||n.e,n.to,n.ti));var D=n.bezierData;if(t>=P||t<C){var T=t>=P?D.points.length-1:0;for(h=D.points[T].point.length,o=0;o<h;o+=1)r[o]=D.points[T].point[o]}else{n.__fnct?f=n.__fnct:(f=BezierFactory.getBezierEasing(n.o.x,n.o.y,n.i.x,n.i.y,n.n).get,n.__fnct=f),l=f((t-C)/(P-C));var F,M=D.segmentLength*l,I=e.lastFrame<t&&e._lastKeyframeIndex===u?e._lastAddedLength:0;for(c=e.lastFrame<t&&e._lastKeyframeIndex===u?e._lastPoint:0,y=!0,p=D.points.length;y;){if(I+=D.points[c].partialLength,0===M||0===l||c===D.points.length-1){for(h=D.points[c].point.length,o=0;o<h;o+=1)r[o]=D.points[c].point[o];break}if(M>=I&&M<I+D.points[c+1].partialLength){for(F=(M-I)/D.points[c+1].partialLength,h=D.points[c].point.length,o=0;o<h;o+=1)r[o]=D.points[c].point[o]+(D.points[c+1].point[o]-D.points[c].point[o])*F;break}c<p-1?c+=1:y=!1}e._lastPoint=c,e._lastAddedLength=I-D.points[c].partialLength,e._lastKeyframeIndex=u}}else{var B,V,R,L,G;if(m=n.s.length,g=s.s||n.e,this.sh&&1!==n.h)if(t>=P)r[0]=g[0],r[1]=g[1],r[2]=g[2];else if(t<=C)r[0]=n.s[0],r[1]=n.s[1],r[2]=n.s[2];else{v=r,b=(x=function(t,e,r){var i,a,n,s,o,h=[],l=t[0],p=t[1],c=t[2],f=t[3],d=e[0],u=e[1],m=e[2],y=e[3];return(a=l*d+p*u+c*m+f*y)<0&&(a=-a,d=-d,u=-u,m=-m,y=-y),1-a>1e-6?(i=Math.acos(a),n=Math.sin(i),s=Math.sin((1-r)*i)/n,o=Math.sin(r*i)/n):(s=1-r,o=r),h[0]=s*l+o*d,h[1]=s*p+o*u,h[2]=s*c+o*m,h[3]=s*f+o*y,h}(i(n.s),i(g),(t-C)/(P-C)))[0],k=x[1],_=x[2],E=x[3],w=Math.atan2(2*k*E-2*b*_,1-2*k*k-2*_*_),S=Math.asin(2*b*k+2*_*E),A=Math.atan2(2*b*E-2*k*_,1-2*b*b-2*_*_),v[0]=w/degToRads,v[1]=S/degToRads,v[2]=A/degToRads}else for(u=0;u<m;u+=1)1!==n.h&&(t>=P?l=1:t<C?l=0:(n.o.x.constructor===Array?(n.__fnct||(n.__fnct=[]),n.__fnct[u]?f=n.__fnct[u]:(B=void 0===n.o.x[u]?n.o.x[0]:n.o.x[u],V=void 0===n.o.y[u]?n.o.y[0]:n.o.y[u],R=void 0===n.i.x[u]?n.i.x[0]:n.i.x[u],L=void 0===n.i.y[u]?n.i.y[0]:n.i.y[u],f=BezierFactory.getBezierEasing(B,V,R,L).get,n.__fnct[u]=f)):n.__fnct?f=n.__fnct:(B=n.o.x,V=n.o.y,R=n.i.x,L=n.i.y,f=BezierFactory.getBezierEasing(B,V,R,L).get,n.__fnct=f),l=f((t-C)/(P-C)))),g=s.s||n.e,G=1===n.h?n.s[u]:n.s[u]+(g[u]-n.s[u])*l,"multidimensional"===this.propType?r[u]=G:r=G}return e.lastIndex=d,r}function i(t){var e=t[0]*degToRads,r=t[1]*degToRads,i=t[2]*degToRads,a=Math.cos(e/2),n=Math.cos(r/2),s=Math.cos(i/2),o=Math.sin(e/2),h=Math.sin(r/2),l=Math.sin(i/2);return[o*h*s+a*n*l,o*n*s+a*h*l,a*h*s-o*n*l,a*n*s-o*h*l]}function a(){var e=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,i=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(e===this._caching.lastFrame||this._caching.lastFrame!==t&&(this._caching.lastFrame>=i&&e>=i||this._caching.lastFrame<r&&e<r))){this._caching.lastFrame>=e&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var a=this.interpolateValue(e,this._caching);this.pv=a}return this._caching.lastFrame=e,this.pv}function n(t){var r;if("unidimensional"===this.propType)r=t*this.mult,e(this.v-r)>1e-5&&(this.v=r,this._mdf=!0);else for(var i=0,a=this.v.length;i<a;)r=t[i]*this.mult,e(this.v[i]-r)>1e-5&&(this.v[i]=r,this._mdf=!0),i+=1}function s(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t;this.lock=!0,this._mdf=this._isFirstFrame;var e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function o(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function h(t,e,r,i){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=s,this.setVValue=n,this.addEffect=o}function l(t,e,r,i){var a;this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var h=e.k.length;for(this.v=createTypedArray("float32",h),this.pv=createTypedArray("float32",h),this.vel=createTypedArray("float32",h),a=0;a<h;a+=1)this.v[a]=e.k[a]*this.mult,this.pv[a]=e.k[a];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=s,this.setVValue=n,this.addEffect=o}function p(e,i,h,l){this.propType="unidimensional",this.keyframes=i.k,this.offsetTime=e.data.st,this.frameId=-1,this._caching={lastFrame:t,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=i,this.mult=h||1,this.elem=e,this.container=l,this.comp=e.comp,this.v=t,this.pv=t,this._isFirstFrame=!0,this.getValue=s,this.setVValue=n,this.interpolateValue=r,this.effectsSequence=[a.bind(this)],this.addEffect=o}function c(e,i,h,l){var p;this.propType="multidimensional";var c,f,d,u,m=i.k.length;for(p=0;p<m-1;p+=1)i.k[p].to&&i.k[p].s&&i.k[p+1]&&i.k[p+1].s&&(c=i.k[p].s,f=i.k[p+1].s,d=i.k[p].to,u=i.k[p].ti,(2===c.length&&(c[0]!==f[0]||c[1]!==f[1])&&bez.pointOnLine2D(c[0],c[1],f[0],f[1],c[0]+d[0],c[1]+d[1])&&bez.pointOnLine2D(c[0],c[1],f[0],f[1],f[0]+u[0],f[1]+u[1])||3===c.length&&(c[0]!==f[0]||c[1]!==f[1]||c[2]!==f[2])&&bez.pointOnLine3D(c[0],c[1],c[2],f[0],f[1],f[2],c[0]+d[0],c[1]+d[1],c[2]+d[2])&&bez.pointOnLine3D(c[0],c[1],c[2],f[0],f[1],f[2],f[0]+u[0],f[1]+u[1],f[2]+u[2]))&&(i.k[p].to=null,i.k[p].ti=null),c[0]===f[0]&&c[1]===f[1]&&0===d[0]&&0===d[1]&&0===u[0]&&0===u[1]&&(2===c.length||c[2]===f[2]&&0===d[2]&&0===u[2])&&(i.k[p].to=null,i.k[p].ti=null));this.effectsSequence=[a.bind(this)],this.data=i,this.keyframes=i.k,this.offsetTime=e.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=h||1,this.elem=e,this.container=l,this.comp=e.comp,this.getValue=s,this.setVValue=n,this.interpolateValue=r,this.frameId=-1;var y=i.k[0].s.length;for(this.v=createTypedArray("float32",y),this.pv=createTypedArray("float32",y),p=0;p<y;p+=1)this.v[p]=t,this.pv[p]=t;this._caching={lastFrame:t,lastIndex:0,value:createTypedArray("float32",y)},this.addEffect=o}return{getProp:function(t,e,r,i,a){var n;if(e.k.length)if("number"==typeof e.k[0])n=new l(t,e,i,a);else switch(r){case 0:n=new p(t,e,i,a);break;case 1:n=new c(t,e,i,a)}else n=new h(t,e,i,a);return n.effectsSequence.length&&a.addDynamicProperty(n),n}}}(),TransformPropertyFactory=function(){var t=[0,0];function e(t,e,r){if(this.elem=t,this.frameId=-1,this.propType="transform",this.data=e,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(r||t),e.p&&e.p.s?(this.px=PropertyFactory.getProp(t,e.p.x,0,0,this),this.py=PropertyFactory.getProp(t,e.p.y,0,0,this),e.p.z&&(this.pz=PropertyFactory.getProp(t,e.p.z,0,0,this))):this.p=PropertyFactory.getProp(t,e.p||{k:[0,0,0]},1,0,this),e.rx){if(this.rx=PropertyFactory.getProp(t,e.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(t,e.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(t,e.rz,0,degToRads,this),e.or.k[0].ti){var i,a=e.or.k.length;for(i=0;i<a;i+=1)e.or.k[i].to=null,e.or.k[i].ti=null}this.or=PropertyFactory.getProp(t,e.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(t,e.r||{k:0},0,degToRads,this);e.sk&&(this.sk=PropertyFactory.getProp(t,e.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(t,e.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(t,e.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(t,e.s||{k:[100,100,100]},1,.01,this),e.o?this.o=PropertyFactory.getProp(t,e.o,0,.01,t):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}return e.prototype={applyToMatrix:function(t){var e=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||e,this.a&&t.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&t.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&t.skewFromAxis(-this.sk.v,this.sa.v),this.r?t.rotate(-this.r.v):t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?t.translate(this.px.v,this.py.v,-this.pz.v):t.translate(this.px.v,this.py.v,0):t.translate(this.p.v[0],this.p.v[1],-this.p.v[2])},getValue:function(e){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||e){var r;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var i,a;if(r=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(i=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/r,0),a=this.p.getValueAtTime(this.p.keyframes[0].t/r,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(i=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/r,0),a=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/r,0)):(i=this.p.pv,a=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/r,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){i=[],a=[];var n=this.px,s=this.py;n._caching.lastFrame+n.offsetTime<=n.keyframes[0].t?(i[0]=n.getValueAtTime((n.keyframes[0].t+.01)/r,0),i[1]=s.getValueAtTime((s.keyframes[0].t+.01)/r,0),a[0]=n.getValueAtTime(n.keyframes[0].t/r,0),a[1]=s.getValueAtTime(s.keyframes[0].t/r,0)):n._caching.lastFrame+n.offsetTime>=n.keyframes[n.keyframes.length-1].t?(i[0]=n.getValueAtTime(n.keyframes[n.keyframes.length-1].t/r,0),i[1]=s.getValueAtTime(s.keyframes[s.keyframes.length-1].t/r,0),a[0]=n.getValueAtTime((n.keyframes[n.keyframes.length-1].t-.01)/r,0),a[1]=s.getValueAtTime((s.keyframes[s.keyframes.length-1].t-.01)/r,0)):(i=[n.pv,s.pv],a[0]=n.getValueAtTime((n._caching.lastFrame+n.offsetTime-.01)/r,n.offsetTime),a[1]=s.getValueAtTime((s._caching.lastFrame+s.offsetTime-.01)/r,s.offsetTime))}else i=a=t;this.v.rotate(-Math.atan2(i[1]-a[1],i[0]-a[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}},precalculateMatrix:function(){if(!this.a.k&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}},autoOrient:function(){}},extendPrototype([DynamicPropertyContainer],e),e.prototype.addDynamicProperty=function(t){this._addDynamicProperty(t),this.elem.addDynamicProperty(t),this._isDirty=!0},e.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:function(t,r,i){return new e(t,r,i)}}}();function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,i,a){var n;switch(this._length=Math.max(this._length,i+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":n=this.v;break;case"i":n=this.i;break;case"o":n=this.o;break;default:n=[]}(!n[i]||n[i]&&!a)&&(n[i]=pointPool.newElement()),n[i][0]=t,n[i][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,i,a,n,s,o){this.setXYAt(t,e,"v",s,o),this.setXYAt(r,i,"o",s,o),this.setXYAt(a,n,"i",s,o)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,i=this.i,a=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],i[0][0],i[0][1],r[0][0],r[0][1],0,!1),a=1);var n,s=this._length-1,o=this._length;for(n=a;n<o;n+=1)t.setTripleAt(e[s][0],e[s][1],i[s][0],i[s][1],r[s][0],r[s][1],n,!1),s-=1;return t};var ShapePropertyFactory=function(){var t=-999999;function e(t,e,r){var i,a,n,s,o,h,l,p,c,f=r.lastIndex,d=this.keyframes;if(t<d[0].t-this.offsetTime)i=d[0].s[0],n=!0,f=0;else if(t>=d[d.length-1].t-this.offsetTime)i=d[d.length-1].s?d[d.length-1].s[0]:d[d.length-2].e[0],n=!0;else{for(var u,m,y=f,g=d.length-1,v=!0;v&&(u=d[y],!((m=d[y+1]).t-this.offsetTime>t));)y<g-1?y+=1:v=!1;if(f=y,!(n=1===u.h)){if(t>=m.t-this.offsetTime)p=1;else if(t<u.t-this.offsetTime)p=0;else{var x;u.__fnct?x=u.__fnct:(x=BezierFactory.getBezierEasing(u.o.x,u.o.y,u.i.x,u.i.y).get,u.__fnct=x),p=x((t-(u.t-this.offsetTime))/(m.t-this.offsetTime-(u.t-this.offsetTime)))}a=m.s?m.s[0]:u.e[0]}i=u.s[0]}for(h=e._length,l=i.i[0].length,r.lastIndex=f,s=0;s<h;s+=1)for(o=0;o<l;o+=1)c=n?i.i[s][o]:i.i[s][o]+(a.i[s][o]-i.i[s][o])*p,e.i[s][o]=c,c=n?i.o[s][o]:i.o[s][o]+(a.o[s][o]-i.o[s][o])*p,e.o[s][o]=c,c=n?i.v[s][o]:i.v[s][o]+(a.v[s][o]-i.v[s][o])*p,e.v[s][o]=c}function r(){var e=this.comp.renderedFrame-this.offsetTime,r=this.keyframes[0].t-this.offsetTime,i=this.keyframes[this.keyframes.length-1].t-this.offsetTime,a=this._caching.lastFrame;return a!==t&&(a<r&&e<r||a>i&&e>i)||(this._caching.lastIndex=a<e?this._caching.lastIndex:0,this.interpolateShape(e,this.pv,this._caching)),this._caching.lastFrame=e,this.pv}function i(){this.paths=this.localShapeCollection}function a(t){(function(t,e){if(t._length!==e._length||t.c!==e.c)return!1;var r,i=t._length;for(r=0;r<i;r+=1)if(t.v[r][0]!==e.v[r][0]||t.v[r][1]!==e.v[r][1]||t.o[r][0]!==e.o[r][0]||t.o[r][1]!==e.o[r][1]||t.i[r][0]!==e.i[r][0]||t.i[r][1]!==e.i[r][1])return!1;return!0})(this.v,t)||(this.v=shapePool.clone(t),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function n(){if(this.elem.globalData.frameId!==this.frameId)if(this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var t,e;this.lock=!0,this._mdf=!1,t=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k;var r=this.effectsSequence.length;for(e=0;e<r;e+=1)t=this.effectsSequence[e](t);this.setVValue(t),this.lock=!1,this.frameId=this.elem.globalData.frameId}else this._mdf=!1}function s(t,e,r){this.propType="shape",this.comp=t.comp,this.container=t,this.elem=t,this.data=e,this.k=!1,this.kf=!1,this._mdf=!1;var a=3===r?e.pt.k:e.ks.k;this.v=shapePool.clone(a),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=i,this.effectsSequence=[]}function o(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function h(e,a,n){this.propType="shape",this.comp=e.comp,this.elem=e,this.container=e,this.offsetTime=e.data.st,this.keyframes=3===n?a.pt.k:a.ks.k,this.k=!0,this.kf=!0;var s=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,s),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=i,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}s.prototype.interpolateShape=e,s.prototype.getValue=n,s.prototype.setVValue=a,s.prototype.addEffect=o,h.prototype.getValue=n,h.prototype.interpolateShape=e,h.prototype.setVValue=a,h.prototype.addEffect=o;var l=function(){var t=roundCorner;function e(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=e.d,this.elem=t,this.comp=t.comp,this.frameId=-1,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return e.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var e=this.p.v[0],r=this.p.v[1],i=this.s.v[0]/2,a=this.s.v[1]/2,n=3!==this.d,s=this.v;s.v[0][0]=e,s.v[0][1]=r-a,s.v[1][0]=n?e+i:e-i,s.v[1][1]=r,s.v[2][0]=e,s.v[2][1]=r+a,s.v[3][0]=n?e-i:e+i,s.v[3][1]=r,s.i[0][0]=n?e-i*t:e+i*t,s.i[0][1]=r-a,s.i[1][0]=n?e+i:e-i,s.i[1][1]=r-a*t,s.i[2][0]=n?e+i*t:e-i*t,s.i[2][1]=r+a,s.i[3][0]=n?e-i:e+i,s.i[3][1]=r+a*t,s.o[0][0]=n?e+i*t:e-i*t,s.o[0][1]=r-a,s.o[1][0]=n?e+i:e-i,s.o[1][1]=r+a*t,s.o[2][0]=n?e-i*t:e+i*t,s.o[2][1]=r+a,s.o[3][0]=n?e-i:e+i,s.o[3][1]=r-a*t}},extendPrototype([DynamicPropertyContainer],e),e}(),p=function(){function t(t,e){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=t,this.comp=t.comp,this.data=e,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),1===e.sy?(this.ir=PropertyFactory.getProp(t,e.ir,0,0,this),this.is=PropertyFactory.getProp(t,e.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(t,e.pt,0,0,this),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,degToRads,this),this.or=PropertyFactory.getProp(t,e.or,0,0,this),this.os=PropertyFactory.getProp(t,e.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return t.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var t,e,r,i,a=2*Math.floor(this.pt.v),n=2*Math.PI/a,s=!0,o=this.or.v,h=this.ir.v,l=this.os.v,p=this.is.v,c=2*Math.PI*o/(2*a),f=2*Math.PI*h/(2*a),d=-Math.PI/2;d+=this.r.v;var u=3===this.data.d?-1:1;for(this.v._length=0,t=0;t<a;t+=1){r=s?l:p,i=s?c:f;var m=(e=s?o:h)*Math.cos(d),y=e*Math.sin(d),g=0===m&&0===y?0:y/Math.sqrt(m*m+y*y),v=0===m&&0===y?0:-m/Math.sqrt(m*m+y*y);m+=+this.p.v[0],y+=+this.p.v[1],this.v.setTripleAt(m,y,m-g*i*r*u,y-v*i*r*u,m+g*i*r*u,y+v*i*r*u,t,!0),s=!s,d+=n*u}},convertPolygonToPath:function(){var t,e=Math.floor(this.pt.v),r=2*Math.PI/e,i=this.or.v,a=this.os.v,n=2*Math.PI*i/(4*e),s=.5*-Math.PI,o=3===this.data.d?-1:1;for(s+=this.r.v,this.v._length=0,t=0;t<e;t+=1){var h=i*Math.cos(s),l=i*Math.sin(s),p=0===h&&0===l?0:l/Math.sqrt(h*h+l*l),c=0===h&&0===l?0:-h/Math.sqrt(h*h+l*l);h+=+this.p.v[0],l+=+this.p.v[1],this.v.setTripleAt(h,l,h-p*n*a*o,l-c*n*a*o,h+p*n*a*o,l+c*n*a*o,t,!0),s+=r*o}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],t),t}(),c=function(){function t(t,e){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=t,this.comp=t.comp,this.frameId=-1,this.d=e.d,this.initDynamicPropertyContainer(t),this.p=PropertyFactory.getProp(t,e.p,1,0,this),this.s=PropertyFactory.getProp(t,e.s,1,0,this),this.r=PropertyFactory.getProp(t,e.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return t.prototype={convertRectToPath:function(){var t=this.p.v[0],e=this.p.v[1],r=this.s.v[0]/2,i=this.s.v[1]/2,a=bmMin(r,i,this.r.v),n=a*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(t+r,e-i+a,t+r,e-i+a,t+r,e-i+n,0,!0),this.v.setTripleAt(t+r,e+i-a,t+r,e+i-n,t+r,e+i-a,1,!0),0!==a?(this.v.setTripleAt(t+r-a,e+i,t+r-a,e+i,t+r-n,e+i,2,!0),this.v.setTripleAt(t-r+a,e+i,t-r+n,e+i,t-r+a,e+i,3,!0),this.v.setTripleAt(t-r,e+i-a,t-r,e+i-a,t-r,e+i-n,4,!0),this.v.setTripleAt(t-r,e-i+a,t-r,e-i+n,t-r,e-i+a,5,!0),this.v.setTripleAt(t-r+a,e-i,t-r+a,e-i,t-r+n,e-i,6,!0),this.v.setTripleAt(t+r-a,e-i,t+r-n,e-i,t+r-a,e-i,7,!0)):(this.v.setTripleAt(t-r,e+i,t-r+n,e+i,t-r,e+i,2),this.v.setTripleAt(t-r,e-i,t-r,e-i+n,t-r,e-i,3))):(this.v.setTripleAt(t+r,e-i+a,t+r,e-i+n,t+r,e-i+a,0,!0),0!==a?(this.v.setTripleAt(t+r-a,e-i,t+r-a,e-i,t+r-n,e-i,1,!0),this.v.setTripleAt(t-r+a,e-i,t-r+n,e-i,t-r+a,e-i,2,!0),this.v.setTripleAt(t-r,e-i+a,t-r,e-i+a,t-r,e-i+n,3,!0),this.v.setTripleAt(t-r,e+i-a,t-r,e+i-n,t-r,e+i-a,4,!0),this.v.setTripleAt(t-r+a,e+i,t-r+a,e+i,t-r+n,e+i,5,!0),this.v.setTripleAt(t+r-a,e+i,t+r-n,e+i,t+r-a,e+i,6,!0),this.v.setTripleAt(t+r,e+i-a,t+r,e+i-a,t+r,e+i-n,7,!0)):(this.v.setTripleAt(t-r,e-i,t-r+n,e-i,t-r,e-i,1,!0),this.v.setTripleAt(t-r,e+i,t-r,e+i-n,t-r,e+i,2,!0),this.v.setTripleAt(t+r,e+i,t+r-n,e+i,t+r,e+i,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:i},extendPrototype([DynamicPropertyContainer],t),t}();return{getShapeProp:function(t,e,r){var i;return 3===r||4===r?i=(3===r?e.pt:e.ks).k.length?new h(t,e,r):new s(t,e,r):5===r?i=new c(t,e):6===r?i=new l(t,e):7===r&&(i=new p(t,e)),i.k&&t.addDynamicProperty(i),i},getConstructorFunction:function(){return s},getKeyframedConstructorFunction:function(){return h}}}(),ShapeModifiers=(ob={},modifiers={},ob.registerModifier=function(t,e){modifiers[t]||(modifiers[t]=e)},ob.getModifier=function(t,e,r){return new modifiers[t](e,r)},ob),ob,modifiers;function ShapeModifier(){}function TrimModifier(){}function RoundCornersModifier(){}function PuckerAndBloatModifier(){}function RepeaterModifier(){}function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}function DashProperty(t,e,r,i){var a;this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(i);var n,s=e.length||0;for(a=0;a<s;a+=1)n=PropertyFactory.getProp(t,e[a].v,0,0,this),this.k=n.k||this.k,this.dataProps[a]={n:e[a].n,p:n};this.k||this.getValue(!0),this._isAnimated=this.k}function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",4*e.p);var i=e.k.k[0].s?e.k.k[0].s.length-4*e.p:e.k.k.length-4*e.p;this.o=createTypedArray("float32",i),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=i,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,i,a){var n=[];e<=1?n.push({s:t,e}):t>=1?n.push({s:t-1,e:e-1}):(n.push({s:t,e:1}),n.push({s:0,e:e-1}));var s,o,h=[],l=n.length;for(s=0;s<l;s+=1){var p,c;(o=n[s]).e*a<i||o.s*a>i+r||(p=o.s*a<=i?0:(o.s*a-i)/r,c=o.e*a>=i+r?1:(o.e*a-i)/r,h.push([p,c]))}return h.length||h.push([0,0]),h},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r,i,a;if(this._mdf||t){var n=this.o.v%360/360;if(n<0&&(n+=1),(e=this.s.v>1?1+n:this.s.v<0?0+n:this.s.v+n)>(r=this.e.v>1?1+n:this.e.v<0?0+n:this.e.v+n)){var s=e;e=r,r=s}e=1e-4*Math.round(1e4*e),r=1e-4*Math.round(1e4*r),this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var o,h,l,p,c,f=this.shapes.length,d=0;if(r===e)for(a=0;a<f;a+=1)this.shapes[a].localShapeCollection.releaseShapes(),this.shapes[a].shape._mdf=!0,this.shapes[a].shape.paths=this.shapes[a].localShapeCollection,this._mdf&&(this.shapes[a].pathsData.length=0);else if(1===r&&0===e||0===r&&1===e){if(this._mdf)for(a=0;a<f;a+=1)this.shapes[a].pathsData.length=0,this.shapes[a].shape._mdf=!0}else{var u,m,y=[];for(a=0;a<f;a+=1)if((u=this.shapes[a]).shape._mdf||this._mdf||t||2===this.m){if(h=(i=u.shape.paths)._length,c=0,!u.shape._mdf&&u.pathsData.length)c=u.totalShapeLength;else{for(l=this.releasePathsData(u.pathsData),o=0;o<h;o+=1)p=bez.getSegmentsLength(i.shapes[o]),l.push(p),c+=p.totalLength;u.totalShapeLength=c,u.pathsData=l}d+=c,u.shape._mdf=!0}else u.shape.paths=u.localShapeCollection;var g,v=e,x=r,b=0;for(a=f-1;a>=0;a-=1)if((u=this.shapes[a]).shape._mdf){for((m=u.localShapeCollection).releaseShapes(),2===this.m&&f>1?(g=this.calculateShapeEdges(e,r,u.totalShapeLength,b,d),b+=u.totalShapeLength):g=[[v,x]],h=g.length,o=0;o<h;o+=1){v=g[o][0],x=g[o][1],y.length=0,x<=1?y.push({s:u.totalShapeLength*v,e:u.totalShapeLength*x}):v>=1?y.push({s:u.totalShapeLength*(v-1),e:u.totalShapeLength*(x-1)}):(y.push({s:u.totalShapeLength*v,e:u.totalShapeLength}),y.push({s:0,e:u.totalShapeLength*(x-1)}));var k=this.addShapes(u,y[0]);if(y[0].s!==y[0].e){if(y.length>1)if(u.shape.paths.shapes[u.shape.paths._length-1].c){var _=k.pop();this.addPaths(k,m),k=this.addShapes(u,y[1],_)}else this.addPaths(k,m),k=this.addShapes(u,y[1]);this.addPaths(k,m)}}u.shape.paths=m}}},TrimModifier.prototype.addPaths=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,i,a,n,s){a.setXYAt(e[0],e[1],"o",n),a.setXYAt(r[0],r[1],"i",n+1),s&&a.setXYAt(t[0],t[1],"v",n),a.setXYAt(i[0],i[1],"v",n+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,i){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),i&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var i,a,n,s,o,h,l,p,c=t.pathsData,f=t.shape.paths.shapes,d=t.shape.paths._length,u=0,m=[],y=!0;for(r?(o=r._length,p=r._length):(r=shapePool.newElement(),o=0,p=0),m.push(r),i=0;i<d;i+=1){for(h=c[i].lengths,r.c=f[i].c,n=f[i].c?h.length:h.length+1,a=1;a<n;a+=1)if(u+(s=h[a-1]).addedLength<e.s)u+=s.addedLength,r.c=!1;else{if(u>e.e){r.c=!1;break}e.s<=u&&e.e>=u+s.addedLength?(this.addSegment(f[i].v[a-1],f[i].o[a-1],f[i].i[a],f[i].v[a],r,o,y),y=!1):(l=bez.getNewSegment(f[i].v[a-1],f[i].v[a],f[i].o[a-1],f[i].i[a],(e.s-u)/s.addedLength,(e.e-u)/s.addedLength,h[a-1]),this.addSegmentFromArray(l,r,o,y),y=!1,r.c=!1),u+=s.addedLength,o+=1}if(f[i].c&&h.length){if(s=h[a-1],u<=e.e){var g=h[a-1].addedLength;e.s<=u&&e.e>=u+g?(this.addSegment(f[i].v[a-1],f[i].o[a-1],f[i].i[0],f[i].v[0],r,o,y),y=!1):(l=bez.getNewSegment(f[i].v[a-1],f[i].v[0],f[i].o[a-1],f[i].i[0],(e.s-u)/g,(e.e-u)/g,h[a-1]),this.addSegmentFromArray(l,r,o,y),y=!1,r.c=!1)}else r.c=!1;u+=s.addedLength,o+=1}if(r._length&&(r.setXYAt(r.v[p][0],r.v[p][1],"i",p),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),u>e.e)break;i<d-1&&(r=shapePool.newElement(),y=!0,m.push(r),o=0)}return m},ShapeModifiers.registerModifier("tm",TrimModifier),extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r,i=shapePool.newElement();i.c=t.c;var a,n,s,o,h,l,p,c,f,d,u,m,y=t._length,g=0;for(r=0;r<y;r+=1)a=t.v[r],s=t.o[r],n=t.i[r],a[0]===s[0]&&a[1]===s[1]&&a[0]===n[0]&&a[1]===n[1]?0!==r&&r!==y-1||t.c?(o=0===r?t.v[y-1]:t.v[r-1],l=(h=Math.sqrt(Math.pow(a[0]-o[0],2)+Math.pow(a[1]-o[1],2)))?Math.min(h/2,e)/h:0,p=u=a[0]+(o[0]-a[0])*l,c=m=a[1]-(a[1]-o[1])*l,f=p-(p-a[0])*roundCorner,d=c-(c-a[1])*roundCorner,i.setTripleAt(p,c,f,d,u,m,g),g+=1,o=r===y-1?t.v[0]:t.v[r+1],l=(h=Math.sqrt(Math.pow(a[0]-o[0],2)+Math.pow(a[1]-o[1],2)))?Math.min(h/2,e)/h:0,p=f=a[0]+(o[0]-a[0])*l,c=d=a[1]+(o[1]-a[1])*l,u=p-(p-a[0])*roundCorner,m=c-(c-a[1])*roundCorner,i.setTripleAt(p,c,f,d,u,m,g),g+=1):(i.setTripleAt(a[0],a[1],s[0],s[1],n[0],n[1],g),g+=1):(i.setTripleAt(t.v[r][0],t.v[r][1],t.o[r][0],t.o[r][1],t.i[r][0],t.i[r][1],g),g+=1);return i},RoundCornersModifier.prototype.processShapes=function(t){var e,r,i,a,n,s,o=this.shapes.length,h=this.rd.v;if(0!==h)for(r=0;r<o;r+=1){if(s=(n=this.shapes[r]).localShapeCollection,n.shape._mdf||this._mdf||t)for(s.releaseShapes(),n.shape._mdf=!0,e=n.shape.paths.shapes,a=n.shape.paths._length,i=0;i<a;i+=1)s.addShape(this.processPath(e[i],h));n.shape.paths=n.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},ShapeModifiers.registerModifier("rd",RoundCornersModifier),extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,i=[0,0],a=t._length,n=0;for(n=0;n<a;n+=1)i[0]+=t.v[n][0],i[1]+=t.v[n][1];i[0]/=a,i[1]/=a;var s,o,h,l,p,c,f=shapePool.newElement();for(f.c=t.c,n=0;n<a;n+=1)s=t.v[n][0]+(i[0]-t.v[n][0])*r,o=t.v[n][1]+(i[1]-t.v[n][1])*r,h=t.o[n][0]+(i[0]-t.o[n][0])*-r,l=t.o[n][1]+(i[1]-t.o[n][1])*-r,p=t.i[n][0]+(i[0]-t.i[n][0])*-r,c=t.i[n][1]+(i[1]-t.i[n][1])*-r,f.setTripleAt(s,o,h,l,p,c,n);return f},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,i,a,n,s,o=this.shapes.length,h=this.amount.v;if(0!==h)for(r=0;r<o;r+=1){if(s=(n=this.shapes[r]).localShapeCollection,n.shape._mdf||this._mdf||t)for(s.releaseShapes(),n.shape._mdf=!0,e=n.shape.paths.shapes,a=n.shape.paths._length,i=0;i<a;i+=1)s.addShape(this.processPath(e[i],h));n.shape.paths=n.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)},ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,i,a,n){var s=n?-1:1,o=i.s.v[0]+(1-i.s.v[0])*(1-a),h=i.s.v[1]+(1-i.s.v[1])*(1-a);t.translate(i.p.v[0]*s*a,i.p.v[1]*s*a,i.p.v[2]),e.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),e.rotate(-i.r.v*s*a),e.translate(i.a.v[0],i.a.v[1],i.a.v[2]),r.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),r.scale(n?1/o:o,n?1/h:h),r.translate(i.a.v[0],i.a.v[1],i.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,i){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=i,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,"gr"===t[e].ty&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]._render=e,"gr"===t[r].ty&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,i,a,n,s=!1;if(this._mdf||t){var o,h=Math.ceil(this.c.v);if(this._groups.length<h){for(;this._groups.length<h;){var l={it:this.cloneElements(this._elements),ty:"gr"};l.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,l),this._groups.splice(0,0,l),this._currentCopies+=1}this.elem.reloadShapes(),s=!0}for(n=0,i=0;i<=this._groups.length-1;i+=1){if(o=n<h,this._groups[i]._render=o,this.changeGroupRender(this._groups[i].it,o),!o){var p=this.elemsData[i].it,c=p[p.length-1];0!==c.transform.op.v?(c.transform.op._mdf=!0,c.transform.op.v=0):c.transform.op._mdf=!1}n+=1}this._currentCopies=h;var f=this.o.v,d=f%1,u=f>0?Math.floor(f):Math.ceil(f),m=this.pMatrix.props,y=this.rMatrix.props,g=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var v,x,b=0;if(f>0){for(;b<u;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),b+=1;d&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,d,!1),b+=d)}else if(f<0){for(;b>u;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),b-=1;d&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-d,!0),b-=d)}for(i=1===this.data.m?0:this._currentCopies-1,a=1===this.data.m?1:-1,n=this._currentCopies;n;){if(x=(r=(e=this.elemsData[i].it)[e.length-1].transform.mProps.v.props).length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=1===this._currentCopies?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1)),0!==b){for((0!==i&&1===a||i!==this._currentCopies-1&&-1===a)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(g[0],g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8],g[9],g[10],g[11],g[12],g[13],g[14],g[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),v=0;v<x;v+=1)r[v]=this.matrix.props[v];this.matrix.reset()}else for(this.matrix.reset(),v=0;v<x;v+=1)r[v]=this.matrix.props[v];b+=1,n-=1,i+=a}}else for(n=this._currentCopies,i=0,a=1;n;)r=(e=this.elemsData[i].it)[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,n-=1,i+=a;return s},RepeaterModifier.prototype.addShape=function(){},ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0},DashProperty.prototype.getValue=function(t){if((this.elem.globalData.frameId!==this.frameId||t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),e=0;e<r;e+=1)"o"!==this.dataProps[e].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,i=this.o.length/2;r<i;){if(Math.abs(t[4*r]-t[4*e+2*r])>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r,i,a=4*this.data.p;for(e=0;e<a;e+=1)r=e%4==0?100:255,i=Math.round(this.prop.v[e]*r),this.c[e]!==i&&(this.c[e]=i,this._cmdf=!t);if(this.o.length)for(a=this.prop.v.length,e=4*this.data.p;e<a;e+=1)r=e%2==0?100:1,i=e%2==0?Math.round(100*this.prop.v[e]):this.prop.v[e],this.o[e-4*this.data.p]!==i&&(this.o[e-4*this.data.p]=i,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty);var buildShapeString=function(t,e,r,i){if(0===e)return"";var a,n=t.o,s=t.i,o=t.v,h=" M"+i.applyToPointStringified(o[0][0],o[0][1]);for(a=1;a<e;a+=1)h+=" C"+i.applyToPointStringified(n[a-1][0],n[a-1][1])+" "+i.applyToPointStringified(s[a][0],s[a][1])+" "+i.applyToPointStringified(o[a][0],o[a][1]);return r&&e&&(h+=" C"+i.applyToPointStringified(n[a-1][0],n[a-1][1])+" "+i.applyToPointStringified(s[0][0],s[0][1])+" "+i.applyToPointStringified(o[0][0],o[0][1]),h+="z"),h},audioControllerFactory=function(){function t(t){this.audios=[],this.audioFactory=t,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(t){this.audios.push(t)},pause:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].pause()},resume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].resume()},setRate:function(t){var e,r=this.audios.length;for(e=0;e<r;e+=1)this.audios[e].setRate(t)},createAudio:function(t){return this.audioFactory?this.audioFactory(t):Howl?new Howl({src:[t]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(t){this.audioFactory=t},setVolume:function(t){this._volume=t,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var t,e=this.audios.length;for(t=0;t<e;t+=1)this.audios[t].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),ImagePreloader=function(){var t=function(){var t=createTag("canvas");t.width=1,t.height=1;var e=t.getContext("2d");return e.fillStyle="rgba(0,0,0,0)",e.fillRect(0,0,1,1),t}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function i(t,e,r){var i="";if(t.e)i=t.p;else if(e){var a=t.p;-1!==a.indexOf("images/")&&(a=a.split("/")[1]),i=e+a}else i=r,i+=t.u?t.u:"",i+=t.p;return i}function a(t){var e=0,r=setInterval(function(){(t.getBBox().width||e>500)&&(this._imageLoaded(),clearInterval(r)),e+=1}.bind(this),50)}function n(t){var e={assetData:t},r=i(t,this.assetsPath,this.path);return assetLoader.load(r,function(t){e.img=t,this._footageLoaded()}.bind(this),function(){e.img={},this._footageLoaded()}.bind(this)),e}function s(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=a.bind(this),this.createFootageData=n.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return s.prototype={loadAssets:function(t,e){var r;this.imagesLoadedCb=e;var i=t.length;for(r=0;r<i;r+=1)t[r].layers||(t[r].t?3===t[r].t&&(this.totalFootages+=1,this.images.push(this.createFootageData(t[r]))):(this.totalImages+=1,this.images.push(this._createImageData(t[r]))))},setAssetsPath:function(t){this.assetsPath=t||""},setPath:function(t){this.path=t||""},loadedImages:function(){return this.totalImages===this.loadedAssets},loadedFootages:function(){return this.totalFootages===this.loadedFootagesCount},destroy:function(){this.imagesLoadedCb=null,this.images.length=0},getAsset:function(t){for(var e=0,r=this.images.length;e<r;){if(this.images[e].assetData===t)return this.images[e].img;e+=1}return null},createImgData:function(e){var r=i(e,this.assetsPath,this.path),a=createTag("img");a.crossOrigin="anonymous",a.addEventListener("load",this._imageLoaded,!1),a.addEventListener("error",function(){n.img=t,this._imageLoaded()}.bind(this),!1),a.src=r;var n={img:a,assetData:e};return n},createImageData:function(e){var r=i(e,this.assetsPath,this.path),a=createNS("image");isSafari?this.testImageLoaded(a):a.addEventListener("load",this._imageLoaded,!1),a.addEventListener("error",function(){n.img=t,this._imageLoaded()}.bind(this),!1),a.setAttributeNS("http://www.w3.org/1999/xlink","href",r),this._elementHelper.append?this._elementHelper.append(a):this._elementHelper.appendChild(a);var n={img:a,assetData:e};return n},imageLoaded:e,footageLoaded:r,setCacheType:function(t,e){"svg"===t?(this._elementHelper=e,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}},s}(),featureSupport=function(){var t={maskType:!0};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),t}(),filtersFactory={createFilter:function(t,e){var r=createNS("filter");return r.setAttribute("id",t),!0!==e&&(r.setAttribute("filterUnits","objectBoundingBox"),r.setAttribute("x","0%"),r.setAttribute("y","0%"),r.setAttribute("width","100%"),r.setAttribute("height","100%")),r},createAlphaToLuminanceFilter:function(){var t=createNS("feColorMatrix");return t.setAttribute("type","matrix"),t.setAttribute("color-interpolation-filters","sRGB"),t.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),t}},assetLoader=function(){function t(t){return t.response&&"object"==typeof t.response?t.response:t.response&&"string"==typeof t.response?JSON.parse(t.response):t.responseText?JSON.parse(t.responseText):null}return{load:function(e,r,i){var a,n=new XMLHttpRequest;try{n.responseType="json"}catch(t){}n.onreadystatechange=function(){if(4===n.readyState)if(200===n.status)a=t(n),r(a);else try{a=t(n),r(a)}catch(t){i&&i(t)}},n.open("GET",e,!0),n.send()}}}();function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}function TextAnimatorDataProperty(t,e,r){var i={propType:!1},a=PropertyFactory.getProp,n=e.a;this.a={r:n.r?a(t,n.r,0,degToRads,r):i,rx:n.rx?a(t,n.rx,0,degToRads,r):i,ry:n.ry?a(t,n.ry,0,degToRads,r):i,sk:n.sk?a(t,n.sk,0,degToRads,r):i,sa:n.sa?a(t,n.sa,0,degToRads,r):i,s:n.s?a(t,n.s,1,.01,r):i,a:n.a?a(t,n.a,1,0,r):i,o:n.o?a(t,n.o,0,.01,r):i,p:n.p?a(t,n.p,1,0,r):i,sw:n.sw?a(t,n.sw,0,0,r):i,sc:n.sc?a(t,n.sc,1,0,r):i,fc:n.fc?a(t,n.fc,1,0,r):i,fh:n.fh?a(t,n.fh,0,0,r):i,fs:n.fs?a(t,n.fs,0,.01,r):i,fb:n.fb?a(t,n.fb,0,.01,r):i,t:n.t?a(t,n.t,0,0,r):i},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function LetterProps(t,e,r,i,a,n){this.o=t,this.sw=e,this.sc=r,this.fc=i,this.m=a,this.p=n,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!i,m:!0,p:!0}}function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}TextAnimatorProperty.prototype.searchProperties=function(){var t,e,r=this._textData.a.length,i=PropertyFactory.getProp;for(t=0;t<r;t+=1)e=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,e,this);this._textData.p&&"m"in this._textData.p?(this._pathData={f:i(this._elem,this._textData.p.f,0,0,this),l:i(this._elem,this._textData.p.l,0,0,this),r:this._textData.p.r,m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=i(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,this._mdf||this._isFirstFrame||e||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var r,i,a,n,s,o,h,l,p,c,f,d,u,m,y,g,v,x,b,k=this._moreOptions.alignment.v,_=this._animatorsData,E=this._textData,w=this.mHelper,S=this._renderType,A=this.renderedLetters.length,P=t.l;if(this._hasMaskedPath){if(b=this._pathData.m,!this._pathData.n||this._pathData._mdf){var C,D=b.v;for(this._pathData.r&&(D=D.reverse()),s={tLength:0,segments:[]},n=D._length-1,g=0,a=0;a<n;a+=1)C=bez.buildBezierData(D.v[a],D.v[a+1],[D.o[a][0]-D.v[a][0],D.o[a][1]-D.v[a][1]],[D.i[a+1][0]-D.v[a+1][0],D.i[a+1][1]-D.v[a+1][1]]),s.tLength+=C.segmentLength,s.segments.push(C),g+=C.segmentLength;a=n,b.v.c&&(C=bez.buildBezierData(D.v[a],D.v[0],[D.o[a][0]-D.v[a][0],D.o[a][1]-D.v[a][1]],[D.i[0][0]-D.v[0][0],D.i[0][1]-D.v[0][1]]),s.tLength+=C.segmentLength,s.segments.push(C),g+=C.segmentLength),this._pathData.pi=s}if(s=this._pathData.pi,o=this._pathData.f.v,f=0,c=1,l=0,p=!0,m=s.segments,o<0&&b.v.c)for(s.tLength<Math.abs(o)&&(o=-Math.abs(o)%s.tLength),c=(u=m[f=m.length-1].points).length-1;o<0;)o+=u[c].partialLength,(c-=1)<0&&(c=(u=m[f-=1].points).length-1);d=(u=m[f].points)[c-1],y=(h=u[c]).partialLength}n=P.length,r=0,i=0;var T,F,M,I,B,V=1.2*t.finalSize*.714,R=!0;M=_.length;var L,G,z,O,N,H,j,q,W,U,Z,K,Y=-1,X=o,$=f,J=c,Q=-1,tt="",et=this.defaultPropsArray;if(2===t.j||1===t.j){var rt=0,it=0,at=2===t.j?-.5:-1,nt=0,st=!0;for(a=0;a<n;a+=1)if(P[a].n){for(rt&&(rt+=it);nt<a;)P[nt].animatorJustifyOffset=rt,nt+=1;rt=0,st=!0}else{for(F=0;F<M;F+=1)(T=_[F].a).t.propType&&(st&&2===t.j&&(it+=T.t.v*at),(B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars)).length?rt+=T.t.v*B[0]*at:rt+=T.t.v*B*at);st=!1}for(rt&&(rt+=it);nt<a;)P[nt].animatorJustifyOffset=rt,nt+=1}for(a=0;a<n;a+=1){if(w.reset(),O=1,P[a].n)r=0,i+=t.yOffset,i+=R?1:0,o=X,R=!1,this._hasMaskedPath&&(c=J,d=(u=m[f=$].points)[c-1],y=(h=u[c]).partialLength,l=0),tt="",Z="",W="",K="",et=this.defaultPropsArray;else{if(this._hasMaskedPath){if(Q!==P[a].line){switch(t.j){case 1:o+=g-t.lineWidths[P[a].line];break;case 2:o+=(g-t.lineWidths[P[a].line])/2}Q=P[a].line}Y!==P[a].ind&&(P[Y]&&(o+=P[Y].extra),o+=P[a].an/2,Y=P[a].ind),o+=k[0]*P[a].an*.005;var ot=0;for(F=0;F<M;F+=1)(T=_[F].a).p.propType&&((B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars)).length?ot+=T.p.v[0]*B[0]:ot+=T.p.v[0]*B),T.a.propType&&((B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars)).length?ot+=T.a.v[0]*B[0]:ot+=T.a.v[0]*B);for(p=!0;p;)l+y>=o+ot||!u?(v=(o+ot-l)/h.partialLength,G=d.point[0]+(h.point[0]-d.point[0])*v,z=d.point[1]+(h.point[1]-d.point[1])*v,w.translate(-k[0]*P[a].an*.005,-k[1]*V*.01),p=!1):u&&(l+=h.partialLength,(c+=1)>=u.length&&(c=0,m[f+=1]?u=m[f].points:b.v.c?(c=0,u=m[f=0].points):(l-=h.partialLength,u=null)),u&&(d=h,y=(h=u[c]).partialLength));L=P[a].an/2-P[a].add,w.translate(-L,0,0)}else L=P[a].an/2-P[a].add,w.translate(-L,0,0),w.translate(-k[0]*P[a].an*.005,-k[1]*V*.01,0);for(F=0;F<M;F+=1)(T=_[F].a).t.propType&&(B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars),0===r&&0===t.j||(this._hasMaskedPath?B.length?o+=T.t.v*B[0]:o+=T.t.v*B:B.length?r+=T.t.v*B[0]:r+=T.t.v*B));for(t.strokeWidthAnim&&(H=t.sw||0),t.strokeColorAnim&&(N=t.sc?[t.sc[0],t.sc[1],t.sc[2]]:[0,0,0]),t.fillColorAnim&&t.fc&&(j=[t.fc[0],t.fc[1],t.fc[2]]),F=0;F<M;F+=1)(T=_[F].a).a.propType&&((B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars)).length?w.translate(-T.a.v[0]*B[0],-T.a.v[1]*B[1],T.a.v[2]*B[2]):w.translate(-T.a.v[0]*B,-T.a.v[1]*B,T.a.v[2]*B));for(F=0;F<M;F+=1)(T=_[F].a).s.propType&&((B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars)).length?w.scale(1+(T.s.v[0]-1)*B[0],1+(T.s.v[1]-1)*B[1],1):w.scale(1+(T.s.v[0]-1)*B,1+(T.s.v[1]-1)*B,1));for(F=0;F<M;F+=1){if(T=_[F].a,B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars),T.sk.propType&&(B.length?w.skewFromAxis(-T.sk.v*B[0],T.sa.v*B[1]):w.skewFromAxis(-T.sk.v*B,T.sa.v*B)),T.r.propType&&(B.length?w.rotateZ(-T.r.v*B[2]):w.rotateZ(-T.r.v*B)),T.ry.propType&&(B.length?w.rotateY(T.ry.v*B[1]):w.rotateY(T.ry.v*B)),T.rx.propType&&(B.length?w.rotateX(T.rx.v*B[0]):w.rotateX(T.rx.v*B)),T.o.propType&&(B.length?O+=(T.o.v*B[0]-O)*B[0]:O+=(T.o.v*B-O)*B),t.strokeWidthAnim&&T.sw.propType&&(B.length?H+=T.sw.v*B[0]:H+=T.sw.v*B),t.strokeColorAnim&&T.sc.propType)for(q=0;q<3;q+=1)B.length?N[q]+=(T.sc.v[q]-N[q])*B[0]:N[q]+=(T.sc.v[q]-N[q])*B;if(t.fillColorAnim&&t.fc){if(T.fc.propType)for(q=0;q<3;q+=1)B.length?j[q]+=(T.fc.v[q]-j[q])*B[0]:j[q]+=(T.fc.v[q]-j[q])*B;T.fh.propType&&(j=B.length?addHueToRGB(j,T.fh.v*B[0]):addHueToRGB(j,T.fh.v*B)),T.fs.propType&&(j=B.length?addSaturationToRGB(j,T.fs.v*B[0]):addSaturationToRGB(j,T.fs.v*B)),T.fb.propType&&(j=B.length?addBrightnessToRGB(j,T.fb.v*B[0]):addBrightnessToRGB(j,T.fb.v*B))}}for(F=0;F<M;F+=1)(T=_[F].a).p.propType&&(B=_[F].s.getMult(P[a].anIndexes[F],E.a[F].s.totalChars),this._hasMaskedPath?B.length?w.translate(0,T.p.v[1]*B[0],-T.p.v[2]*B[1]):w.translate(0,T.p.v[1]*B,-T.p.v[2]*B):B.length?w.translate(T.p.v[0]*B[0],T.p.v[1]*B[1],-T.p.v[2]*B[2]):w.translate(T.p.v[0]*B,T.p.v[1]*B,-T.p.v[2]*B));if(t.strokeWidthAnim&&(W=H<0?0:H),t.strokeColorAnim&&(U="rgb("+Math.round(255*N[0])+","+Math.round(255*N[1])+","+Math.round(255*N[2])+")"),t.fillColorAnim&&t.fc&&(Z="rgb("+Math.round(255*j[0])+","+Math.round(255*j[1])+","+Math.round(255*j[2])+")"),this._hasMaskedPath){if(w.translate(0,-t.ls),w.translate(0,k[1]*V*.01+i,0),E.p.p){x=(h.point[1]-d.point[1])/(h.point[0]-d.point[0]);var ht=180*Math.atan(x)/Math.PI;h.point[0]<d.point[0]&&(ht+=180),w.rotate(-ht*Math.PI/180)}w.translate(G,z,0),o-=k[0]*P[a].an*.005,P[a+1]&&Y!==P[a+1].ind&&(o+=P[a].an/2,o+=.001*t.tr*t.finalSize)}else{switch(w.translate(r,i,0),t.ps&&w.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:w.translate(P[a].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[P[a].line]),0,0);break;case 2:w.translate(P[a].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[P[a].line])/2,0,0)}w.translate(0,-t.ls),w.translate(L,0,0),w.translate(k[0]*P[a].an*.005,k[1]*V*.01,0),r+=P[a].l+.001*t.tr*t.finalSize}"html"===S?tt=w.toCSS():"svg"===S?tt=w.to2dCSS():et=[w.props[0],w.props[1],w.props[2],w.props[3],w.props[4],w.props[5],w.props[6],w.props[7],w.props[8],w.props[9],w.props[10],w.props[11],w.props[12],w.props[13],w.props[14],w.props[15]],K=O}A<=a?(I=new LetterProps(K,W,U,Z,tt,et),this.renderedLetters.push(I),A+=1,this.lettersChangedFlag=!0):(I=this.renderedLetters[a],this.lettersChangedFlag=I.update(K,W,U,Z,tt,et)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),LetterProps.prototype.update=function(t,e,r,i,a,n){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var s=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,s=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,s=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,s=!0),this.fc!==i&&(this.fc=i,this._mdf.fc=!0,s=!0),this.m!==a&&(this.m=a,this._mdf.m=!0,s=!0),!n.length||this.p[0]===n[0]&&this.p[1]===n[1]&&this.p[4]===n[4]&&this.p[5]===n[5]&&this.p[12]===n[12]&&this.p[13]===n[13]||(this.p=n,this._mdf.p=!0,s=!0),s},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||t){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock)this.setCurrentData(this.currentData);else{var i;this.lock=!0,this._mdf=!1;var a=this.effectsSequence.length,n=t||this.data.d.k[this.keysIndex].s;for(i=0;i<a;i+=1)n=r!==this.keysIndex?this.effectsSequence[i](n,n.t):this.effectsSequence[i](this.currentData,n.t);e!==n&&this.setCurrentData(n),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,i=t.length;r<=i-1&&!(r===i-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e,r=FontManager.getCombinedCharacterCodes(),i=[],a=0,n=t.length;a<n;)e=t.charCodeAt(a),-1!==r.indexOf(e)?i[i.length-1]+=t.charAt(a):e>=55296&&e<=56319&&(e=t.charCodeAt(a+1))>=56320&&e<=57343?(i.push(t.substr(a,2)),a+=1):i.push(t.charAt(a)),a+=1;return i},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e,r,i,a,n,s,o,h=this.elem.globalData.fontManager,l=this.data,p=[],c=0,f=l.m.g,d=0,u=0,m=0,y=[],g=0,v=0,x=h.getFontByName(t.f),b=0,k=getFontProperties(x);t.fWeight=k.weight,t.fStyle=k.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),r=t.finalText.length,t.finalLineHeight=t.lh;var _,E=t.tr/1e3*t.finalSize;if(t.sz)for(var w,S,A=!0,P=t.sz[0],C=t.sz[1];A;){w=0,g=0,r=(S=this.buildFinalText(t.t)).length,E=t.tr/1e3*t.finalSize;var D=-1;for(e=0;e<r;e+=1)_=S[e].charCodeAt(0),i=!1," "===S[e]?D=e:13!==_&&3!==_||(g=0,i=!0,w+=t.finalLineHeight||1.2*t.finalSize),h.chars?(o=h.getCharData(S[e],x.fStyle,x.fFamily),b=i?0:o.w*t.finalSize/100):b=h.measureText(S[e],t.f,t.finalSize),g+b>P&&" "!==S[e]?(-1===D?r+=1:e=D,w+=t.finalLineHeight||1.2*t.finalSize,S.splice(e,D===e?1:0,"\r"),D=-1,g=0):(g+=b,g+=E);w+=x.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&C<w?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=S,r=t.finalText.length,A=!1)}g=-E,b=0;var T,F=0;for(e=0;e<r;e+=1)if(i=!1,13===(_=(T=t.finalText[e]).charCodeAt(0))||3===_?(F=0,y.push(g),v=g>v?g:v,g=-2*E,a="",i=!0,m+=1):a=T,h.chars?(o=h.getCharData(T,x.fStyle,h.getFontByName(t.f).fFamily),b=i?0:o.w*t.finalSize/100):b=h.measureText(a,t.f,t.finalSize)," "===T?F+=b+E:(g+=b+E+F,F=0),p.push({l:b,an:b,add:d,n:i,anIndexes:[],val:a,line:m,animatorJustifyOffset:0}),2==f){if(d+=b,""===a||" "===a||e===r-1){for(""!==a&&" "!==a||(d-=b);u<=e;)p[u].an=d,p[u].ind=c,p[u].extra=b,u+=1;c+=1,d=0}}else if(3==f){if(d+=b,""===a||e===r-1){for(""===a&&(d-=b);u<=e;)p[u].an=d,p[u].ind=c,p[u].extra=b,u+=1;d=0,c+=1}}else p[c].ind=c,p[c].extra=0,c+=1;if(t.l=p,v=g>v?g:v,y.push(g),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=v,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=y;var M,I,B,V,R=l.a;s=R.length;var L=[];for(n=0;n<s;n+=1){for((M=R[n]).a.sc&&(t.strokeColorAnim=!0),M.a.sw&&(t.strokeWidthAnim=!0),(M.a.fc||M.a.fh||M.a.fs||M.a.fb)&&(t.fillColorAnim=!0),V=0,B=M.s.b,e=0;e<r;e+=1)(I=p[e]).anIndexes[n]=V,(1==B&&""!==I.val||2==B&&""!==I.val&&" "!==I.val||3==B&&(I.n||" "==I.val||e==r-1)||4==B&&(I.n||e==r-1))&&(1===M.s.rn&&L.push(V),V+=1);l.a[n].s.totalChars=V;var G,z=-1;if(1===M.s.rn)for(e=0;e<r;e+=1)z!=(I=p[e]).anIndexes[n]&&(z=I.anIndexes[n],G=L.splice(Math.floor(Math.random()*L.length),1)[0]),I.anIndexes[n]=G}t.yOffset=t.finalLineHeight||1.2*t.finalSize,t.ls=t.ls||0,t.ascent=x.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=void 0===e?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function i(t,e){this._currentTextLength=-1,this.k=!1,this.data=e,this.elem=t,this.comp=t.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(t),this.s=PropertyFactory.getProp(t,e.s||{k:0},0,0,this),this.e="e"in e?PropertyFactory.getProp(t,e.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(t,e.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(t,e.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(t,e.ne||{k:0},0,0,this),this.a=PropertyFactory.getProp(t,e.a,0,.01,this),this.dynamicProperties.length||this.getValue()}return i.prototype={getMult:function(i){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var a=0,n=0,s=1,o=1;this.ne.v>0?a=this.ne.v/100:n=-this.ne.v/100,this.xe.v>0?s=1-this.xe.v/100:o=1+this.xe.v/100;var h=BezierFactory.getBezierEasing(a,n,s,o).get,l=0,p=this.finalS,c=this.finalE,f=this.data.sh;if(2===f)l=h(l=c===p?i>=c?1:0:t(0,e(.5/(c-p)+(i-p)/(c-p),1)));else if(3===f)l=h(l=c===p?i>=c?0:1:1-t(0,e(.5/(c-p)+(i-p)/(c-p),1)));else if(4===f)c===p?l=0:(l=t(0,e(.5/(c-p)+(i-p)/(c-p),1)))<.5?l*=2:l=1-2*(l-.5),l=h(l);else if(5===f){if(c===p)l=0;else{var d=c-p,u=-d/2+(i=e(t(0,i+.5-p),c-p)),m=d/2;l=Math.sqrt(1-u*u/(m*m))}l=h(l)}else 6===f?(c===p?l=0:(i=e(t(0,i+.5-p),c-p),l=(1+Math.cos(Math.PI+2*Math.PI*i/(c-p)))/2),l=h(l)):(i>=r(p)&&(l=t(0,e(i-p<0?e(c,1)-(p-i):c-i,1))),l=h(l));return l*this.a.v},getValue:function(t){this.iterateDynamicProperties(),this._mdf=t||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,t&&2===this.data.r&&(this.e.v=this._currentTextLength);var e=2===this.data.r?1:100/this.data.totalChars,r=this.o.v/e,i=this.s.v/e+r,a=this.e.v/e+r;if(i>a){var n=i;i=a,a=n}this.finalS=i,this.finalE=a}},extendPrototype([DynamicPropertyContainer],i),{getTextSelectorProp:function(t,e,r){return new i(t,e,r)}}}(),poolFactory=function(t,e,r){var i=0,a=t,n=createSizedArray(a);return{newElement:function(){return i?n[i-=1]:e()},release:function(t){i===a&&(n=pooling.double(n),a*=2),r&&r(t),n[i]=t,i+=1}}},pooling={double:function(t){return t.concat(createSizedArray(t.length))}},pointPool=poolFactory(8,(function(){return createTypedArray("float32",2)})),shapePool=(factory=poolFactory(4,(function(){return new ShapePath}),(function(t){var e,r=t._length;for(e=0;e<r;e+=1)pointPool.release(t.v[e]),pointPool.release(t.i[e]),pointPool.release(t.o[e]),t.v[e]=null,t.i[e]=null,t.o[e]=null;t._length=0,t.c=!1})),factory.clone=function(t){var e,r=factory.newElement(),i=void 0===t._length?t.v.length:t._length;for(r.setLength(i),r.c=t.c,e=0;e<i;e+=1)r.setTripleAt(t.v[e][0],t.v[e][1],t.o[e][0],t.o[e][1],t.i[e][0],t.i[e][1],e);return r},factory),factory,shapeCollectionPool=function(){var t={newShapeCollection:function(){return e?i[e-=1]:new ShapeCollection},release:function(t){var a,n=t._length;for(a=0;a<n;a+=1)shapePool.release(t.shapes[a]);t._length=0,e===r&&(i=pooling.double(i),r*=2),i[e]=t,e+=1}},e=0,r=4,i=createSizedArray(r);return t}(),segmentsLengthPool=poolFactory(8,(function(){return{lengths:[],totalLength:0}}),(function(t){var e,r=t.lengths.length;for(e=0;e<r;e+=1)bezierLengthPool.release(t.lengths[e]);t.lengths.length=0})),bezierLengthPool=poolFactory(8,(function(){return{addedLength:0,percents:createTypedArray("float32",defaultCurveSegments),lengths:createTypedArray("float32",defaultCurveSegments)}})),markerParser=function(){function t(t){for(var e,r=t.split("\r\n"),i={},a=0,n=0;n<r.length;n+=1)2===(e=r[n].split(":")).length&&(i[e[0]]=e[1].trim(),a+=1);if(0===a)throw new Error;return i}return function(e){for(var r=[],i=0;i<e.length;i+=1){var a=e[i],n={time:a.tm,duration:a.dr};try{n.payload=JSON.parse(e[i].cm)}catch(r){try{n.payload=t(e[i].cm)}catch(t){n.payload={name:e[i]}}}r.push(n)}return r}}();function BaseRenderer(){}function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var i=createNS("title"),a=createElementID();i.setAttribute("id",a),i.textContent=e.title,this.svgElement.appendChild(i),r+=a}if(e&&e.description){var n=createNS("desc"),s=createElementID();n.setAttribute("id",s),n.textContent=e.description,this.svgElement.appendChild(n),r+=" "+s}r&&this.svgElement.setAttribute("aria-labelledby",r);var o=createNS("defs");this.svgElement.appendChild(o);var h=createNS("g");this.svgElement.appendChild(h),this.layerElement=h,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&!1===e.hideOnTransparent),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"}},this.globalData={_mdf:!1,frameNum:-1,defs:o,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:!e||void 0===e.clearCanvas||e.clearCanvas,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",className:e&&e.className||"",id:e&&e.id||""},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas"}function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&!1===e.hideOnTransparent),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var i,a,n=this.globalData.defs,s=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(s),this.solidPath="";var o,h,l,p,c,f,d=this.masksProperties,u=0,m=[],y=createElementID(),g="clipPath",v="clip-path";for(i=0;i<s;i+=1)if(("a"!==d[i].mode&&"n"!==d[i].mode||d[i].inv||100!==d[i].o.k||d[i].o.x)&&(g="mask",v="mask"),"s"!==d[i].mode&&"i"!==d[i].mode||0!==u?l=null:((l=createNS("rect")).setAttribute("fill","#ffffff"),l.setAttribute("width",this.element.comp.data.w||0),l.setAttribute("height",this.element.comp.data.h||0),m.push(l)),a=createNS("path"),"n"===d[i].mode)this.viewData[i]={op:PropertyFactory.getProp(this.element,d[i].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,d[i],3),elem:a,lastPath:""},n.appendChild(a);else{var x;if(u+=1,a.setAttribute("fill","s"===d[i].mode?"#000000":"#ffffff"),a.setAttribute("clip-rule","nonzero"),0!==d[i].x.k?(g="mask",v="mask",f=PropertyFactory.getProp(this.element,d[i].x,0,null,this.element),x=createElementID(),(p=createNS("filter")).setAttribute("id",x),(c=createNS("feMorphology")).setAttribute("operator","erode"),c.setAttribute("in","SourceGraphic"),c.setAttribute("radius","0"),p.appendChild(c),n.appendChild(p),a.setAttribute("stroke","s"===d[i].mode?"#000000":"#ffffff")):(c=null,f=null),this.storedData[i]={elem:a,x:f,expan:c,lastPath:"",lastOperator:"",filterId:x,lastRadius:0},"i"===d[i].mode){h=m.length;var b=createNS("g");for(o=0;o<h;o+=1)b.appendChild(m[o]);var k=createNS("mask");k.setAttribute("mask-type","alpha"),k.setAttribute("id",y+"_"+u),k.appendChild(a),n.appendChild(k),b.setAttribute("mask","url("+locationHref+"#"+y+"_"+u+")"),m.length=0,m.push(b)}else m.push(a);d[i].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[i]={elem:a,lastPath:"",op:PropertyFactory.getProp(this.element,d[i].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,d[i],3),invRect:l},this.viewData[i].prop.k||this.drawPath(d[i],this.viewData[i].prop.v,this.viewData[i])}for(this.maskElement=createNS(g),s=m.length,i=0;i<s;i+=1)this.maskElement.appendChild(m[i]);u>0&&(this.maskElement.setAttribute("id",y),this.element.maskedElement.setAttribute(v,"url("+locationHref+"#"+y+")"),n.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}function HierarchyElement(){}function FrameElement(){}function TransformElement(){}function RenderableElement(){}function RenderableDOMElement(){}function ProcessedElement(t,e){this.elem=t,this.pos=e}function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=!0===t.hd,this.pElem=createNS("path"),this.msElem=null}function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var i=0,a=t.length;i<a;){if(t[i].mProps.dynamicProperties.length){this._isAnimated=!0;break}i+=1}}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}BaseRenderer.prototype.checkLayers=function(t){var e,r,i=this.layers.length;for(this.completeLayers=!0,e=i-1;e>=0;e-=1)this.elements[e]||(r=this.layers[e]).ip-r.st<=t-this.layers[e].st&&r.op-r.st>t-this.layers[e].st&&this.buildItem(e),this.completeLayers=!!this.elements[e]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t);default:return this.createNull(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){var e;this.completeLayers=!1;var r,i=t.length,a=this.layers.length;for(e=0;e<i;e+=1)for(r=0;r<a;){if(this.layers[r].id===t[e].id){this.layers[r]=t[e];break}r+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var i=this.elements,a=this.layers,n=0,s=a.length;n<s;)a[n].ind==e&&(i[n]&&!0!==i[n]?(r.push(i[n]),i[n].setAsParent(),void 0!==a[n].parent?this.buildElementParenting(t,a[n].parent,r):t.setHierarchy(r)):(this.buildItem(n),this.addPendingElement(t))),n+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e]);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}},extendPrototype([BaseRenderer],SVGRenderer),SVGRenderer.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRenderer.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRenderer.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRenderer.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)},SVGRenderer.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRenderer.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)"),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),i=createNS("rect");i.setAttribute("width",t.w),i.setAttribute("height",t.h),i.setAttribute("x",0),i.setAttribute("y",0);var a=createElementID();r.setAttribute("id",a),r.appendChild(i),this.layerElement.setAttribute("clip-path","url("+locationHref+"#"+a+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRenderer.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRenderer.prototype.updateContainerSize=function(){},SVGRenderer.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){e[t]=!0;var r=this.createItem(this.layers[t]);e[t]=r,expressionsPlugin&&(0===this.layers[t].ty&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt&&(this.elements[t-1]&&!0!==this.elements[t-1]?r.setMatte(e[t-1].layerId):(this.buildItem(t-1),this.addPendingElement(r)))}},SVGRenderer.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){t.setMatte(this.elements[e-1].layerId);break}e+=1}}},SVGRenderer.prototype.renderFrame=function(t){if(this.renderedFrame!==t&&!this.destroyed){var e;null===t?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRenderer.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var i,a=0;a<e;)this.elements[a]&&!0!==this.elements[a]&&this.elements[a].getBaseElement()&&(i=this.elements[a].getBaseElement()),a+=1;i?this.layerElement.insertBefore(r,i):this.layerElement.appendChild(r)}},SVGRenderer.prototype.hide=function(){this.layerElement.style.display="none"},SVGRenderer.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseRenderer],CanvasRenderer),CanvasRenderer.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRenderer.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRenderer.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)},CanvasRenderer.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRenderer.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRenderer.prototype.ctxTransform=function(t){if(1!==t[0]||0!==t[1]||0!==t[4]||1!==t[5]||0!==t[12]||0!==t[13])if(this.renderConfig.clearCanvas){this.transformMat.cloneFromProps(t);var e=this.contextData.cTr.props;this.transformMat.transform(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15]),this.contextData.cTr.cloneFromProps(this.transformMat.props);var r=this.contextData.cTr.props;this.canvasContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])}else this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRenderer.prototype.ctxOpacity=function(t){if(!this.renderConfig.clearCanvas)return this.canvasContext.globalAlpha*=t<0?0:t,void(this.globalData.currentGlobalAlpha=this.contextData.cO);this.contextData.cO*=t<0?0:t,this.globalData.currentGlobalAlpha!==this.contextData.cO&&(this.canvasContext.globalAlpha=this.contextData.cO,this.globalData.currentGlobalAlpha=this.contextData.cO)},CanvasRenderer.prototype.reset=function(){this.renderConfig.clearCanvas?this.contextData.reset():this.canvasContext.restore()},CanvasRenderer.prototype.save=function(t){if(this.renderConfig.clearCanvas){t&&this.canvasContext.save();var e,r=this.contextData.cTr.props;this.contextData._length<=this.contextData.cArrPos&&this.contextData.duplicate();var i=this.contextData.saved[this.contextData.cArrPos];for(e=0;e<16;e+=1)i[e]=r[e];this.contextData.savedOp[this.contextData.cArrPos]=this.contextData.cO,this.contextData.cArrPos+=1}else this.canvasContext.save()},CanvasRenderer.prototype.restore=function(t){if(this.renderConfig.clearCanvas){t&&(this.canvasContext.restore(),this.globalData.blendMode="source-over"),this.contextData.cArrPos-=1;var e,r=this.contextData.saved[this.contextData.cArrPos],i=this.contextData.cTr.props;for(e=0;e<16;e+=1)i[e]=r[e];this.canvasContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13]),r=this.contextData.savedOp[this.contextData.cArrPos],this.contextData.cO=r,this.globalData.currentGlobalAlpha!==r&&(this.canvasContext.globalAlpha=r,this.globalData.currentGlobalAlpha=r)}else this.canvasContext.restore()},CanvasRenderer.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRenderer.prototype.updateContainerSize=function(){var t,e,r,i;if(this.reset(),this.animationItem.wrapper&&this.animationItem.container?(t=this.animationItem.wrapper.offsetWidth,e=this.animationItem.wrapper.offsetHeight,this.animationItem.container.setAttribute("width",t*this.renderConfig.dpr),this.animationItem.container.setAttribute("height",e*this.renderConfig.dpr)):(t=this.canvasContext.canvas.width*this.renderConfig.dpr,e=this.canvasContext.canvas.height*this.renderConfig.dpr),-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var a=this.renderConfig.preserveAspectRatio.split(" "),n=a[1]||"meet",s=a[0]||"xMidYMid",o=s.substr(0,4),h=s.substr(4);r=t/e,(i=this.transformCanvas.w/this.transformCanvas.h)>r&&"meet"===n||i<r&&"slice"===n?(this.transformCanvas.sx=t/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=t/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=e/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=e/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===o&&(i<r&&"meet"===n||i>r&&"slice"===n)?(t-this.transformCanvas.w*(e/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===o&&(i<r&&"meet"===n||i>r&&"slice"===n)?(t-this.transformCanvas.w*(e/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===h&&(i>r&&"meet"===n||i<r&&"slice"===n)?(e-this.transformCanvas.h*(t/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===h&&(i>r&&"meet"===n||i<r&&"slice"===n)?(e-this.transformCanvas.h*(t/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"===this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=t/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=e/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRenderer.prototype.destroy=function(){var t;for(this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),t=(this.layers?this.layers.length:0)-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRenderer.prototype.renderFrame=function(t,e){if((this.renderedFrame!==t||!0!==this.renderConfig.clearCanvas||e)&&!this.destroyed&&-1!==t){var r;this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var i=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=0;r<i;r+=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRenderer.prototype.buildItem=function(t){var e=this.elements;if(!e[t]&&99!==this.layers[t].ty){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRenderer.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},CanvasRenderer.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRenderer.prototype.show=function(){this.animationItem.container.style.display="block"},extendPrototype([BaseRenderer],HybridRenderer),HybridRenderer.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRenderer.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},HybridRenderer.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var i=this.layers[e];if(i.ddd&&this.supports3d)this.addTo3dContainer(r,e);else if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var a,n,s=0;s<e;)this.elements[s]&&!0!==this.elements[s]&&this.elements[s].getBaseElement&&(n=this.elements[s],a=(this.layers[s].ddd?this.getThreeDContainerByPos(s):n.getBaseElement())||a),s+=1;a?i.ddd&&this.supports3d||this.layerElement.insertBefore(r,a):i.ddd&&this.supports3d||this.layerElement.appendChild(r)}}},HybridRenderer.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRenderer.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRenderer.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRenderer.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)},HybridRenderer.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRenderer.prototype.createNull=SVGRenderer.prototype.createNull,HybridRenderer.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRenderer.prototype.createThreeDContainer=function(t,e){var r,i,a=createTag("div");styleDiv(a);var n=createTag("div");if(styleDiv(n),"3d"===e){(r=a.style).width=this.globalData.compSize.w+"px",r.height=this.globalData.compSize.h+"px";var s="50% 50%";r.webkitTransformOrigin=s,r.mozTransformOrigin=s,r.transformOrigin=s;var o="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";(i=n.style).transform=o,i.webkitTransform=o}a.appendChild(n);var h={container:n,perspectiveElem:a,startPos:t,endPos:t,type:e};return this.threeDElements.push(h),h},HybridRenderer.prototype.build3dContainers=function(){var t,e,r=this.layers.length,i="";for(t=0;t<r;t+=1)this.layers[t].ddd&&3!==this.layers[t].ty?("3d"!==i&&(i="3d",e=this.createThreeDContainer(t,"3d")),e.endPos=Math.max(e.endPos,t)):("2d"!==i&&(i="2d",e=this.createThreeDContainer(t,"2d")),e.endPos=Math.max(e.endPos,t));for(t=(r=this.threeDElements.length)-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRenderer.prototype.addTo3dContainer=function(t,e){for(var r=0,i=this.threeDElements.length;r<i;){if(e<=this.threeDElements[r].endPos){for(var a,n=this.threeDElements[r].startPos;n<e;)this.elements[n]&&this.elements[n].getBaseElement&&(a=this.elements[n].getBaseElement()),n+=1;a?this.threeDElements[r].container.insertBefore(t,a):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRenderer.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,i=e.style;i.width=t.w+"px",i.height=t.h+"px",this.resizerElem=e,styleDiv(e),i.transformStyle="flat",i.mozTransformStyle="flat",i.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),i.overflow="hidden";var a=createNS("svg");a.setAttribute("width","1"),a.setAttribute("height","1"),styleDiv(a),this.resizerElem.appendChild(a);var n=createNS("defs");a.appendChild(n),this.data=t,this.setupGlobalData(t,a),this.globalData.defs=n,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRenderer.prototype.destroy=function(){var t;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRenderer.prototype.updateContainerSize=function(){var t,e,r,i,a=this.animationItem.wrapper.offsetWidth,n=this.animationItem.wrapper.offsetHeight,s=a/n;this.globalData.compSize.w/this.globalData.compSize.h>s?(t=a/this.globalData.compSize.w,e=a/this.globalData.compSize.w,r=0,i=(n-this.globalData.compSize.h*(a/this.globalData.compSize.w))/2):(t=n/this.globalData.compSize.h,e=n/this.globalData.compSize.h,r=(a-this.globalData.compSize.w*(n/this.globalData.compSize.h))/2,i=0);var o=this.resizerElem.style;o.webkitTransform="matrix3d("+t+",0,0,0,0,"+e+",0,0,0,0,1,0,"+r+","+i+",0,1)",o.transform=o.webkitTransform},HybridRenderer.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRenderer.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRenderer.prototype.show=function(){this.resizerElem.style.display="block"},HybridRenderer.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t,e=this.globalData.compSize.w,r=this.globalData.compSize.h,i=this.threeDElements.length;for(t=0;t<i;t+=1){var a=this.threeDElements[t].perspectiveElem.style;a.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(r,2))+"px",a.perspective=a.webkitPerspective}}},HybridRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length,i=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var a=this.createComp(t[e],i,this.globalData.comp,null);a.initExpressions(),this.globalData.projectInterface.registerComposition(a)}},MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e,r=this.element.finalTransform.mat,i=this.masksProperties.length;for(e=0;e<i;e+=1)if((this.viewData[e].prop._mdf||t)&&this.drawPath(this.masksProperties[e],this.viewData[e].prop.v,this.viewData[e]),(this.viewData[e].op._mdf||t)&&this.viewData[e].elem.setAttribute("fill-opacity",this.viewData[e].op.v),"n"!==this.masksProperties[e].mode&&(this.viewData[e].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[e].invRect.setAttribute("transform",r.getInverseMatrix().to2dCSS()),this.storedData[e].x&&(this.storedData[e].x._mdf||t))){var a=this.storedData[e].expan;this.storedData[e].x.v<0?("erode"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="erode",this.storedData[e].elem.setAttribute("filter","url("+locationHref+"#"+this.storedData[e].filterId+")")),a.setAttribute("radius",-this.storedData[e].x.v)):("dilate"!==this.storedData[e].lastOperator&&(this.storedData[e].lastOperator="dilate",this.storedData[e].elem.setAttribute("filter",null)),this.storedData[e].elem.setAttribute("stroke-width",2*this.storedData[e].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,(t+=" h-"+this.globalData.compSize.w)+" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(t,e,r){var i,a,n=" M"+e.v[0][0]+","+e.v[0][1];for(a=e._length,i=1;i<a;i+=1)n+=" C"+e.o[i-1][0]+","+e.o[i-1][1]+" "+e.i[i][0]+","+e.i[i][1]+" "+e.v[i][0]+","+e.v[i][1];if(e.c&&a>1&&(n+=" C"+e.o[i-1][0]+","+e.o[i-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==n){var s="";r.elem&&(e.c&&(s=t.inv?this.solidPath+n:n),r.elem.setAttribute("d",s)),r.lastPath=n}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(t){this.hierarchy=t},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(t,e){var r,i=this.dynamicProperties.length;for(r=0;r<i;r+=1)(e||this._isParent&&"transform"===this.dynamicProperties[r].propType)&&(this.dynamicProperties[r].getValue(),this.dynamicProperties[r]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(t){-1===this.dynamicProperties.indexOf(t)&&this.dynamicProperties.push(t)}},TransformElement.prototype={initTransform:function(){this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_opMdf:!1,mat:new Matrix},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var t,e=this.finalTransform.mat,r=0,i=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;r<i;){if(this.hierarchy[r].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}r+=1}if(this.finalTransform._matMdf)for(t=this.finalTransform.mProp.v.props,e.cloneFromProps(t),r=0;r<i;r+=1)t=this.hierarchy[r].finalTransform.mProp.v.props,e.transform(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}},globalToLocal:function(t){var e=[];e.push(this.finalTransform);for(var r,i=!0,a=this.comp;i;)a.finalTransform?(a.data.hasMask&&e.splice(0,0,a.finalTransform),a=a.comp):i=!1;var n,s=e.length;for(r=0;r<s;r+=1)n=e[r].mat.applyToPointArray(0,0,0),t=[t[0]-n[0],t[1]-n[1],0];return t},mHelper:new Matrix},RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(t){-1===this.renderableComponents.indexOf(t)&&this.renderableComponents.push(t)},removeRenderableComponent:function(t){-1!==this.renderableComponents.indexOf(t)&&this.renderableComponents.splice(this.renderableComponents.indexOf(t),1)},prepareRenderableFrame:function(t){this.checkLayerLimits(t)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(t){this.data.ip-this.data.st<=t&&this.data.op-this.data.st>t?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var t,e=this.renderableComponents.length;for(t=0;t<e;t+=1)this.renderableComponents[t].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}},extendPrototype([RenderableElement,createProxyFunction({initElement:function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){this.hidden||this.isInRange&&!this.isTransparent||((this.baseElement||this.layerElement).style.display="none",this.hidden=!0)},show:function(){this.isInRange&&!this.isTransparent&&(this.data.hd||((this.baseElement||this.layerElement).style.display="block"),this.hidden=!1,this._isFirstFrame=!0)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement),SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),i=createNS(1===e.t?"linearGradient":"radialGradient");i.setAttribute("id",r),i.setAttribute("spreadMethod","pad"),i.setAttribute("gradientUnits","userSpaceOnUse");var a,n,s,o=[];for(s=4*e.g.p,n=0;n<s;n+=4)a=createNS("stop"),i.appendChild(a),o.push(a);t.setAttribute("gf"===e.ty?"fill":"stroke","url("+locationHref+"#"+r+")"),this.gf=i,this.cst=o},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,i,a,n=createNS("mask"),s=createNS("path");n.appendChild(s);var o=createElementID(),h=createElementID();n.setAttribute("id",h);var l=createNS(1===t.t?"linearGradient":"radialGradient");l.setAttribute("id",o),l.setAttribute("spreadMethod","pad"),l.setAttribute("gradientUnits","userSpaceOnUse"),a=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var p=this.stops;for(i=4*t.g.p;i<a;i+=2)(r=createNS("stop")).setAttribute("stop-color","rgb(255,255,255)"),l.appendChild(r),p.push(r);s.setAttribute("gf"===t.ty?"fill":"stroke","url("+locationHref+"#"+o+")"),this.of=l,this.ms=n,this.ost=p,this.maskId=h,e.msElem=s}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix;function r(t,e,r){(r||e.transform.op._mdf)&&e.transform.container.setAttribute("opacity",e.transform.op.v),(r||e.transform.mProps._mdf)&&e.transform.container.setAttribute("transform",e.transform.mProps.v.to2dCSS())}function i(r,i,a){var n,s,o,h,l,p,c,f,d,u,m,y=i.styles.length,g=i.lvl;for(p=0;p<y;p+=1){if(h=i.sh._mdf||a,i.styles[p].lvl<g){for(f=e.reset(),u=g-i.styles[p].lvl,m=i.transformers.length-1;!h&&u>0;)h=i.transformers[m].mProps._mdf||h,u-=1,m-=1;if(h)for(u=g-i.styles[p].lvl,m=i.transformers.length-1;u>0;)d=i.transformers[m].mProps.v.props,f.transform(d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],d[9],d[10],d[11],d[12],d[13],d[14],d[15]),u-=1,m-=1}else f=t;if(s=(c=i.sh.paths)._length,h){for(o="",n=0;n<s;n+=1)(l=c.shapes[n])&&l._length&&(o+=buildShapeString(l,l._length,l.c,f));i.caches[p]=o}else o=i.caches[p];i.styles[p].d+=!0===r.hd?"":o,i.styles[p]._mdf=h||i.styles[p]._mdf}}function a(t,e,r){var i=e.style;(e.c._mdf||r)&&i.pElem.setAttribute("fill","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&i.pElem.setAttribute("fill-opacity",e.o.v)}function n(t,e,r){s(t,e,r),o(0,e,r)}function s(t,e,r){var i,a,n,s,o,h=e.gf,l=e.g._hasOpacity,p=e.s.v,c=e.e.v;if(e.o._mdf||r){var f="gf"===t.ty?"fill-opacity":"stroke-opacity";e.style.pElem.setAttribute(f,e.o.v)}if(e.s._mdf||r){var d=1===t.t?"x1":"cx",u="x1"===d?"y1":"cy";h.setAttribute(d,p[0]),h.setAttribute(u,p[1]),l&&!e.g._collapsable&&(e.of.setAttribute(d,p[0]),e.of.setAttribute(u,p[1]))}if(e.g._cmdf||r){i=e.cst;var m=e.g.c;for(n=i.length,a=0;a<n;a+=1)(s=i[a]).setAttribute("offset",m[4*a]+"%"),s.setAttribute("stop-color","rgb("+m[4*a+1]+","+m[4*a+2]+","+m[4*a+3]+")")}if(l&&(e.g._omdf||r)){var y=e.g.o;for(n=(i=e.g._collapsable?e.cst:e.ost).length,a=0;a<n;a+=1)s=i[a],e.g._collapsable||s.setAttribute("offset",y[2*a]+"%"),s.setAttribute("stop-opacity",y[2*a+1])}if(1===t.t)(e.e._mdf||r)&&(h.setAttribute("x2",c[0]),h.setAttribute("y2",c[1]),l&&!e.g._collapsable&&(e.of.setAttribute("x2",c[0]),e.of.setAttribute("y2",c[1])));else if((e.s._mdf||e.e._mdf||r)&&(o=Math.sqrt(Math.pow(p[0]-c[0],2)+Math.pow(p[1]-c[1],2)),h.setAttribute("r",o),l&&!e.g._collapsable&&e.of.setAttribute("r",o)),e.e._mdf||e.h._mdf||e.a._mdf||r){o||(o=Math.sqrt(Math.pow(p[0]-c[0],2)+Math.pow(p[1]-c[1],2)));var g=Math.atan2(c[1]-p[1],c[0]-p[0]),v=e.h.v;v>=1?v=.99:v<=-1&&(v=-.99);var x=o*v,b=Math.cos(g+e.a.v)*x+p[0],k=Math.sin(g+e.a.v)*x+p[1];h.setAttribute("fx",b),h.setAttribute("fy",k),l&&!e.g._collapsable&&(e.of.setAttribute("fx",b),e.of.setAttribute("fy",k))}}function o(t,e,r){var i=e.style,a=e.d;a&&(a._mdf||r)&&a.dashStr&&(i.pElem.setAttribute("stroke-dasharray",a.dashStr),i.pElem.setAttribute("stroke-dashoffset",a.dashoffset[0])),e.c&&(e.c._mdf||r)&&i.pElem.setAttribute("stroke","rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r)&&i.pElem.setAttribute("stroke-opacity",e.o.v),(e.w._mdf||r)&&(i.pElem.setAttribute("stroke-width",e.w.v),i.msElem&&i.msElem.setAttribute("stroke-width",e.w.v))}return{createRenderFunction:function(t){switch(t.ty){case"fl":return a;case"gf":return s;case"gs":return n;case"st":return o;case"sh":case"el":case"rc":case"sr":return i;case"tr":return r;default:return null}}}}();function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}function CVShapeData(t,e,r,i){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var a,n=4;"rc"===e.ty?n=5:"el"===e.ty?n=6:"sr"===e.ty&&(n=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,n,t);var s,o=r.length;for(a=0;a<o;a+=1)r[a].closed||(s={transforms:i.addTransformSequence(r[a].transforms),trNodes:[]},this.styledShapes.push(s),r[a].elements.push(s))}function BaseElement(){}function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}function SVGBaseElement(){}function IShapeElement(){}function ITextElement(){}function ICompElement(){}function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ISolidElement(t,e,r){this.initElement(t,e,r)}function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var i=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(i),this._currentTime=0,this.globalData.audioController.addAudio(this),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}function SVGTintFilter(t,e){this.filterManager=e;var r=createNS("feColorMatrix");if(r.setAttribute("type","matrix"),r.setAttribute("color-interpolation-filters","linearRGB"),r.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),r.setAttribute("result","f1"),t.appendChild(r),(r=createNS("feColorMatrix")).setAttribute("type","matrix"),r.setAttribute("color-interpolation-filters","sRGB"),r.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),r.setAttribute("result","f2"),t.appendChild(r),this.matrixFilter=r,100!==e.effectElements[2].p.v||e.effectElements[2].p.k){var i,a=createNS("feMerge");t.appendChild(a),(i=createNS("feMergeNode")).setAttribute("in","SourceGraphic"),a.appendChild(i),(i=createNS("feMergeNode")).setAttribute("in","f2"),a.appendChild(i)}}function SVGFillFilter(t,e){this.filterManager=e;var r=createNS("feColorMatrix");r.setAttribute("type","matrix"),r.setAttribute("color-interpolation-filters","sRGB"),r.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),t.appendChild(r),this.matrixFilter=r}function SVGGaussianBlurEffect(t,e){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var r=createNS("feGaussianBlur");t.appendChild(r),this.feGaussianBlur=r}function SVGStrokeEffect(t,e){this.initialized=!1,this.filterManager=e,this.elem=t,this.paths=[]}function SVGTritoneFilter(t,e){this.filterManager=e;var r=createNS("feColorMatrix");r.setAttribute("type","matrix"),r.setAttribute("color-interpolation-filters","linearRGB"),r.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),r.setAttribute("result","f1"),t.appendChild(r);var i=createNS("feComponentTransfer");i.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(i),this.matrixFilter=i;var a=createNS("feFuncR");a.setAttribute("type","table"),i.appendChild(a),this.feFuncR=a;var n=createNS("feFuncG");n.setAttribute("type","table"),i.appendChild(n),this.feFuncG=n;var s=createNS("feFuncB");s.setAttribute("type","table"),i.appendChild(s),this.feFuncB=s}function SVGProLevelsFilter(t,e){this.filterManager=e;var r=this.filterManager.effectElements,i=createNS("feComponentTransfer");(r[10].p.k||0!==r[10].p.v||r[11].p.k||1!==r[11].p.v||r[12].p.k||1!==r[12].p.v||r[13].p.k||0!==r[13].p.v||r[14].p.k||1!==r[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",i)),(r[17].p.k||0!==r[17].p.v||r[18].p.k||1!==r[18].p.v||r[19].p.k||1!==r[19].p.v||r[20].p.k||0!==r[20].p.v||r[21].p.k||1!==r[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",i)),(r[24].p.k||0!==r[24].p.v||r[25].p.k||1!==r[25].p.v||r[26].p.k||1!==r[26].p.v||r[27].p.k||0!==r[27].p.v||r[28].p.k||1!==r[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",i)),(r[31].p.k||0!==r[31].p.v||r[32].p.k||1!==r[32].p.v||r[33].p.k||1!==r[33].p.v||r[34].p.k||0!==r[34].p.v||r[35].p.k||1!==r[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",i)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(i.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(i),i=createNS("feComponentTransfer")),(r[3].p.k||0!==r[3].p.v||r[4].p.k||1!==r[4].p.v||r[5].p.k||1!==r[5].p.v||r[6].p.k||0!==r[6].p.v||r[7].p.k||1!==r[7].p.v)&&(i.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(i),this.feFuncRComposed=this.createFeFunc("feFuncR",i),this.feFuncGComposed=this.createFeFunc("feFuncG",i),this.feFuncBComposed=this.createFeFunc("feFuncB",i))}function SVGDropShadowEffect(t,e){var r=e.container.globalData.renderConfig.filterSize;t.setAttribute("x",r.x),t.setAttribute("y",r.y),t.setAttribute("width",r.width),t.setAttribute("height",r.height),this.filterManager=e;var i=createNS("feGaussianBlur");i.setAttribute("in","SourceAlpha"),i.setAttribute("result","drop_shadow_1"),i.setAttribute("stdDeviation","0"),this.feGaussianBlur=i,t.appendChild(i);var a=createNS("feOffset");a.setAttribute("dx","25"),a.setAttribute("dy","0"),a.setAttribute("in","drop_shadow_1"),a.setAttribute("result","drop_shadow_2"),this.feOffset=a,t.appendChild(a);var n=createNS("feFlood");n.setAttribute("flood-color","#00ff00"),n.setAttribute("flood-opacity","1"),n.setAttribute("result","drop_shadow_3"),this.feFlood=n,t.appendChild(n);var s=createNS("feComposite");s.setAttribute("in","drop_shadow_3"),s.setAttribute("in2","drop_shadow_2"),s.setAttribute("operator","in"),s.setAttribute("result","drop_shadow_4"),t.appendChild(s);var o,h=createNS("feMerge");t.appendChild(h),o=createNS("feMergeNode"),h.appendChild(o),(o=createNS("feMergeNode")).setAttribute("in","SourceGraphic"),this.feMergeNode=o,this.feMerge=h,this.originalNodeAdded=!1,h.appendChild(o)}ShapeTransformManager.prototype={addTransformSequence:function(t){var e,r=t.length,i="_";for(e=0;e<r;e+=1)i+=t[e].transform.key+"_";var a=this.sequences[i];return a||(a={transforms:[].concat(t),finalTransform:new Matrix,_mdf:!1},this.sequences[i]=a,this.sequenceList.push(a)),a},processSequence:function(t,e){for(var r,i=0,a=t.transforms.length,n=e;i<a&&!e;){if(t.transforms[i].transform.mProps._mdf){n=!0;break}i+=1}if(n)for(t.finalTransform.reset(),i=a-1;i>=0;i-=1)r=t.transforms[i].transform.mProps.v.props,t.finalTransform.transform(r[0],r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11],r[12],r[13],r[14],r[15]);t._mdf=n},processSequences:function(t){var e,r=this.sequenceList.length;for(e=0;e<r;e+=1)this.processSequence(this.sequenceList[e],t)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}},CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var t=0,e=this.data.masksProperties.length;t<e;){if("n"!==this.data.masksProperties[t].mode&&!1!==this.data.masksProperties[t].cl)return!0;t+=1}return!1},initExpressions:function(){this.layerInterface=LayerExpressionInterface(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var t=EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(t),0===this.data.ty||this.data.xt?this.compInterface=CompExpressionInterface(this):4===this.data.ty?(this.layerInterface.shapeInterface=ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=TextExpressionInterface(this),this.layerInterface.text=this.layerInterface.textInterface)},setBlendMode:function(){var t=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=t},initBaseData:function(t,e,r){this.globalData=e,this.comp=r,this.data=t,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var t,e,r,i=null;if(this.data.td){if(3==this.data.td||1==this.data.td){var a=createNS("mask");a.setAttribute("id",this.layerId),a.setAttribute("mask-type",3==this.data.td?"luminance":"alpha"),a.appendChild(this.layerElement),i=a,this.globalData.defs.appendChild(a),featureSupport.maskType||1!=this.data.td||(a.setAttribute("mask-type","luminance"),t=createElementID(),e=filtersFactory.createFilter(t),this.globalData.defs.appendChild(e),e.appendChild(filtersFactory.createAlphaToLuminanceFilter()),(r=createNS("g")).appendChild(this.layerElement),i=r,a.appendChild(r),r.setAttribute("filter","url("+locationHref+"#"+t+")"))}else if(2==this.data.td){var n=createNS("mask");n.setAttribute("id",this.layerId),n.setAttribute("mask-type","alpha");var s=createNS("g");n.appendChild(s),t=createElementID(),e=filtersFactory.createFilter(t);var o=createNS("feComponentTransfer");o.setAttribute("in","SourceGraphic"),e.appendChild(o);var h=createNS("feFuncA");h.setAttribute("type","table"),h.setAttribute("tableValues","1.0 0.0"),o.appendChild(h),this.globalData.defs.appendChild(e);var l=createNS("rect");l.setAttribute("width",this.comp.data.w),l.setAttribute("height",this.comp.data.h),l.setAttribute("x","0"),l.setAttribute("y","0"),l.setAttribute("fill","#ffffff"),l.setAttribute("opacity","0"),s.setAttribute("filter","url("+locationHref+"#"+t+")"),s.appendChild(l),s.appendChild(this.layerElement),i=s,featureSupport.maskType||(n.setAttribute("mask-type","luminance"),e.appendChild(filtersFactory.createAlphaToLuminanceFilter()),r=createNS("g"),s.appendChild(l),r.appendChild(this.layerElement),i=r,s.appendChild(r)),this.globalData.defs.appendChild(n)}}else this.data.tt?(this.matteElement.appendChild(this.layerElement),i=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var p=createNS("clipPath"),c=createNS("path");c.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var f=createElementID();if(p.setAttribute("id",f),p.appendChild(c),this.globalData.defs.appendChild(p),this.checkMasks()){var d=createNS("g");d.setAttribute("clip-path","url("+locationHref+"#"+f+")"),d.appendChild(this.layerElement),this.transformedElement=d,i?i.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+locationHref+"#"+f+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._matMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.mat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.mProp.o.v)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this)},setMatte:function(t){this.matteElement&&this.matteElement.setAttribute("mask","url("+locationHref+"#"+t+")")}},IShapeElement.prototype={addShapeToModifiers:function(t){var e,r=this.shapeModifiers.length;for(e=0;e<r;e+=1)this.shapeModifiers[e].addShape(t)},isShapeInAnimatedModifiers:function(t){for(var e=this.shapeModifiers.length;0<e;)if(this.shapeModifiers[0].isAnimatedWithShape(t))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var t,e=this.shapes.length;for(t=0;t<e;t+=1)this.shapes[t].sh.reset();for(t=(e=this.shapeModifiers.length)-1;t>=0&&!this.shapeModifiers[t].processShapes(this._isFirstFrame);t-=1);}},lcEnum:{1:"butt",2:"round",3:"square"},ljEnum:{1:"miter",2:"round",3:"bevel"},searchProcessedElement:function(t){for(var e=this.processedElements,r=0,i=e.length;r<i;){if(e[r].elem===t)return e[r].pos;r+=1}return 0},addProcessedElement:function(t,e){for(var r=this.processedElements,i=r.length;i;)if(r[i-=1].elem===t)return void(r[i].pos=e);r.push(new ProcessedElement(t,e))},prepareFrame:function(t){this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)}},ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)},ITextElement.prototype.createPathShape=function(t,e){var r,i,a=e.length,n="";for(r=0;r<a;r+=1)i=e[r].ks.k,n+=buildShapeString(i,i.i.length,!0,t);return n},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,i,a){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0)}e.translate(i,a,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(255*t[0])+","+Math.round(255*t[1])+","+Math.round(255*t[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&e.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,i=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)},AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this.audio.volume(t)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){},FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){this.layerInterface=FootageInterface(this)},FootageElement.prototype.getFootageData=function(){return this.footageData},extendPrototype([SVGRenderer,ICompElement,SVGBaseElement],SVGCompElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,i=[],a="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(i.push(a),a=""):a+=t[e],e+=1;return i.push(a),i},SVGTextLottieElement.prototype.buildNewText=function(){var t,e,r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var i=this.globalData.fontManager.getFontByName(r.f);if(i.fClass)this.layerElement.setAttribute("class",i.fClass);else{this.layerElement.setAttribute("font-family",i.fFamily);var a=r.fWeight,n=r.fStyle;this.layerElement.setAttribute("font-style",n),this.layerElement.setAttribute("font-weight",a)}this.layerElement.setAttribute("aria-label",r.t);var s,o=r.l||[],h=!!this.globalData.fontManager.chars;e=o.length;var l,p=this.mHelper,c="",f=this.data.singleShape,d=0,u=0,m=!0,y=.001*r.tr*r.finalSize;if(!f||h||r.sz){var g,v,x=this.textSpans.length;for(t=0;t<e;t+=1)h&&f&&0!==t||(s=x>t?this.textSpans[t]:createNS(h?"path":"text"),x<=t&&(s.setAttribute("stroke-linecap","butt"),s.setAttribute("stroke-linejoin","round"),s.setAttribute("stroke-miterlimit","4"),this.textSpans[t]=s,this.layerElement.appendChild(s)),s.style.display="inherit"),p.reset(),p.scale(r.finalSize/100,r.finalSize/100),f&&(o[t].n&&(d=-y,u+=r.yOffset,u+=m?1:0,m=!1),this.applyTextPropertiesToMatrix(r,p,o[t].line,d,u),d+=o[t].l||0,d+=y),h?(l=(g=(v=this.globalData.fontManager.getCharData(r.finalText[t],i.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily))&&v.data||{}).shapes?g.shapes[0].it:[],f?c+=this.createPathShape(p,l):s.setAttribute("d",this.createPathShape(p,l))):(f&&s.setAttribute("transform","translate("+p.props[12]+","+p.props[13]+")"),s.textContent=o[t].val,s.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"));f&&s&&s.setAttribute("d",c)}else{var b=this.textContainer,k="start";switch(r.j){case 1:k="end";break;case 2:k="middle";break;default:k="start"}b.setAttribute("text-anchor",k),b.setAttribute("letter-spacing",y);var _=this.buildTextContents(r.finalText);for(e=_.length,u=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)(s=this.textSpans[t]||createNS("tspan")).textContent=_[t],s.setAttribute("x",0),s.setAttribute("y",u),s.style.display="inherit",b.appendChild(s),this.textSpans[t]=s,u+=r.finalLineHeight;this.layerElement.appendChild(b)}for(;t<this.textSpans.length;)this.textSpans[t].style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.renderInnerContent=function(){if(!this.data.singleShape&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){var t,e;this._sizeChanged=!0;var r,i,a=this.textAnimator.renderedLetters,n=this.textProperty.currentData.l;for(e=n.length,t=0;t<e;t+=1)n[t].n||(r=a[t],i=this.textSpans[t],r._mdf.m&&i.setAttribute("transform",r.m),r._mdf.o&&i.setAttribute("opacity",r.o),r._mdf.sw&&i.setAttribute("stroke-width",r.sw),r._mdf.sc&&i.setAttribute("stroke",r.sc),r._mdf.fc&&i.setAttribute("fill",r.fc))}},extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e,r,i,a=this.shapes.length,n=this.stylesList.length,s=[],o=!1;for(r=0;r<n;r+=1){for(i=this.stylesList[r],o=!1,s.length=0,t=0;t<a;t+=1)-1!==(e=this.shapes[t]).styles.indexOf(i)&&(s.push(e),o=e._isAnimated||o);s.length>1&&o&&this.setShapesAsAnimated(s)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,i=new SVGStyleData(t,e),a=i.pElem;return"st"===t.ty?r=new SVGStrokeStyleData(this,t,i):"fl"===t.ty?r=new SVGFillStyleData(this,t,i):"gf"!==t.ty&&"gs"!==t.ty||(r=new("gf"===t.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData)(this,t,i),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),a.setAttribute("mask","url("+locationHref+"#"+r.maskId+")"))),"st"!==t.ty&&"gs"!==t.ty||(a.setAttribute("stroke-linecap",this.lcEnum[t.lc]||"round"),a.setAttribute("stroke-linejoin",this.ljEnum[t.lj]||"round"),a.setAttribute("fill-opacity","0"),1===t.lj&&a.setAttribute("stroke-miterlimit",t.ml)),2===t.r&&a.setAttribute("fill-rule","evenodd"),t.ln&&a.setAttribute("id",t.ln),t.cl&&a.setAttribute("class",t.cl),t.bm&&(a.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(i),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),i=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var i=4;"rc"===t.ty?i=5:"el"===t.ty?i=6:"sr"===t.ty&&(i=7);var a=new SVGShapeData(e,r,ShapePropertyFactory.getShapeProp(this,t,i,this));return this.shapes.push(a),this.addShapeToModifiers(a),this.addToAnimatedContents(t,a),a},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,i=this.animatedContents.length;r<i;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e,r=t.styles,i=this.stylesList.length;for(e=0;e<i;e+=1)this.stylesList[e].closed||r.push(this.stylesList[e])},SVGShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,i,a,n,s){var o,h,l,p,c,f,d=[].concat(n),u=t.length-1,m=[],y=[];for(o=u;o>=0;o-=1){if((f=this.searchProcessedElement(t[o]))?e[o]=r[f-1]:t[o]._render=s,"fl"===t[o].ty||"st"===t[o].ty||"gf"===t[o].ty||"gs"===t[o].ty)f?e[o].style.closed=!1:e[o]=this.createStyleElement(t[o],a),t[o]._render&&i.appendChild(e[o].style.pElem),m.push(e[o].style);else if("gr"===t[o].ty){if(f)for(l=e[o].it.length,h=0;h<l;h+=1)e[o].prevViewData[h]=e[o].it[h];else e[o]=this.createGroupElement(t[o]);this.searchShapes(t[o].it,e[o].it,e[o].prevViewData,e[o].gr,a+1,d,s),t[o]._render&&i.appendChild(e[o].gr)}else"tr"===t[o].ty?(f||(e[o]=this.createTransformElement(t[o],i)),p=e[o].transform,d.push(p)):"sh"===t[o].ty||"rc"===t[o].ty||"el"===t[o].ty||"sr"===t[o].ty?(f||(e[o]=this.createShapeElement(t[o],d,a)),this.setElementStyles(e[o])):"tm"===t[o].ty||"rd"===t[o].ty||"ms"===t[o].ty||"pb"===t[o].ty?(f?(c=e[o]).closed=!1:((c=ShapeModifiers.getModifier(t[o].ty)).init(this,t[o]),e[o]=c,this.shapeModifiers.push(c)),y.push(c)):"rp"===t[o].ty&&(f?(c=e[o]).closed=!0:(c=ShapeModifiers.getModifier(t[o].ty),e[o]=c,c.init(this,t,o,e),this.shapeModifiers.push(c),s=!1),y.push(c));this.addProcessedElement(t[o],o+1)}for(u=m.length,o=0;o<u;o+=1)m[o].closed=!0;for(u=y.length,o=0;o<u;o+=1)y[o].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){var t;this.renderModifiers();var e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e,r=this.animatedContents.length;for(t=0;t<r;t+=1)e=this.animatedContents[t],(this._isFirstFrame||e.element._isAnimated)&&!0!==e.data&&e.fn(e.data,e.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v/100;this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 "+i+" 0")}},SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}},SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3*this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=3==r?0:e,a=2==r?0:e;this.feGaussianBlur.setAttribute("stdDeviation",i+" "+a);var n=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",n)}},SVGStrokeEffect.prototype.initialize=function(){var t,e,r,i,a=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(i=this.elem.maskManager.masksProperties.length,r=0):i=1+(r=this.filterManager.effectElements[0].p.v-1),(e=createNS("g")).setAttribute("fill","none"),e.setAttribute("stroke-linecap","round"),e.setAttribute("stroke-dashoffset",1);r<i;r+=1)t=createNS("path"),e.appendChild(t),this.paths.push({p:t,m:r});if(3===this.filterManager.effectElements[10].p.v){var n=createNS("mask"),s=createElementID();n.setAttribute("id",s),n.setAttribute("mask-type","alpha"),n.appendChild(e),this.elem.globalData.defs.appendChild(n);var o=createNS("g");for(o.setAttribute("mask","url("+locationHref+"#"+s+")");a[0];)o.appendChild(a[0]);this.elem.layerElement.appendChild(o),this.masker=n,e.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(a=this.elem.layerElement.children||this.elem.layerElement.childNodes;a.length;)this.elem.layerElement.removeChild(a[0]);this.elem.layerElement.appendChild(e),this.elem.layerElement.removeAttribute("mask"),e.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=e},SVGStrokeEffect.prototype.renderFrame=function(t){var e;this.initialized||this.initialize();var r,i,a=this.paths.length;for(e=0;e<a;e+=1)if(-1!==this.paths[e].m&&(r=this.elem.maskManager.viewData[this.paths[e].m],i=this.paths[e].p,(t||this.filterManager._mdf||r.prop._mdf)&&i.setAttribute("d",r.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||r.prop._mdf)){var n;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var s=.01*Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),o=.01*Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),h=i.getTotalLength();n="0 0 0 "+h*s+" ";var l,p=h*(o-s),c=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01,f=Math.floor(p/c);for(l=0;l<f;l+=1)n+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01+" ";n+="0 "+10*h+" 0 0"}else n="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01;i.setAttribute("stroke-dasharray",n)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(t||this.filterManager.effectElements[3].p._mdf)){var d=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(255*d[0])+","+bmFloor(255*d[1])+","+bmFloor(255*d[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v,a=i[0]+" "+r[0]+" "+e[0],n=i[1]+" "+r[1]+" "+e[1],s=i[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",a),this.feFuncG.setAttribute("tableValues",n),this.feFuncB.setAttribute("tableValues",s)}},SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,i,a){for(var n,s,o=0,h=Math.min(t,e),l=Math.max(t,e),p=Array.call(null,{length:256}),c=0,f=a-i,d=e-t;o<=256;)s=(n=o/256)<=h?d<0?a:i:n>=l?d<0?i:a:i+f*Math.pow((n-t)/d,1/r),p[c]=s,c+=1,o+=256/255;return p.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}},SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*e[0]),Math.round(255*e[1]),Math.round(255*e[2])))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,i=(this.filterManager.effectElements[2].p.v-90)*degToRads,a=r*Math.cos(i),n=r*Math.sin(i);this.feOffset.setAttribute("dx",a),this.feOffset.setAttribute("dy",n)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}function SVGEffects(t){var e,r,i=t.data.ef?t.data.ef.length:0,a=createElementID(),n=filtersFactory.createFilter(a,!0),s=0;for(this.filters=[],e=0;e<i;e+=1)r=null,20===t.data.ef[e].ty?(s+=1,r=new SVGTintFilter(n,t.effectsManager.effectElements[e])):21===t.data.ef[e].ty?(s+=1,r=new SVGFillFilter(n,t.effectsManager.effectElements[e])):22===t.data.ef[e].ty?r=new SVGStrokeEffect(t,t.effectsManager.effectElements[e]):23===t.data.ef[e].ty?(s+=1,r=new SVGTritoneFilter(n,t.effectsManager.effectElements[e])):24===t.data.ef[e].ty?(s+=1,r=new SVGProLevelsFilter(n,t.effectsManager.effectElements[e])):25===t.data.ef[e].ty?(s+=1,r=new SVGDropShadowEffect(n,t.effectsManager.effectElements[e])):28===t.data.ef[e].ty?r=new SVGMatte3Effect(n,t.effectsManager.effectElements[e],t):29===t.data.ef[e].ty&&(s+=1,r=new SVGGaussianBlurEffect(n,t.effectsManager.effectElements[e])),r&&this.filters.push(r);s&&(t.globalData.defs.appendChild(n),t.layerElement.setAttribute("filter","url("+locationHref+"#"+a+")")),this.filters.length&&t.addRenderableComponent(this)}function CVContextData(){var t;for(this.saved=[],this.cArrPos=0,this.cTr=new Matrix,this.cO=1,this.savedOp=createTypedArray("float32",15),t=0;t<15;t+=1)this.saved[t]=createTypedArray("float32",16);this._length=15}function CVBaseElement(){}function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function CVMaskElement(t,e){var r;this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var i=this.masksProperties.length,a=!1;for(r=0;r<i;r+=1)"n"!==this.masksProperties[r].mode&&(a=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=a,a&&this.element.addRenderableComponent(this)}function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}function CVSolidElement(t,e,r){this.initElement(t,e,r)}function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}function CVEffects(){}function HBaseElement(){}function HSolidElement(t,e,r){this.initElement(t,e,r)}function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var i=PropertyFactory.getProp;if(this.pe=i(this,t.pe,0,0,this),t.ks.p.s?(this.px=i(this,t.ks.p.x,1,0,this),this.py=i(this,t.ks.p.y,1,0,this),this.pz=i(this,t.ks.p.z,1,0,this)):this.p=i(this,t.ks.p,1,0,this),t.ks.a&&(this.a=i(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var a,n=t.ks.or.k.length;for(a=0;a<n;a+=1)t.ks.or.k[a].to=null,t.ks.or.k[a].ti=null}this.or=i(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=i(this,t.ks.rx,0,degToRads,this),this.ry=i(this,t.ks.ry,0,degToRads,this),this.rz=i(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HEffects(){}SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var i,a=r.children,n=0,s=a.length;n<s&&a[n]!==t.layerElement;)n+=1;n<=s-2&&(i=a[n+1]);var o=createNS("use");o.setAttribute("href","#"+e),i?r.insertBefore(o,i):r.appendChild(o)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),i=createNS("mask");i.setAttribute("id",e.layerId),i.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var a=t.globalData.defs;a.appendChild(i);var n=createNS("symbol");n.setAttribute("id",r),this.replaceInParent(e,r),n.appendChild(e.layerElement),a.appendChild(n);var s=createNS("use");s.setAttribute("href","#"+r),i.appendChild(s),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,i=e.length;r<i;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVContextData.prototype.duplicate=function(){var t=2*this._length,e=this.savedOp;this.savedOp=createTypedArray("float32",t),this.savedOp.set(e);var r=0;for(r=this._length;r<t;r+=1)this.saved[r]=createTypedArray("float32",16);this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.cO=1},CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){this.canvasContext=this.globalData.canvasContext,this.renderableEffectsManager=new CVEffects(this)},createContent:function(){},setBlendMode:function(){var t=this.globalData;if(t.blendMode!==this.data.bm){t.blendMode=this.data.bm;var e=getBlendMode(this.data.bm);t.canvasContext.globalCompositeOperation=e}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},renderFrame:function(){if(!this.hidden&&!this.data.hd){this.renderTransform(),this.renderRenderable(),this.setBlendMode();var t=0===this.data.ty;this.globalData.renderer.save(t),this.globalData.renderer.ctxTransform(this.finalTransform.mat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v),this.renderInnerContent(),this.globalData.renderer.restore(t),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e,r,i=t.getContext("2d"),a=this.img.width,n=this.img.height,s=a/n,o=this.assetData.w/this.assetData.h,h=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>o&&"xMidYMid slice"===h||s<o&&"xMidYMid slice"!==h?e=(r=n)*o:r=(e=a)/o,i.drawImage(this.img,(a-e)/2,(n-r)/2,e,r,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([CanvasRenderer,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t,e=this.canvasContext;for(e.beginPath(),e.moveTo(0,0),e.lineTo(this.data.w,0),e.lineTo(this.data.w,this.data.h),e.lineTo(0,this.data.h),e.lineTo(0,0),e.clip(),t=this.layers.length-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},CVCompElement.prototype.destroy=function(){var t;for(t=this.layers.length-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t,e,r,i,a=this.element.finalTransform.mat,n=this.element.canvasContext,s=this.masksProperties.length;for(n.beginPath(),t=0;t<s;t+=1)if("n"!==this.masksProperties[t].mode){var o;this.masksProperties[t].inv&&(n.moveTo(0,0),n.lineTo(this.element.globalData.compSize.w,0),n.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),n.lineTo(0,this.element.globalData.compSize.h),n.lineTo(0,0)),i=this.viewData[t].v,e=a.applyToPointArray(i.v[0][0],i.v[0][1],0),n.moveTo(e[0],e[1]);var h=i._length;for(o=1;o<h;o+=1)r=a.applyToTriplePoints(i.o[o-1],i.i[o],i.v[o]),n.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5]);r=a.applyToTriplePoints(i.o[o-1],i.i[0],i.v[0]),n.bezierCurveTo(r[0],r[1],r[2],r[3],r[4],r[5])}this.element.globalData.renderer.save(!0),n.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:!0===t.hd},i={};if("fl"===t.ty||"st"===t.ty?(i.c=PropertyFactory.getProp(this,t.c,1,255,this),i.c.k||(r.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")")):"gf"!==t.ty&&"gs"!==t.ty||(i.s=PropertyFactory.getProp(this,t.s,1,null,this),i.e=PropertyFactory.getProp(this,t.e,1,null,this),i.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),i.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),i.g=new GradientProperty(this,t.g,this)),i.o=PropertyFactory.getProp(this,t.o,0,.01,this),"st"===t.ty||"gs"===t.ty){if(r.lc=this.lcEnum[t.lc]||"round",r.lj=this.ljEnum[t.lj]||"round",1==t.lj&&(r.ml=t.ml),i.w=PropertyFactory.getProp(this,t.w,0,null,this),i.w.k||(r.wi=i.w.v),t.d){var a=new DashProperty(this,t.d,"canvas",this);i.d=a,i.d.k||(r.da=i.d.dashArray,r.do=i.d.dashoffset[0])}}else r.r=2===t.r?"evenodd":"nonzero";return this.stylesList.push(r),i.style=r,i},CVShapeElement.prototype.createGroupElement=function(){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(t){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}}},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){var t;this._isFirstFrame=!0;var e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,i,a){var n,s,o,h,l,p,c=t.length-1,f=[],d=[],u=[].concat(a);for(n=c;n>=0;n-=1){if((h=this.searchProcessedElement(t[n]))?e[n]=r[h-1]:t[n]._shouldRender=i,"fl"===t[n].ty||"st"===t[n].ty||"gf"===t[n].ty||"gs"===t[n].ty)h?e[n].style.closed=!1:e[n]=this.createStyleElement(t[n],u),f.push(e[n].style);else if("gr"===t[n].ty){if(h)for(o=e[n].it.length,s=0;s<o;s+=1)e[n].prevViewData[s]=e[n].it[s];else e[n]=this.createGroupElement(t[n]);this.searchShapes(t[n].it,e[n].it,e[n].prevViewData,i,u)}else"tr"===t[n].ty?(h||(p=this.createTransformElement(t[n]),e[n]=p),u.push(e[n]),this.addTransformToStyleList(e[n])):"sh"===t[n].ty||"rc"===t[n].ty||"el"===t[n].ty||"sr"===t[n].ty?h||(e[n]=this.createShapeElement(t[n])):"tm"===t[n].ty||"rd"===t[n].ty||"pb"===t[n].ty?(h?(l=e[n]).closed=!1:((l=ShapeModifiers.getModifier(t[n].ty)).init(this,t[n]),e[n]=l,this.shapeModifiers.push(l)),d.push(l)):"rp"===t[n].ty&&(h?(l=e[n]).closed=!0:(l=ShapeModifiers.getModifier(t[n].ty),e[n]=l,l.init(this,t,n,e),this.shapeModifiers.push(l),i=!1),d.push(l));this.addProcessedElement(t[n],n+1)}for(this.removeTransformFromStyleList(),this.closeStyles(f),c=d.length,n=0;n<c;n+=1)d[n].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e,r,i,a,n,s,o,h,l=this.stylesList.length,p=this.globalData.renderer,c=this.globalData.canvasContext;for(t=0;t<l;t+=1)if(("st"!==(o=(h=this.stylesList[t]).type)&&"gs"!==o||0!==h.wi)&&h.data._shouldRender&&0!==h.coOp&&0!==this.globalData.currentGlobalAlpha){for(p.save(),n=h.elements,"st"===o||"gs"===o?(c.strokeStyle="st"===o?h.co:h.grd,c.lineWidth=h.wi,c.lineCap=h.lc,c.lineJoin=h.lj,c.miterLimit=h.ml||0):c.fillStyle="fl"===o?h.co:h.grd,p.ctxOpacity(h.coOp),"st"!==o&&"gs"!==o&&c.beginPath(),p.ctxTransform(h.preTransforms.finalTransform.props),r=n.length,e=0;e<r;e+=1){for("st"!==o&&"gs"!==o||(c.beginPath(),h.da&&(c.setLineDash(h.da),c.lineDashOffset=h.do)),a=(s=n[e].trNodes).length,i=0;i<a;i+=1)"m"===s[i].t?c.moveTo(s[i].p[0],s[i].p[1]):"c"===s[i].t?c.bezierCurveTo(s[i].pts[0],s[i].pts[1],s[i].pts[2],s[i].pts[3],s[i].pts[4],s[i].pts[5]):c.closePath();"st"!==o&&"gs"!==o||(c.stroke(),h.da&&c.setLineDash(this.dashResetter))}"st"!==o&&"gs"!==o&&c.fill(h.r),p.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,i){var a,n;for(n=t,a=e.length-1;a>=0;a-=1)"tr"===e[a].ty?(n=r[a].transform,this.renderShapeTransform(t,n)):"sh"===e[a].ty||"el"===e[a].ty||"rc"===e[a].ty||"sr"===e[a].ty?this.renderPath(e[a],r[a]):"fl"===e[a].ty?this.renderFill(e[a],r[a],n):"st"===e[a].ty?this.renderStroke(e[a],r[a],n):"gf"===e[a].ty||"gs"===e[a].ty?this.renderGradientFill(e[a],r[a],n):"gr"===e[a].ty?this.renderShape(n,e[a].it,r[a].it):e[a].ty;i&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r,i,a,n=t.trNodes,s=e.paths,o=s._length;n.length=0;var h=t.transforms.finalTransform;for(a=0;a<o;a+=1){var l=s.shapes[a];if(l&&l.v){for(i=l._length,r=1;r<i;r+=1)1===r&&n.push({t:"m",p:h.applyToPointArray(l.v[0][0],l.v[0][1],0)}),n.push({t:"c",pts:h.applyToTriplePoints(l.o[r-1],l.i[r],l.v[r])});1===i&&n.push({t:"m",p:h.applyToPointArray(l.v[0][0],l.v[0][1],0)}),l.c&&i&&(n.push({t:"c",pts:h.applyToTriplePoints(l.o[r-1],l.i[0],l.v[0])}),n.push({t:"z"}))}}t.trNodes=n}},CVShapeElement.prototype.renderPath=function(t,e){if(!0!==t.hd&&t._shouldRender){var r,i=e.styledShapes.length;for(r=0;r<i;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var i=e.style;(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var i,a=e.style;if(!a.grd||e.g._mdf||e.s._mdf||e.e._mdf||1!==t.t&&(e.h._mdf||e.a._mdf)){var n,s=this.globalData.canvasContext,o=e.s.v,h=e.e.v;if(1===t.t)i=s.createLinearGradient(o[0],o[1],h[0],h[1]);else{var l=Math.sqrt(Math.pow(o[0]-h[0],2)+Math.pow(o[1]-h[1],2)),p=Math.atan2(h[1]-o[1],h[0]-o[0]),c=e.h.v;c>=1?c=.99:c<=-1&&(c=-.99);var f=l*c,d=Math.cos(p+e.a.v)*f+o[0],u=Math.sin(p+e.a.v)*f+o[1];i=s.createRadialGradient(d,u,0,o[0],o[1],l)}var m=t.g.p,y=e.g.c,g=1;for(n=0;n<m;n+=1)e.g._hasOpacity&&e.g._collapsable&&(g=e.g.o[2*n+1]),i.addColorStop(y[4*n]/100,"rgba("+y[4*n+1]+","+y[4*n+2]+","+y[4*n+3]+","+g+")");a.grd=i}a.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var i=e.style,a=e.d;a&&(a._mdf||this._isFirstFrame)&&(i.da=a.dashArray,i.do=a.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(i.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.fillStyle=this.data.sc,t.fillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var i,a,n,s,o,h,l,p,c,f,d,u,m=this.globalData.fontManager.getFontByName(t.f),y=t.l,g=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,a=t.finalText.length;var v=this.data.singleShape,x=.001*t.tr*t.finalSize,b=0,k=0,_=!0,E=0;for(i=0;i<a;i+=1){for(s=(n=this.globalData.fontManager.getCharData(t.finalText[i],m.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily))&&n.data||{},g.reset(),v&&y[i].n&&(b=-x,k+=t.yOffset,k+=_?1:0,_=!1),c=(l=s.shapes?s.shapes[0].it:[]).length,g.scale(t.finalSize/100,t.finalSize/100),v&&this.applyTextPropertiesToMatrix(t,g,y[i].line,b,k),d=createSizedArray(c),p=0;p<c;p+=1){for(h=l[p].ks.k.i.length,f=l[p].ks.k,u=[],o=1;o<h;o+=1)1===o&&u.push(g.applyToX(f.v[0][0],f.v[0][1],0),g.applyToY(f.v[0][0],f.v[0][1],0)),u.push(g.applyToX(f.o[o-1][0],f.o[o-1][1],0),g.applyToY(f.o[o-1][0],f.o[o-1][1],0),g.applyToX(f.i[o][0],f.i[o][1],0),g.applyToY(f.i[o][0],f.i[o][1],0),g.applyToX(f.v[o][0],f.v[o][1],0),g.applyToY(f.v[o][0],f.v[o][1],0));u.push(g.applyToX(f.o[o-1][0],f.o[o-1][1],0),g.applyToY(f.o[o-1][0],f.o[o-1][1],0),g.applyToX(f.i[0][0],f.i[0][1],0),g.applyToY(f.i[0][0],f.i[0][1],0),g.applyToX(f.v[0][0],f.v[0][1],0),g.applyToY(f.v[0][0],f.v[0][1],0)),d[p]=u}v&&(b+=y[i].l,b+=x),this.textSpans[E]?this.textSpans[E].elem=d:this.textSpans[E]={elem:d},E+=1}},CVTextElement.prototype.renderInnerContent=function(){var t,e,r,i,a,n,s=this.canvasContext;s.font=this.values.fValue,s.lineCap="butt",s.lineJoin="miter",s.miterLimit=4,this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var o,h=this.textAnimator.renderedLetters,l=this.textProperty.currentData.l;e=l.length;var p,c,f=null,d=null,u=null;for(t=0;t<e;t+=1)if(!l[t].n){if((o=h[t])&&(this.globalData.renderer.save(),this.globalData.renderer.ctxTransform(o.p),this.globalData.renderer.ctxOpacity(o.o)),this.fill){for(o&&o.fc?f!==o.fc&&(f=o.fc,s.fillStyle=o.fc):f!==this.values.fill&&(f=this.values.fill,s.fillStyle=this.values.fill),i=(p=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<i;r+=1)for(n=(c=p[r]).length,this.globalData.canvasContext.moveTo(c[0],c[1]),a=2;a<n;a+=6)this.globalData.canvasContext.bezierCurveTo(c[a],c[a+1],c[a+2],c[a+3],c[a+4],c[a+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.fill()}if(this.stroke){for(o&&o.sw?u!==o.sw&&(u=o.sw,s.lineWidth=o.sw):u!==this.values.sWidth&&(u=this.values.sWidth,s.lineWidth=this.values.sWidth),o&&o.sc?d!==o.sc&&(d=o.sc,s.strokeStyle=o.sc):d!==this.values.stroke&&(d=this.values.stroke,s.strokeStyle=this.values.stroke),i=(p=this.textSpans[t].elem).length,this.globalData.canvasContext.beginPath(),r=0;r<i;r+=1)for(n=(c=p[r]).length,this.globalData.canvasContext.moveTo(c[0],c[1]),a=2;a<n;a+=6)this.globalData.canvasContext.bezierCurveTo(c[a],c[a+1],c[a+2],c[a+3],c[a+4],c[a+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.stroke()}o&&this.globalData.renderer.restore()}},CVEffects.prototype.renderFrame=function(){},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){var t=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var e=this.finalTransform.mat.toCSS();t.transform=e,t.webkitTransform=e}this.finalTransform._opMdf&&(t.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=HybridRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?((t=createNS("rect")).setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):((t=createTag("div")).style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)},extendPrototype([HybridRenderer,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r,i=0;i<e;)this.elements[i]&&this.elements[i].getBaseElement&&(r=this.elements[i].getBaseElement()),i+=1;r?this.layerElement.insertBefore(t,r):this.layerElement.appendChild(t)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r,i,a,n,s,o=t.sh.v,h=t.transformers,l=o._length;if(!(l<=1)){for(r=0;r<l-1;r+=1)i=this.getTransformedPoint(h,o.v[r]),a=this.getTransformedPoint(h,o.o[r]),n=this.getTransformedPoint(h,o.i[r+1]),s=this.getTransformedPoint(h,o.v[r+1]),this.checkBounds(i,a,n,s,e);o.c&&(i=this.getTransformedPoint(h,o.v[r]),a=this.getTransformedPoint(h,o.o[r]),n=this.getTransformedPoint(h,o.i[0]),s=this.getTransformedPoint(h,o.v[0]),this.checkBounds(i,a,n,s,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,i,a){this.getBoundsOfCurve(t,e,r,i);var n=this.shapeBoundingBox;a.x=bmMin(n.left,a.x),a.xMax=bmMax(n.right,a.xMax),a.y=bmMin(n.top,a.y),a.yMax=bmMax(n.bottom,a.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,i){for(var a,n,s,o,h,l,p,c=[[t[0],i[0]],[t[1],i[1]]],f=0;f<2;++f)n=6*t[f]-12*e[f]+6*r[f],a=-3*t[f]+9*e[f]-9*r[f]+3*i[f],s=3*e[f]-3*t[f],n|=0,s|=0,0==(a|=0)&&0===n||(0===a?(o=-s/n)>0&&o<1&&c[f].push(this.calculateF(o,t,e,r,i,f)):(h=n*n-4*s*a)>=0&&((l=(-n+bmSqrt(h))/(2*a))>0&&l<1&&c[f].push(this.calculateF(l,t,e,r,i,f)),(p=(-n-bmSqrt(h))/(2*a))>0&&p<1&&c[f].push(this.calculateF(p,t,e,r,i,f))));this.shapeBoundingBox.left=bmMin.apply(null,c[0]),this.shapeBoundingBox.top=bmMin.apply(null,c[1]),this.shapeBoundingBox.right=bmMax.apply(null,c[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,c[1])},HShapeElement.prototype.calculateF=function(t,e,r,i,a,n){return bmPow(1-t,3)*e[n]+3*bmPow(1-t,2)*t*r[n]+3*(1-t)*bmPow(t,2)*i[n]+bmPow(t,3)*a[n]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it&&this.calculateBoundingBox(t[r].it,e)},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var i=this.shapeCont.style,a="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";i.transform=a,i.webkitTransform=a}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var i,a,n=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",n.fClass)this.innerElem.className=n.fClass;else{e.fontFamily=n.fFamily;var s=t.fWeight,o=t.fStyle;e.fontStyle=o,e.fontWeight=s}var h,l,p,c=t.l;a=c.length;var f,d=this.mHelper,u="",m=0;for(i=0;i<a;i+=1){if(this.globalData.fontManager.chars?(this.textPaths[m]?h=this.textPaths[m]:((h=createNS("path")).setAttribute("stroke-linecap","butt"),h.setAttribute("stroke-linejoin","round"),h.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[m]?p=(l=this.textSpans[m]).children[0]:((l=createTag("div")).style.lineHeight=0,(p=createNS("svg")).appendChild(h),styleDiv(l)))):this.isMasked?h=this.textPaths[m]?this.textPaths[m]:createNS("text"):this.textSpans[m]?(l=this.textSpans[m],h=this.textPaths[m]):(styleDiv(l=createTag("span")),styleDiv(h=createTag("span")),l.appendChild(h)),this.globalData.fontManager.chars){var y,g=this.globalData.fontManager.getCharData(t.finalText[i],n.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily);if(y=g?g.data:null,d.reset(),y&&y.shapes&&(f=y.shapes[0].it,d.scale(t.finalSize/100,t.finalSize/100),u=this.createPathShape(d,f),h.setAttribute("d",u)),this.isMasked)this.innerElem.appendChild(h);else{if(this.innerElem.appendChild(l),y&&y.shapes){document.body.appendChild(p);var v=p.getBBox();p.setAttribute("width",v.width+2),p.setAttribute("height",v.height+2),p.setAttribute("viewBox",v.x-1+" "+(v.y-1)+" "+(v.width+2)+" "+(v.height+2));var x=p.style,b="translate("+(v.x-1)+"px,"+(v.y-1)+"px)";x.transform=b,x.webkitTransform=b,c[i].yOffset=v.y-1}else p.setAttribute("width",1),p.setAttribute("height",1);l.appendChild(p)}}else if(h.textContent=c[i].val,h.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(h);else{this.innerElem.appendChild(l);var k=h.style,_="translate3d(0,"+-t.finalSize/1.2+"px,0)";k.transform=_,k.webkitTransform=_}this.isMasked?this.textSpans[m]=h:this.textSpans[m]=l,this.textSpans[m].style.display="block",this.textPaths[m]=h,m+=1}for(;m<this.textSpans.length;)this.textSpans[m].style.display="none",m+=1},HTextElement.prototype.renderInnerContent=function(){var t;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var r,i,a,n,s,o=0,h=this.textAnimator.renderedLetters,l=this.textProperty.currentData.l;for(i=l.length,r=0;r<i;r+=1)l[r].n?o+=1:(n=this.textSpans[r],s=this.textPaths[r],a=h[o],o+=1,a._mdf.m&&(this.isMasked?n.setAttribute("transform",a.m):(n.style.webkitTransform=a.m,n.style.transform=a.m)),n.style.opacity=a.o,a.sw&&a._mdf.sw&&s.setAttribute("stroke-width",a.sw),a.sc&&a._mdf.sc&&s.setAttribute("stroke",a.sc),a.fc&&a._mdf.fc&&(s.setAttribute("fill",a.fc),s.style.color=a.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var p=this.innerElem.getBBox();if(this.currentBBox.w!==p.width&&(this.currentBBox.w=p.width,this.svgElement.setAttribute("width",p.width)),this.currentBBox.h!==p.height&&(this.currentBBox.h=p.height,this.svgElement.setAttribute("height",p.height)),this.currentBBox.w!==p.width+2||this.currentBBox.h!==p.height+2||this.currentBBox.x!==p.x-1||this.currentBBox.y!==p.y-1){this.currentBBox.w=p.width+2,this.currentBBox.h=p.height+2,this.currentBBox.x=p.x-1,this.currentBBox.y=p.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var c="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=c,t.webkitTransform=c}}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e,r,i,a=this.comp.threeDElements.length;for(t=0;t<a;t+=1)if("3d"===(e=this.comp.threeDElements[t]).type){r=e.perspectiveElem.style,i=e.container.style;var n=this.pe.v+"px",s="0px 0px 0px",o="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";r.perspective=n,r.webkitPerspective=n,i.transformOrigin=s,i.mozTransformOrigin=s,i.webkitTransformOrigin=s,r.transform=o,r.webkitTransform=o}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t,e,r=this._isFirstFrame;if(this.hierarchy)for(e=this.hierarchy.length,t=0;t<e;t+=1)r=this.hierarchy[t].finalTransform.mProp._mdf||r;if(r||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(t=e=this.hierarchy.length-1;t>=0;t-=1){var i=this.hierarchy[t].finalTransform.mProp;this.mat.translate(-i.p.v[0],-i.p.v[1],i.p.v[2]),this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]),this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v),this.mat.scale(1/i.s.v[0],1/i.s.v[1],1/i.s.v[2]),this.mat.translate(i.a.v[0],i.a.v[1],i.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var a;a=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var n=Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2)+Math.pow(a[2],2)),s=[a[0]/n,a[1]/n,a[2]/n],o=Math.sqrt(s[2]*s[2]+s[0]*s[0]),h=Math.atan2(s[1],o),l=Math.atan2(s[0],-s[2]);this.mat.rotateY(l).rotateX(-h)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var p=!this._prevMat.equals(this.mat);if((p||this.pe._mdf)&&this.comp.threeDElements){var c,f,d;for(e=this.comp.threeDElements.length,t=0;t<e;t+=1)if("3d"===(c=this.comp.threeDElements[t]).type){if(p){var u=this.mat.toCSS();(d=c.container.style).transform=u,d.webkitTransform=u}this.pe._mdf&&((f=c.perspectiveElem.style).perspective=this.pe.v+"px",f.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},HEffects.prototype.renderFrame=function(){};var animationManager=function(){var t={},e=[],r=0,i=0,a=0,n=!0,s=!1;function o(t){for(var r=0,a=t.target;r<i;)e[r].animation===a&&(e.splice(r,1),r-=1,i-=1,a.isPaused||p()),r+=1}function h(t,r){if(!t)return null;for(var a=0;a<i;){if(e[a].elem===t&&null!==e[a].elem)return e[a].animation;a+=1}var n=new AnimationItem;return c(n,t),n.setData(t,r),n}function l(){a+=1,u()}function p(){a-=1}function c(t,r){t.addEventListener("destroy",o),t.addEventListener("_active",l),t.addEventListener("_idle",p),e.push({elem:r,animation:t}),i+=1}function f(t){var o,h=t-r;for(o=0;o<i;o+=1)e[o].animation.advanceTime(h);r=t,a&&!s?window.requestAnimationFrame(f):n=!0}function d(t){r=t,window.requestAnimationFrame(f)}function u(){!s&&a&&n&&(window.requestAnimationFrame(d),n=!1)}return t.registerAnimation=h,t.loadAnimation=function(t){var e=new AnimationItem;return c(e,null),e.setParams(t),e},t.setSpeed=function(t,r){var a;for(a=0;a<i;a+=1)e[a].animation.setSpeed(t,r)},t.setDirection=function(t,r){var a;for(a=0;a<i;a+=1)e[a].animation.setDirection(t,r)},t.play=function(t){var r;for(r=0;r<i;r+=1)e[r].animation.play(t)},t.pause=function(t){var r;for(r=0;r<i;r+=1)e[r].animation.pause(t)},t.stop=function(t){var r;for(r=0;r<i;r+=1)e[r].animation.stop(t)},t.togglePause=function(t){var r;for(r=0;r<i;r+=1)e[r].animation.togglePause(t)},t.searchAnimations=function(t,e,r){var i,a=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),n=a.length;for(i=0;i<n;i+=1)r&&a[i].setAttribute("data-bm-type",r),h(a[i],t);if(e&&0===n){r||(r="svg");var s=document.getElementsByTagName("body")[0];s.innerText="";var o=createTag("div");o.style.width="100%",o.style.height="100%",o.setAttribute("data-bm-type",r),s.appendChild(o),h(o,t)}},t.resize=function(){var t;for(t=0;t<i;t+=1)e[t].animation.resize()},t.goToAndStop=function(t,r,a){var n;for(n=0;n<i;n+=1)e[n].animation.goToAndStop(t,r,a)},t.destroy=function(t){var r;for(r=i-1;r>=0;r-=1)e[r].animation.destroy(t)},t.freeze=function(){s=!0},t.unfreeze=function(){s=!1,u()},t.setVolume=function(t,r){var a;for(a=0;a<i;a+=1)e[a].animation.setVolume(t,r)},t.mute=function(t){var r;for(r=0;r<i;r+=1)e[r].animation.mute(t)},t.unmute=function(t){var r;for(r=0;r<i;r+=1)e[r].animation.unmute(t)},t.getRegisteredAnimations=function(){var t,r=e.length,i=[];for(t=0;t<r;t+=1)i.push(e[t].animation);return i},t}(),AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=subframeEnabled,this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[]};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";switch(t.animType?e=t.animType:t.renderer&&(e=t.renderer),e){case"canvas":this.renderer=new CanvasRenderer(this,t.rendererSettings);break;case"svg":this.renderer=new SVGRenderer(this,t.rendererSettings);break;default:this.renderer=new HybridRenderer(this,t.rendererSettings)}this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,""===t.loop||null===t.loop||void 0===t.loop||!0===t.loop?this.loop=!0:!1===t.loop?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay=!("autoplay"in t)||t.autoplay,this.name=t.name?t.name:"",this.autoloadSegments=!Object.prototype.hasOwnProperty.call(t,"autoloadSegments")||t.autoloadSegments,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.configAnimation(t.animationData):t.path&&(-1!==t.path.lastIndexOf("\\")?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),assetLoader.load(t.path,this.configAnimation.bind(this),function(){this.trigger("data_failed")}.bind(this)))},AnimationItem.prototype.setData=function(t,e){e&&"object"!=typeof e&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},i=t.attributes;r.path=i.getNamedItem("data-animation-path")?i.getNamedItem("data-animation-path").value:i.getNamedItem("data-bm-path")?i.getNamedItem("data-bm-path").value:i.getNamedItem("bm-path")?i.getNamedItem("bm-path").value:"",r.animType=i.getNamedItem("data-anim-type")?i.getNamedItem("data-anim-type").value:i.getNamedItem("data-bm-type")?i.getNamedItem("data-bm-type").value:i.getNamedItem("bm-type")?i.getNamedItem("bm-type").value:i.getNamedItem("data-bm-renderer")?i.getNamedItem("data-bm-renderer").value:i.getNamedItem("bm-renderer")?i.getNamedItem("bm-renderer").value:"canvas";var a=i.getNamedItem("data-anim-loop")?i.getNamedItem("data-anim-loop").value:i.getNamedItem("data-bm-loop")?i.getNamedItem("data-bm-loop").value:i.getNamedItem("bm-loop")?i.getNamedItem("bm-loop").value:"";"false"===a?r.loop=!1:"true"===a?r.loop=!0:""!==a&&(r.loop=parseInt(a,10));var n=i.getNamedItem("data-anim-autoplay")?i.getNamedItem("data-anim-autoplay").value:i.getNamedItem("data-bm-autoplay")?i.getNamedItem("data-bm-autoplay").value:!i.getNamedItem("bm-autoplay")||i.getNamedItem("bm-autoplay").value;r.autoplay="false"!==n,r.name=i.getNamedItem("data-name")?i.getNamedItem("data-name").value:i.getNamedItem("data-bm-name")?i.getNamedItem("data-bm-name").value:i.getNamedItem("bm-name")?i.getNamedItem("bm-name").value:"","false"===(i.getNamedItem("data-anim-prerender")?i.getNamedItem("data-anim-prerender").value:i.getNamedItem("data-bm-prerender")?i.getNamedItem("data-bm-prerender").value:i.getNamedItem("bm-prerender")?i.getNamedItem("bm-prerender").value:"")&&(r.prerender=!1),this.setParams(r)},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e,r,i=this.animationData.layers,a=i.length,n=t.layers,s=n.length;for(r=0;r<s;r+=1)for(e=0;e<a;){if(i[e].id===n[r].id){i[e]=n[r];break}e+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(a=t.assets.length,e=0;e<a;e+=1)this.animationData.assets.push(t.assets[e]);this.animationData.__complete=!1,dataManager.completeData(this.animationData,this.renderer.globalData.fontManager),this.renderer.includeLayers(t.layers),expressionsPlugin&&expressionsPlugin.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||0===t.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,assetLoader.load(r,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(t){this.triggerConfigError(t)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||"canvas"!==this.renderer.rendererType)&&this.imagePreloader.loadedFootages()&&(this.isLoaded=!0,dataManager.completeData(this.animationData,this.renderer.globalData.fontManager),expressionsPlugin&&expressionsPlugin.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play())},AnimationItem.prototype.resize=function(){this.renderer.updateContainerSize()},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame()},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded&&this.renderer)try{this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||!0===this.isPaused&&(this.isPaused=!1,this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||!1===this.isPaused&&(this.isPaused=!0,this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if((e=this.markers[r]).payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!r||this.name===r){var i=Number(t);if(isNaN(i)){var a=this.getMarkerData(t);a&&this.goToAndStop(a.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!r||this.name===r){var i=Number(t);if(isNaN(i)){var a=this.getMarkerData(t);a&&(a.duration?this.playSegments([a.time,a.time+a.duration],!0):this.goToAndStop(a.time,!0))}else this.goToAndStop(i,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!0!==this.isPaused&&!1!==this.isLoaded){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e<0?this.checkSegments(e%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(r=!0,e=0):(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,-1!==r&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),"object"==typeof t[0]){var r,i=t.length;for(r=0;r<i;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),t),!0)},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.renderer=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;-1!==r.indexOf("images/")&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}"enterFrame"===t&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===t&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),"complete"===t&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),"segmentStart"===t&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),"destroy"===t&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var Expressions={initExpressions:function(t){var e=0,r=[];t.renderer.compInterface=CompExpressionInterface(t.renderer),t.renderer.globalData.projectInterface.registerComposition(t.renderer),t.renderer.globalData.pushExpression=function(){e+=1},t.renderer.globalData.popExpression=function(){0==(e-=1)&&function(){var t,e=r.length;for(t=0;t<e;t+=1)r[t].release();r.length=0}()},t.renderer.globalData.registerExpressionProperty=function(t){-1===r.indexOf(t)&&r.push(t)}}};expressionsPlugin=Expressions;var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null;function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return"number"===t||"boolean"===t||"string"===t||e instanceof Number}function $bm_neg(t){var e=typeof t;if("number"===e||"boolean"===e||t instanceof Number)return-t;if($bm_isInstanceOfArray(t)){var r,i=t.length,a=[];for(r=0;r<i;r+=1)a[r]=-t[r];return a}return t.propType?t.v:-t}var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=typeof t,i=typeof e;if("string"===r||"string"===i)return t+e;if(isNumerable(r,t)&&isNumerable(i,e))return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return(t=t.slice(0))[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var a=0,n=t.length,s=e.length,o=[];a<n||a<s;)("number"==typeof t[a]||t[a]instanceof Number)&&("number"==typeof e[a]||e[a]instanceof Number)?o[a]=t[a]+e[a]:o[a]=void 0===e[a]?t[a]:t[a]||e[a],a+=1;return o}return 0}var add=sum;function sub(t,e){var r=typeof t,i=typeof e;if(isNumerable(r,t)&&isNumerable(i,e))return"string"===r&&(t=parseInt(t,10)),"string"===i&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return(t=t.slice(0))[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return(e=e.slice(0))[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var a=0,n=t.length,s=e.length,o=[];a<n||a<s;)("number"==typeof t[a]||t[a]instanceof Number)&&("number"==typeof e[a]||e[a]instanceof Number)?o[a]=t[a]-e[a]:o[a]=void 0===e[a]?t[a]:t[a]||e[a],a+=1;return o}return 0}function mul(t,e){var r,i,a,n=typeof t,s=typeof e;if(isNumerable(n,t)&&isNumerable(s,e))return t*e;if($bm_isInstanceOfArray(t)&&isNumerable(s,e)){for(a=t.length,r=createTypedArray("float32",a),i=0;i<a;i+=1)r[i]=t[i]*e;return r}if(isNumerable(n,t)&&$bm_isInstanceOfArray(e)){for(a=e.length,r=createTypedArray("float32",a),i=0;i<a;i+=1)r[i]=t*e[i];return r}return 0}function div(t,e){var r,i,a,n=typeof t,s=typeof e;if(isNumerable(n,t)&&isNumerable(s,e))return t/e;if($bm_isInstanceOfArray(t)&&isNumerable(s,e)){for(a=t.length,r=createTypedArray("float32",a),i=0;i<a;i+=1)r[i]=t[i]/e;return r}if(isNumerable(n,t)&&$bm_isInstanceOfArray(e)){for(a=e.length,r=createTypedArray("float32",a),i=0;i<a;i+=1)r[i]=t/e[i];return r}return 0}function mod(t,e){return"string"==typeof t&&(t=parseInt(t,10)),"string"==typeof e&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var i=r;r=e,e=i}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if("number"==typeof t||t instanceof Number)return e=e||0,Math.abs(t-e);var r;e||(e=helperLengthArray);var i=Math.min(t.length,e.length),a=0;for(r=0;r<i;r+=1)a+=Math.pow(e[r]-t[r],2);return Math.sqrt(a)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e,r,i=t[0],a=t[1],n=t[2],s=Math.max(i,a,n),o=Math.min(i,a,n),h=(s+o)/2;if(s===o)e=0,r=0;else{var l=s-o;switch(r=h>.5?l/(2-s-o):l/(s+o),s){case i:e=(a-n)/l+(a<n?6:0);break;case a:e=(n-i)/l+2;break;case n:e=(i-a)/l+4}e/=6}return[e,r,h,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e,r,i,a=t[0],n=t[1],s=t[2];if(0===n)e=s,i=s,r=s;else{var o=s<.5?s*(1+n):s+n-s*n,h=2*s-o;e=hue2rgb(h,o,a+1/3),r=hue2rgb(h,o,a),i=hue2rgb(h,o,a-1/3)}return[e,r,i,t[3]]}function linear(t,e,r,i,a){if(void 0!==i&&void 0!==a||(i=e,a=r,e=0,r=1),r<e){var n=r;r=e,e=n}if(t<=e)return i;if(t>=r)return a;var s,o=r===e?0:(t-e)/(r-e);if(!i.length)return i+(a-i)*o;var h=i.length,l=createTypedArray("float32",h);for(s=0;s<h;s+=1)l[s]=i[s]+(a[s]-i[s])*o;return l}function random(t,e){if(void 0===e&&(void 0===t?(t=0,e=1):(e=t,t=void 0)),e.length){var r,i=e.length;t||(t=createTypedArray("float32",i));var a=createTypedArray("float32",i),n=BMMath.random();for(r=0;r<i;r+=1)a[r]=t[r]+n*(e[r]-t[r]);return a}return void 0===t&&(t=0),t+BMMath.random()*(e-t)}function createPath(t,e,r,i){var a,n=t.length,s=shapePool.newElement();s.setPathData(!!i,n);var o,h,l=[0,0];for(a=0;a<n;a+=1)o=e&&e[a]?e[a]:l,h=r&&r[a]?r[a]:l,s.setTripleAt(t[a][0],t[a][1],h[0]+t[a][0],h[1]+t[a][1],o[0]+t[a][0],o[1]+t[a][1],a,!0);return s}function initiateExpression(elem,data,property){var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(t,e){var r,i,a=this.pv.length?this.pv.length:1,n=createTypedArray("float32",a),s=Math.floor(5*time);for(r=0,i=0;r<s;){for(i=0;i<a;i+=1)n[i]+=-e+2*e*BMMath.random();r+=1}var o=5*time,h=o-Math.floor(o),l=createTypedArray("float32",a);if(a>1){for(i=0;i<a;i+=1)l[i]=this.pv[i]+n[i]+(-e+2*e*BMMath.random())*h;return l}return this.pv+n[0]+(-e+2*e*BMMath.random())*h}.bind(this);function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue;function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],i=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads;return[-Math.atan2(r[1],r[2])/degToRads,i,0]}function easeOut(t,e,r,i,a){return applyEase(easeOutBez,t,e,r,i,a)}function easeIn(t,e,r,i,a){return applyEase(easeInBez,t,e,r,i,a)}function ease(t,e,r,i,a){return applyEase(easeInOutBez,t,e,r,i,a)}function applyEase(t,e,r,i,a,n){void 0===a?(a=r,n=i):e=(e-r)/(i-r),e>1?e=1:e<0&&(e=0);var s=t(e);if($bm_isInstanceOfArray(a)){var o,h=a.length,l=createTypedArray("float32",h);for(o=0;o<h;o+=1)l[o]=(n[o]-a[o])*s+a[o];return l}return(n-a)*s+a}function nearestKey(t){var e,r,i,a=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(r=-1,(t*=elem.comp.globalData.frameRate)<data.k[0].t)r=1,i=data.k[0].t;else{for(e=0;e<a-1;e+=1){if(t===data.k[e].t){r=e+1,i=data.k[e].t;break}if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(r=e+2,i=data.k[e+1].t):(r=e+1,i=data.k[e].t);break}}-1===r&&(r=e+1,i=data.k[e].t)}else r=0,i=0;var n={};return n.index=r,n.time=i/elem.comp.globalData.frameRate,n}function key(t){var e,r,i;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var a=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(i=a.length,r=0;r<i;r+=1)e[r]=a[r],e.value[r]=a[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return t||0===t||(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return"string"==typeof value?void 0===e?value.substring(t):value.substring(t,e):""}function substr(t,e){return"string"==typeof value?void 0===e?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=0===t?0:Math.floor(time*t)/t,value=valueAtTime(time)}var index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;function executeExpression(t){return value=t,_needsRandom&&seedRandom(randSeed),this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),(hasParent=!(!elem.hierarchy||!elem.hierarchy.length))&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,"shape"===scoped_bm_rt.propType&&(scoped_bm_rt=scoped_bm_rt.v),scoped_bm_rt)}return executeExpression}return ob.initiateExpression=initiateExpression,ob}(),expressionHelpers={searchExpressions:function(t,e,r){e.x&&(r.k=!0,r.x=!0,r.initiateExpression=ExpressionManager.initiateExpression,r.effectsSequence.push(r.initiateExpression(t,e,r).bind(r)))},getSpeedAtTime:function(t){var e=this.getValueAtTime(t),r=this.getValueAtTime(t+-.01),i=0;if(e.length){var a;for(a=0;a<e.length;a+=1)i+=Math.pow(r[a]-e[a],2);i=100*Math.sqrt(i)}else i=0;return i},getVelocityAtTime:function(t){if(void 0!==this.vel)return this.vel;var e,r,i=-.001,a=this.getValueAtTime(t),n=this.getValueAtTime(t+i);if(a.length)for(e=createTypedArray("float32",a.length),r=0;r<a.length;r+=1)e[r]=(n[r]-a[r])/i;else e=(n-a)/i;return e},getValueAtTime:function(t){return t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<t?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(t,this._cachingAtTime),this._cachingAtTime.lastFrame=t),this._cachingAtTime.value},getStaticValueAtTime:function(){return this.pv},setGroupProperty:function(t){this.propertyGroup=t}};!function(){function t(t,e,r){if(!this.k||!this.keyframes)return this.pv;t=t?t.toLowerCase():"";var i,a,n,s,o,h=this.comp.renderedFrame,l=this.keyframes,p=l[l.length-1].t;if(h<=p)return this.pv;if(r?a=p-(i=e?Math.abs(p-this.elem.comp.globalData.frameRate*e):Math.max(0,p-this.elem.data.ip)):((!e||e>l.length-1)&&(e=l.length-1),i=p-(a=l[l.length-1-e].t)),"pingpong"===t){if(Math.floor((h-a)/i)%2!=0)return this.getValueAtTime((i-(h-a)%i+a)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var c=this.getValueAtTime(a/this.comp.globalData.frameRate,0),f=this.getValueAtTime(p/this.comp.globalData.frameRate,0),d=this.getValueAtTime(((h-a)%i+a)/this.comp.globalData.frameRate,0),u=Math.floor((h-a)/i);if(this.pv.length){for(s=(o=new Array(c.length)).length,n=0;n<s;n+=1)o[n]=(f[n]-c[n])*u+d[n];return o}return(f-c)*u+d}if("continue"===t){var m=this.getValueAtTime(p/this.comp.globalData.frameRate,0),y=this.getValueAtTime((p-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(s=(o=new Array(m.length)).length,n=0;n<s;n+=1)o[n]=m[n]+(m[n]-y[n])*((h-p)/this.comp.globalData.frameRate)/5e-4;return o}return m+(h-p)/.001*(m-y)}}return this.getValueAtTime(((h-a)%i+a)/this.comp.globalData.frameRate,0)}function e(t,e,r){if(!this.k)return this.pv;t=t?t.toLowerCase():"";var i,a,n,s,o,h=this.comp.renderedFrame,l=this.keyframes,p=l[0].t;if(h>=p)return this.pv;if(r?a=p+(i=e?Math.abs(this.elem.comp.globalData.frameRate*e):Math.max(0,this.elem.data.op-p)):((!e||e>l.length-1)&&(e=l.length-1),i=(a=l[e].t)-p),"pingpong"===t){if(Math.floor((p-h)/i)%2==0)return this.getValueAtTime(((p-h)%i+p)/this.comp.globalData.frameRate,0)}else{if("offset"===t){var c=this.getValueAtTime(p/this.comp.globalData.frameRate,0),f=this.getValueAtTime(a/this.comp.globalData.frameRate,0),d=this.getValueAtTime((i-(p-h)%i+p)/this.comp.globalData.frameRate,0),u=Math.floor((p-h)/i)+1;if(this.pv.length){for(s=(o=new Array(c.length)).length,n=0;n<s;n+=1)o[n]=d[n]-(f[n]-c[n])*u;return o}return d-(f-c)*u}if("continue"===t){var m=this.getValueAtTime(p/this.comp.globalData.frameRate,0),y=this.getValueAtTime((p+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(s=(o=new Array(m.length)).length,n=0;n<s;n+=1)o[n]=m[n]+(m[n]-y[n])*(p-h)/.001;return o}return m+(m-y)*(p-h)/.001}}return this.getValueAtTime((i-((p-h)%i+p))/this.comp.globalData.frameRate,0)}function r(t,e){if(!this.k)return this.pv;if(t=.5*(t||.4),(e=Math.floor(e||5))<=1)return this.pv;var r,i,a=this.comp.renderedFrame/this.comp.globalData.frameRate,n=a-t,s=e>1?(a+t-n)/(e-1):1,o=0,h=0;for(r=this.pv.length?createTypedArray("float32",this.pv.length):0;o<e;){if(i=this.getValueAtTime(n+o*s),this.pv.length)for(h=0;h<this.pv.length;h+=1)r[h]+=i[h];else r+=i;o+=1}if(this.pv.length)for(h=0;h<this.pv.length;h+=1)r[h]/=e;else r/=e;return r}function i(t){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var e=this._transformCachingAtTime.v;if(e.cloneFromProps(this.pre.props),this.appliedTransformations<1){var r=this.a.getValueAtTime(t);e.translate(-r[0]*this.a.mult,-r[1]*this.a.mult,r[2]*this.a.mult)}if(this.appliedTransformations<2){var i=this.s.getValueAtTime(t);e.scale(i[0]*this.s.mult,i[1]*this.s.mult,i[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var a=this.sk.getValueAtTime(t),n=this.sa.getValueAtTime(t);e.skewFromAxis(-a*this.sk.mult,n*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var s=this.r.getValueAtTime(t);e.rotate(-s*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var o=this.rz.getValueAtTime(t),h=this.ry.getValueAtTime(t),l=this.rx.getValueAtTime(t),p=this.or.getValueAtTime(t);e.rotateZ(-o*this.rz.mult).rotateY(h*this.ry.mult).rotateX(l*this.rx.mult).rotateZ(-p[2]*this.or.mult).rotateY(p[1]*this.or.mult).rotateX(p[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var c=this.px.getValueAtTime(t),f=this.py.getValueAtTime(t);if(this.data.p.z){var d=this.pz.getValueAtTime(t);e.translate(c*this.px.mult,f*this.py.mult,-d*this.pz.mult)}else e.translate(c*this.px.mult,f*this.py.mult,0)}else{var u=this.p.getValueAtTime(t);e.translate(u[0]*this.p.mult,u[1]*this.p.mult,-u[2]*this.p.mult)}return e}function a(){return this.v.clone(new Matrix)}var n=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(t,e,r){var s=n(t,e,r);return s.dynamicProperties.length?s.getValueAtTime=i.bind(s):s.getValueAtTime=a.bind(s),s.setGroupProperty=expressionHelpers.setGroupProperty,s};var s=PropertyFactory.getProp;PropertyFactory.getProp=function(i,a,n,o,h){var l=s(i,a,n,o,h);l.kf?l.getValueAtTime=expressionHelpers.getValueAtTime.bind(l):l.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(l),l.setGroupProperty=expressionHelpers.setGroupProperty,l.loopOut=t,l.loopIn=e,l.smooth=r,l.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(l),l.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(l),l.numKeys=1===a.a?a.k.length:0,l.propertyIndex=a.ix;var p=0;return 0!==n&&(p=createTypedArray("float32",1===a.a?a.k[0].s.length:a.k.length)),l._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:p},expressionHelpers.searchExpressions(i,a,l),l.k&&h.addDynamicProperty(l),l};var o=ShapePropertyFactory.getConstructorFunction(),h=ShapePropertyFactory.getKeyframedConstructorFunction();function l(){}l.prototype={vertices:function(t,e){this.k&&this.getValue();var r,i=this.v;void 0!==e&&(i=this.getValueAtTime(e,0));var a=i._length,n=i[t],s=i.v,o=createSizedArray(a);for(r=0;r<a;r+=1)o[r]="i"===t||"o"===t?[n[r][0]-s[r][0],n[r][1]-s[r][1]]:[n[r][0],n[r][1]];return o},points:function(t){return this.vertices("v",t)},inTangents:function(t){return this.vertices("i",t)},outTangents:function(t){return this.vertices("o",t)},isClosed:function(){return this.v.c},pointOnPath:function(t,e){var r=this.v;void 0!==e&&(r=this.getValueAtTime(e,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(r));for(var i,a=this._segmentsLength,n=a.lengths,s=a.totalLength*t,o=0,h=n.length,l=0;o<h;){if(l+n[o].addedLength>s){var p=o,c=r.c&&o===h-1?0:o+1,f=(s-l)/n[o].addedLength;i=bez.getPointInSegment(r.v[p],r.v[c],r.o[p],r.i[c],f,n[o]);break}l+=n[o].addedLength,o+=1}return i||(i=r.c?[r.v[0][0],r.v[0][1]]:[r.v[r._length-1][0],r.v[r._length-1][1]]),i},vectorOnPath:function(t,e,r){1==t?t=this.v.c:0==t&&(t=.999);var i=this.pointOnPath(t,e),a=this.pointOnPath(t+.001,e),n=a[0]-i[0],s=a[1]-i[1],o=Math.sqrt(Math.pow(n,2)+Math.pow(s,2));return 0===o?[0,0]:"tangent"===r?[n/o,s/o]:[-s/o,n/o]},tangentOnPath:function(t,e){return this.vectorOnPath(t,e,"tangent")},normalOnPath:function(t,e){return this.vectorOnPath(t,e,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([l],o),extendPrototype([l],h),h.prototype.getValueAtTime=function(t){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),t*=this.elem.globalData.frameRate,(t-=this.offsetTime)!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<t?this._caching.lastIndex:0,this._cachingAtTime.lastTime=t,this.interpolateShape(t,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue},h.prototype.initiateExpression=ExpressionManager.initiateExpression;var p=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(t,e,r,i,a){var n=p(t,e,r,i,a);return n.propertyIndex=e.ix,n.lock=!1,3===r?expressionHelpers.searchExpressions(t,e.pt,n):4===r&&expressionHelpers.searchExpressions(t,e.ks,n),n.k&&t.addDynamicProperty(n),n}}(),TextProperty.prototype.getExpressionValue=function(t,e){var r=this.calculateExpression(e);if(t.t!==r){var i={};return this.copyData(i,t),i.t=r.toString(),i.__complete=!1,i}return t},TextProperty.prototype.searchProperty=function(){var t=this.searchKeyframes(),e=this.searchExpressions();return this.kf=t||e,this.kf},TextProperty.prototype.searchExpressions=function(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null};var ShapePathInterface=function(t,e,r){var i=e.sh;function a(t){return"Shape"===t||"shape"===t||"Path"===t||"path"===t||"ADBE Vector Shape"===t||2===t?a.path:null}var n=propertyGroupFactory(a,r);return i.setGroupProperty(PropertyInterface("Path",n)),Object.defineProperties(a,{path:{get:function(){return i.k&&i.getValue(),i}},shape:{get:function(){return i.k&&i.getValue(),i}},_name:{value:t.nm},ix:{value:t.ix},propertyIndex:{value:t.ix},mn:{value:t.mn},propertyGroup:{value:r}}),a},propertyGroupFactory=function(t,e){return function(r){return(r=void 0===r?1:r)<=0?t:e(r-1)}},PropertyInterface=function(t,e){var r={_name:t};return function(t){return(t=void 0===t?1:t)<=0?r:e(t-1)}},ShapeExpressionInterface=function(){function t(t,n,c){var f,d=[],u=t?t.length:0;for(f=0;f<u;f+=1)"gr"===t[f].ty?d.push(e(t[f],n[f],c)):"fl"===t[f].ty?d.push(r(t[f],n[f],c)):"st"===t[f].ty?d.push(i(t[f],n[f],c)):"tm"===t[f].ty?d.push(a(t[f],n[f],c)):"tr"===t[f].ty||("el"===t[f].ty?d.push(s(t[f],n[f],c)):"sr"===t[f].ty?d.push(o(t[f],n[f],c)):"sh"===t[f].ty?d.push(ShapePathInterface(t[f],n[f],c)):"rc"===t[f].ty?d.push(h(t[f],n[f],c)):"rd"===t[f].ty?d.push(l(t[f],n[f],c)):"rp"===t[f].ty&&d.push(p(t[f],n[f],c)));return d}function e(e,r,i){var a=function(t){switch(t){case"ADBE Vectors Group":case"Contents":case 2:return a.content;default:return a.transform}};a.propertyGroup=propertyGroupFactory(a,i);var s=function(e,r,i){var a,s=function(t){for(var e=0,r=a.length;e<r;){if(a[e]._name===t||a[e].mn===t||a[e].propertyIndex===t||a[e].ix===t||a[e].ind===t)return a[e];e+=1}return"number"==typeof t?a[t-1]:null};s.propertyGroup=propertyGroupFactory(s,i),a=t(e.it,r.it,s.propertyGroup),s.numProperties=a.length;var o=n(e.it[e.it.length-1],r.it[r.it.length-1],s.propertyGroup);return s.transform=o,s.propertyIndex=e.cix,s._name=e.nm,s}(e,r,a.propertyGroup),o=n(e.it[e.it.length-1],r.it[r.it.length-1],a.propertyGroup);return a.content=s,a.transform=o,Object.defineProperty(a,"_name",{get:function(){return e.nm}}),a.numProperties=e.np,a.propertyIndex=e.ix,a.nm=e.nm,a.mn=e.mn,a}function r(t,e,r){function i(t){return"Color"===t||"color"===t?i.color:"Opacity"===t||"opacity"===t?i.opacity:null}return Object.defineProperties(i,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",r)),e.o.setGroupProperty(PropertyInterface("Opacity",r)),i}function i(t,e,r){var i,a=propertyGroupFactory(l,r),n=propertyGroupFactory(h,a);function s(r){Object.defineProperty(h,t.d[r].nm,{get:ExpressionPropertyInterface(e.d.dataProps[r].p)})}var o=t.d?t.d.length:0,h={};for(i=0;i<o;i+=1)s(i),e.d.dataProps[i].p.setGroupProperty(n);function l(t){return"Color"===t||"color"===t?l.color:"Opacity"===t||"opacity"===t?l.opacity:"Stroke Width"===t||"stroke width"===t?l.strokeWidth:null}return Object.defineProperties(l,{color:{get:ExpressionPropertyInterface(e.c)},opacity:{get:ExpressionPropertyInterface(e.o)},strokeWidth:{get:ExpressionPropertyInterface(e.w)},dash:{get:function(){return h}},_name:{value:t.nm},mn:{value:t.mn}}),e.c.setGroupProperty(PropertyInterface("Color",a)),e.o.setGroupProperty(PropertyInterface("Opacity",a)),e.w.setGroupProperty(PropertyInterface("Stroke Width",a)),l}function a(t,e,r){function i(e){return e===t.e.ix||"End"===e||"end"===e?i.end:e===t.s.ix?i.start:e===t.o.ix?i.offset:null}var a=propertyGroupFactory(i,r);return i.propertyIndex=t.ix,e.s.setGroupProperty(PropertyInterface("Start",a)),e.e.setGroupProperty(PropertyInterface("End",a)),e.o.setGroupProperty(PropertyInterface("Offset",a)),i.propertyIndex=t.ix,i.propertyGroup=r,Object.defineProperties(i,{start:{get:ExpressionPropertyInterface(e.s)},end:{get:ExpressionPropertyInterface(e.e)},offset:{get:ExpressionPropertyInterface(e.o)},_name:{value:t.nm}}),i.mn=t.mn,i}function n(t,e,r){function i(e){return t.a.ix===e||"Anchor Point"===e?i.anchorPoint:t.o.ix===e||"Opacity"===e?i.opacity:t.p.ix===e||"Position"===e?i.position:t.r.ix===e||"Rotation"===e||"ADBE Vector Rotation"===e?i.rotation:t.s.ix===e||"Scale"===e?i.scale:t.sk&&t.sk.ix===e||"Skew"===e?i.skew:t.sa&&t.sa.ix===e||"Skew Axis"===e?i.skewAxis:null}var a=propertyGroupFactory(i,r);return e.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",a)),e.transform.mProps.p.setGroupProperty(PropertyInterface("Position",a)),e.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",a)),e.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",a)),e.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",a)),e.transform.mProps.sk&&(e.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",a)),e.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",a))),e.transform.op.setGroupProperty(PropertyInterface("Opacity",a)),Object.defineProperties(i,{opacity:{get:ExpressionPropertyInterface(e.transform.mProps.o)},position:{get:ExpressionPropertyInterface(e.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(e.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(e.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(e.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(e.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(e.transform.mProps.sa)},_name:{value:t.nm}}),i.ty="tr",i.mn=t.mn,i.propertyGroup=r,i}function s(t,e,r){function i(e){return t.p.ix===e?i.position:t.s.ix===e?i.size:null}var a=propertyGroupFactory(i,r);i.propertyIndex=t.ix;var n="tm"===e.sh.ty?e.sh.prop:e.sh;return n.s.setGroupProperty(PropertyInterface("Size",a)),n.p.setGroupProperty(PropertyInterface("Position",a)),Object.defineProperties(i,{size:{get:ExpressionPropertyInterface(n.s)},position:{get:ExpressionPropertyInterface(n.p)},_name:{value:t.nm}}),i.mn=t.mn,i}function o(t,e,r){function i(e){return t.p.ix===e?i.position:t.r.ix===e?i.rotation:t.pt.ix===e?i.points:t.or.ix===e||"ADBE Vector Star Outer Radius"===e?i.outerRadius:t.os.ix===e?i.outerRoundness:!t.ir||t.ir.ix!==e&&"ADBE Vector Star Inner Radius"!==e?t.is&&t.is.ix===e?i.innerRoundness:null:i.innerRadius}var a=propertyGroupFactory(i,r),n="tm"===e.sh.ty?e.sh.prop:e.sh;return i.propertyIndex=t.ix,n.or.setGroupProperty(PropertyInterface("Outer Radius",a)),n.os.setGroupProperty(PropertyInterface("Outer Roundness",a)),n.pt.setGroupProperty(PropertyInterface("Points",a)),n.p.setGroupProperty(PropertyInterface("Position",a)),n.r.setGroupProperty(PropertyInterface("Rotation",a)),t.ir&&(n.ir.setGroupProperty(PropertyInterface("Inner Radius",a)),n.is.setGroupProperty(PropertyInterface("Inner Roundness",a))),Object.defineProperties(i,{position:{get:ExpressionPropertyInterface(n.p)},rotation:{get:ExpressionPropertyInterface(n.r)},points:{get:ExpressionPropertyInterface(n.pt)},outerRadius:{get:ExpressionPropertyInterface(n.or)},outerRoundness:{get:ExpressionPropertyInterface(n.os)},innerRadius:{get:ExpressionPropertyInterface(n.ir)},innerRoundness:{get:ExpressionPropertyInterface(n.is)},_name:{value:t.nm}}),i.mn=t.mn,i}function h(t,e,r){function i(e){return t.p.ix===e?i.position:t.r.ix===e?i.roundness:t.s.ix===e||"Size"===e||"ADBE Vector Rect Size"===e?i.size:null}var a=propertyGroupFactory(i,r),n="tm"===e.sh.ty?e.sh.prop:e.sh;return i.propertyIndex=t.ix,n.p.setGroupProperty(PropertyInterface("Position",a)),n.s.setGroupProperty(PropertyInterface("Size",a)),n.r.setGroupProperty(PropertyInterface("Rotation",a)),Object.defineProperties(i,{position:{get:ExpressionPropertyInterface(n.p)},roundness:{get:ExpressionPropertyInterface(n.r)},size:{get:ExpressionPropertyInterface(n.s)},_name:{value:t.nm}}),i.mn=t.mn,i}function l(t,e,r){function i(e){return t.r.ix===e||"Round Corners 1"===e?i.radius:null}var a=propertyGroupFactory(i,r),n=e;return i.propertyIndex=t.ix,n.rd.setGroupProperty(PropertyInterface("Radius",a)),Object.defineProperties(i,{radius:{get:ExpressionPropertyInterface(n.rd)},_name:{value:t.nm}}),i.mn=t.mn,i}function p(t,e,r){function i(e){return t.c.ix===e||"Copies"===e?i.copies:t.o.ix===e||"Offset"===e?i.offset:null}var a=propertyGroupFactory(i,r),n=e;return i.propertyIndex=t.ix,n.c.setGroupProperty(PropertyInterface("Copies",a)),n.o.setGroupProperty(PropertyInterface("Offset",a)),Object.defineProperties(i,{copies:{get:ExpressionPropertyInterface(n.c)},offset:{get:ExpressionPropertyInterface(n.o)},_name:{value:t.nm}}),i.mn=t.mn,i}return function(e,r,i){var a;function n(t){if("number"==typeof t)return 0===(t=void 0===t?1:t)?i:a[t-1];for(var e=0,r=a.length;e<r;){if(a[e]._name===t)return a[e];e+=1}return null}return n.propertyGroup=propertyGroupFactory(n,(function(){return i})),a=t(e,r,n.propertyGroup),n.numProperties=a.length,n._name="Contents",n}}(),TextExpressionInterface=function(t){var e,r;function i(t){switch(t){case"ADBE Text Document":return i.sourceText;default:return null}}return Object.defineProperty(i,"sourceText",{get:function(){t.textProperty.getValue();var i=t.textProperty.currentData.t;return i!==e&&(t.textProperty.currentData.t=e,(r=new String(i)).value=i||new String(i)),r}}),i},LayerExpressionInterface=function(){function t(t){var e=new Matrix;return void 0!==t?this._elem.finalTransform.mProp.getValueAtTime(t).clone(e):this._elem.finalTransform.mProp.applyToMatrix(e),e}function e(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.applyPoint(r,t)}function r(t,e){var r=this.getMatrix(e);return this.applyPoint(r,t)}function i(t,e){var r=this.getMatrix(e);return r.props[12]=0,r.props[13]=0,r.props[14]=0,this.invertPoint(r,t)}function a(t,e){var r=this.getMatrix(e);return this.invertPoint(r,t)}function n(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,i=this._elem.hierarchy.length;for(r=0;r<i;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.applyToPointArray(e[0],e[1],e[2]||0)}function s(t,e){if(this._elem.hierarchy&&this._elem.hierarchy.length){var r,i=this._elem.hierarchy.length;for(r=0;r<i;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t)}return t.inversePoint(e)}function o(t){var e=new Matrix;if(e.reset(),this._elem.finalTransform.mProp.applyToMatrix(e),this._elem.hierarchy&&this._elem.hierarchy.length){var r,i=this._elem.hierarchy.length;for(r=0;r<i;r+=1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e);return e.inversePoint(t)}return e.inversePoint(t)}function h(){return[1,1,1,1]}return function(l){var p;function c(t){switch(t){case"ADBE Root Vectors Group":case"Contents":case 2:return c.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return p;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return c.effect;case"ADBE Text Properties":return c.textInterface;default:return null}}c.getMatrix=t,c.invertPoint=s,c.applyPoint=n,c.toWorld=r,c.toWorldVec=e,c.fromWorld=a,c.fromWorldVec=i,c.toComp=r,c.fromComp=o,c.sampleImage=h,c.sourceRectAtTime=l.sourceRectAtTime.bind(l),c._elem=l;var f=getDescriptor(p=TransformExpressionInterface(l.finalTransform.mProp),"anchorPoint");return Object.defineProperties(c,{hasParent:{get:function(){return l.hierarchy.length}},parent:{get:function(){return l.hierarchy[0].layerInterface}},rotation:getDescriptor(p,"rotation"),scale:getDescriptor(p,"scale"),position:getDescriptor(p,"position"),opacity:getDescriptor(p,"opacity"),anchorPoint:f,anchor_point:f,transform:{get:function(){return p}},active:{get:function(){return l.isInRange}}}),c.startTime=l.data.st,c.index=l.data.ind,c.source=l.data.refId,c.height=0===l.data.ty?l.data.h:100,c.width=0===l.data.ty?l.data.w:100,c.inPoint=l.data.ip/l.comp.globalData.frameRate,c.outPoint=l.data.op/l.comp.globalData.frameRate,c._name=l.data.nm,c.registerMaskInterface=function(t){c.mask=new MaskManagerInterface(t,l)},c.registerEffectsInterface=function(t){c.effect=t},c}}(),FootageInterface=(dataInterfaceFactory=function(t){function e(t){return"Outline"===t?e.outlineInterface():null}return e._name="Outline",e.outlineInterface=function(t){var e="",r=t.getFootageData();function i(t){if(r[t])return e=t,"object"==typeof(r=r[t])?i:r;var a=t.indexOf(e);if(-1!==a){var n=parseInt(t.substr(a+e.length),10);return"object"==typeof(r=r[n])?i:r}return""}return function(){return e="",r=t.getFootageData(),i}}(t),e},function(t){function e(t){return"Data"===t?e.dataInterface:null}return e._name="Data",e.dataInterface=dataInterfaceFactory(t),e}),dataInterfaceFactory,CompExpressionInterface=function(t){function e(e){for(var r=0,i=t.layers.length;r<i;){if(t.layers[r].nm===e||t.layers[r].ind===e)return t.elements[r].layerInterface;r+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e},TransformExpressionInterface=function(t){function e(t){switch(t){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}var r,i,a,n;return Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)}),t.p?n=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),i=ExpressionPropertyInterface(t.py),t.pz&&(a=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?n():[r(),i(),a?a():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e},ProjectInterface=function(){function t(t){this.compositions.push(t)}return function(){function e(t){for(var e=0,r=this.compositions.length;e<r;){if(this.compositions[e].data&&this.compositions[e].data.nm===t)return this.compositions[e].prepareFrame&&this.compositions[e].data.xt&&this.compositions[e].prepareFrame(this.currentFrame),this.compositions[e].compInterface;e+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),EffectsExpressionInterface=function(){function t(r,i,a,n){function s(t){for(var e=r.ef,i=0,a=e.length;i<a;){if(t===e[i].nm||t===e[i].mn||t===e[i].ix)return 5===e[i].ty?l[i]:l[i]();i+=1}throw new Error}var o,h=propertyGroupFactory(s,a),l=[],p=r.ef.length;for(o=0;o<p;o+=1)5===r.ef[o].ty?l.push(t(r.ef[o],i.effectElements[o],i.effectElements[o].propertyGroup,n)):l.push(e(i.effectElements[o],r.ef[o].ty,n,h));return"ADBE Color Control"===r.mn&&Object.defineProperty(s,"color",{get:function(){return l[0]()}}),Object.defineProperties(s,{numProperties:{get:function(){return r.np}},_name:{value:r.nm},propertyGroup:{value:h}}),s.enabled=0!==r.en,s.active=s.enabled,s}function e(t,e,r,i){var a=ExpressionPropertyInterface(t.p);return t.p.setGroupProperty&&t.p.setGroupProperty(PropertyInterface("",i)),function(){return 10===e?r.comp.compInterface(t.p.v):a()}}return{createEffectsInterface:function(e,r){if(e.effectsManager){var i,a=[],n=e.data.ef,s=e.effectsManager.effectElements.length;for(i=0;i<s;i+=1)a.push(t(n[i],e.effectsManager.effectElements[i],r,e));var o=e.data.ef||[],h=function(t){for(i=0,s=o.length;i<s;){if(t===o[i].nm||t===o[i].mn||t===o[i].ix)return a[i];i+=1}return null};return Object.defineProperty(h,"numProperties",{get:function(){return o.length}}),h}return null}}}(),MaskManagerInterface=function(){function t(t,e){this._mask=t,this._data=e}return Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(e){var r,i=createSizedArray(e.viewData.length),a=e.viewData.length;for(r=0;r<a;r+=1)i[r]=new t(e.viewData[r],e.masksProperties[r]);return function(t){for(r=0;r<a;){if(e.masksProperties[r].nm===t)return i[r];r+=1}return null}}}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(t,e,r){Object.defineProperty(t,"velocity",{get:function(){return e.getVelocityAtTime(e.comp.currentFrame)}}),t.numKeys=e.keyframes?e.keyframes.length:0,t.key=function(i){if(!t.numKeys)return 0;var a;a="s"in e.keyframes[i-1]?e.keyframes[i-1].s:"e"in e.keyframes[i-2]?e.keyframes[i-2].e:e.keyframes[i-2].s;var n="unidimensional"===r?new Number(a):Object.assign({},a);return n.time=e.keyframes[i-1].t/e.elem.comp.globalData.frameRate,n.value="unidimensional"===r?a[0]:a,n},t.valueAtTime=e.getValueAtTime,t.speedAtTime=e.getSpeedAtTime,t.velocityAtTime=e.getVelocityAtTime,t.propertyGroup=e.propertyGroup}function i(){return t}return function(a){return a?"unidimensional"===a.propType?function(e){e&&"pv"in e||(e=t);var i=1/e.mult,a=e.pv*i,n=new Number(a);return n.value=a,r(n,e,"unidimensional"),function(){return e.k&&e.getValue(),a=e.v*i,n.value!==a&&((n=new Number(a)).value=a,r(n,e,"unidimensional")),n}}(a):function(t){t&&"pv"in t||(t=e);var i=1/t.mult,a=t.data&&t.data.l||t.pv.length,n=createTypedArray("float32",a),s=createTypedArray("float32",a);return n.value=s,r(n,t,"multidimensional"),function(){t.k&&t.getValue();for(var e=0;e<a;e+=1)s[e]=t.v[e]*i,n[e]=s[e];return n}}(a):i}}(),propertyGetTextProp;function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r,i=t.ef||[];this.effectElements=[];var a,n=i.length;for(r=0;r<n;r+=1)a=new GroupEffect(i[r],e),this.effectElements.push(a)}function GroupEffect(t,e){this.init(t,e)}propertyGetTextProp=TextSelectorProp.getTextSelectorProp,TextSelectorProp.getTextSelectorProp=function(t,e,r){return 1===e.t?new TextExpressionSelectorPropFactory(t,e,r):propertyGetTextProp(t,e,r)},extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){var r;this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var i,a=this.data.ef.length,n=this.data.ef;for(r=0;r<a;r+=1){switch(i=null,n[r].ty){case 0:i=new SliderEffect(n[r],e,this);break;case 1:i=new AngleEffect(n[r],e,this);break;case 2:i=new ColorEffect(n[r],e,this);break;case 3:i=new PointEffect(n[r],e,this);break;case 4:case 7:i=new CheckboxEffect(n[r],e,this);break;case 10:i=new LayerIndexEffect(n[r],e,this);break;case 11:i=new MaskIndexEffect(n[r],e,this);break;case 5:i=new EffectsManager(n[r],e,this);break;default:i=new NoValueEffect(n[r],e,this)}i&&this.effectElements.push(i)}};var lottie={};function setLocationHref(t){locationHref=t}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(t){subframeEnabled=t}function loadAnimation(t){return!0===standalone&&(t.animationData=JSON.parse(animationData)),animationManager.loadAnimation(t)}function setQuality(t){if("string"==typeof t)switch(t){case"high":defaultCurveSegments=200;break;default:case"medium":defaultCurveSegments=50;break;case"low":defaultCurveSegments=10}else!isNaN(t)&&t>1&&(defaultCurveSegments=t);roundValues(!(defaultCurveSegments>=50))}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(t,e){"expressions"===t&&(expressionsPlugin=e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var i=e[r].split("=");if(decodeURIComponent(i[0])==t)return decodeURIComponent(i[1])}return null}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocationHref,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.__getFactory=getFactory,lottie.version="5.7.8";var standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="",queryString;if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src.replace(/^[^\?]+\??/,""),renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);return lottie},void 0===(__WEBPACK_AMD_DEFINE_RESULT__=function(){return factory(root)}.call(exports,__webpack_require__,exports,module))||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))},9591:(t,e,r)=>{"use strict";var i={};(0,r(4236).assign)(i,r(4555),r(8843),r(1619)),t.exports=i},4555:(t,e,r)=>{"use strict";var i=r(405),a=r(4236),n=r(9373),s=r(8898),o=r(2292),h=Object.prototype.toString;function l(t){if(!(this instanceof l))return new l(t);this.options=a.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new o,this.strm.avail_out=0;var r=i.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==r)throw new Error(s[r]);if(e.header&&i.deflateSetHeader(this.strm,e.header),e.dictionary){var p;if(p="string"==typeof e.dictionary?n.string2buf(e.dictionary):"[object ArrayBuffer]"===h.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(r=i.deflateSetDictionary(this.strm,p)))throw new Error(s[r]);this._dict_set=!0}}function p(t,e){var r=new l(e);if(r.push(t,!0),r.err)throw r.msg||s[r.err];return r.result}l.prototype.push=function(t,e){var r,s,o=this.strm,l=this.options.chunkSize;if(this.ended)return!1;s=e===~~e?e:!0===e?4:0,"string"==typeof t?o.input=n.string2buf(t):"[object ArrayBuffer]"===h.call(t)?o.input=new Uint8Array(t):o.input=t,o.next_in=0,o.avail_in=o.input.length;do{if(0===o.avail_out&&(o.output=new a.Buf8(l),o.next_out=0,o.avail_out=l),1!==(r=i.deflate(o,s))&&0!==r)return this.onEnd(r),this.ended=!0,!1;0!==o.avail_out&&(0!==o.avail_in||4!==s&&2!==s)||("string"===this.options.to?this.onData(n.buf2binstring(a.shrinkBuf(o.output,o.next_out))):this.onData(a.shrinkBuf(o.output,o.next_out)))}while((o.avail_in>0||0===o.avail_out)&&1!==r);return 4===s?(r=i.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==s||(this.onEnd(0),o.avail_out=0,!0)},l.prototype.onData=function(t){this.chunks.push(t)},l.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=l,e.deflate=p,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,p(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,p(t,e)}},8843:(t,e,r)=>{"use strict";var i=r(7948),a=r(4236),n=r(9373),s=r(1619),o=r(8898),h=r(2292),l=r(2401),p=Object.prototype.toString;function c(t){if(!(this instanceof c))return new c(t);this.options=a.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new h,this.strm.avail_out=0;var r=i.inflateInit2(this.strm,e.windowBits);if(r!==s.Z_OK)throw new Error(o[r]);if(this.header=new l,i.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=n.string2buf(e.dictionary):"[object ArrayBuffer]"===p.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=i.inflateSetDictionary(this.strm,e.dictionary))!==s.Z_OK))throw new Error(o[r])}function f(t,e){var r=new c(e);if(r.push(t,!0),r.err)throw r.msg||o[r.err];return r.result}c.prototype.push=function(t,e){var r,o,h,l,c,f=this.strm,d=this.options.chunkSize,u=this.options.dictionary,m=!1;if(this.ended)return!1;o=e===~~e?e:!0===e?s.Z_FINISH:s.Z_NO_FLUSH,"string"==typeof t?f.input=n.binstring2buf(t):"[object ArrayBuffer]"===p.call(t)?f.input=new Uint8Array(t):f.input=t,f.next_in=0,f.avail_in=f.input.length;do{if(0===f.avail_out&&(f.output=new a.Buf8(d),f.next_out=0,f.avail_out=d),(r=i.inflate(f,s.Z_NO_FLUSH))===s.Z_NEED_DICT&&u&&(r=i.inflateSetDictionary(this.strm,u)),r===s.Z_BUF_ERROR&&!0===m&&(r=s.Z_OK,m=!1),r!==s.Z_STREAM_END&&r!==s.Z_OK)return this.onEnd(r),this.ended=!0,!1;f.next_out&&(0!==f.avail_out&&r!==s.Z_STREAM_END&&(0!==f.avail_in||o!==s.Z_FINISH&&o!==s.Z_SYNC_FLUSH)||("string"===this.options.to?(h=n.utf8border(f.output,f.next_out),l=f.next_out-h,c=n.buf2string(f.output,h),f.next_out=l,f.avail_out=d-l,l&&a.arraySet(f.output,f.output,h,l,0),this.onData(c)):this.onData(a.shrinkBuf(f.output,f.next_out)))),0===f.avail_in&&0===f.avail_out&&(m=!0)}while((f.avail_in>0||0===f.avail_out)&&r!==s.Z_STREAM_END);return r===s.Z_STREAM_END&&(o=s.Z_FINISH),o===s.Z_FINISH?(r=i.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===s.Z_OK):o!==s.Z_SYNC_FLUSH||(this.onEnd(s.Z_OK),f.avail_out=0,!0)},c.prototype.onData=function(t){this.chunks.push(t)},c.prototype.onEnd=function(t){t===s.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=c,e.inflate=f,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,f(t,e)},e.ungzip=f},4236:(t,e)=>{"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var a in r)i(r,a)&&(t[a]=r[a])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var a={arraySet:function(t,e,r,i,a){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+i),a);else for(var n=0;n<i;n++)t[a+n]=e[r+n]},flattenChunks:function(t){var e,r,i,a,n,s;for(i=0,e=0,r=t.length;e<r;e++)i+=t[e].length;for(s=new Uint8Array(i),a=0,e=0,r=t.length;e<r;e++)n=t[e],s.set(n,a),a+=n.length;return s}},n={arraySet:function(t,e,r,i,a){for(var n=0;n<i;n++)t[a+n]=e[r+n]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,a)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,n))},e.setTyped(r)},9373:(t,e,r)=>{"use strict";var i=r(4236),a=!0,n=!0;try{String.fromCharCode.apply(null,[0])}catch(t){a=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){n=!1}for(var s=new i.Buf8(256),o=0;o<256;o++)s[o]=o>=252?6:o>=248?5:o>=240?4:o>=224?3:o>=192?2:1;function h(t,e){if(e<65534&&(t.subarray&&n||!t.subarray&&a))return String.fromCharCode.apply(null,i.shrinkBuf(t,e));for(var r="",s=0;s<e;s++)r+=String.fromCharCode(t[s]);return r}s[254]=s[254]=1,e.string2buf=function(t){var e,r,a,n,s,o=t.length,h=0;for(n=0;n<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<o&&56320==(64512&(a=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(a-56320),n++),h+=r<128?1:r<2048?2:r<65536?3:4;for(e=new i.Buf8(h),s=0,n=0;s<h;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<o&&56320==(64512&(a=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(a-56320),n++),r<128?e[s++]=r:r<2048?(e[s++]=192|r>>>6,e[s++]=128|63&r):r<65536?(e[s++]=224|r>>>12,e[s++]=128|r>>>6&63,e[s++]=128|63&r):(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63,e[s++]=128|r>>>6&63,e[s++]=128|63&r);return e},e.buf2binstring=function(t){return h(t,t.length)},e.binstring2buf=function(t){for(var e=new i.Buf8(t.length),r=0,a=e.length;r<a;r++)e[r]=t.charCodeAt(r);return e},e.buf2string=function(t,e){var r,i,a,n,o=e||t.length,l=new Array(2*o);for(i=0,r=0;r<o;)if((a=t[r++])<128)l[i++]=a;else if((n=s[a])>4)l[i++]=65533,r+=n-1;else{for(a&=2===n?31:3===n?15:7;n>1&&r<o;)a=a<<6|63&t[r++],n--;n>1?l[i++]=65533:a<65536?l[i++]=a:(a-=65536,l[i++]=55296|a>>10&1023,l[i++]=56320|1023&a)}return h(l,i)},e.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+s[t[r]]>e?r:e}},6069:t=>{"use strict";t.exports=function(t,e,r,i){for(var a=65535&t|0,n=t>>>16&65535|0,s=0;0!==r;){r-=s=r>2e3?2e3:r;do{n=n+(a=a+e[i++]|0)|0}while(--s);a%=65521,n%=65521}return a|n<<16|0}},1619:t=>{"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},2869:t=>{"use strict";var e=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();t.exports=function(t,r,i,a){var n=e,s=a+i;t^=-1;for(var o=a;o<s;o++)t=t>>>8^n[255&(t^r[o])];return-1^t}},405:(t,e,r)=>{"use strict";var i,a=r(4236),n=r(342),s=r(6069),o=r(2869),h=r(8898),l=-2,p=258,c=262,f=103,d=113,u=666;function m(t,e){return t.msg=h[e],e}function y(t){return(t<<1)-(t>4?9:0)}function g(t){for(var e=t.length;--e>=0;)t[e]=0}function v(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(a.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function x(t,e){n._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,v(t.strm)}function b(t,e){t.pending_buf[t.pending++]=e}function k(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function _(t,e){var r,i,a=t.max_chain_length,n=t.strstart,s=t.prev_length,o=t.nice_match,h=t.strstart>t.w_size-c?t.strstart-(t.w_size-c):0,l=t.window,f=t.w_mask,d=t.prev,u=t.strstart+p,m=l[n+s-1],y=l[n+s];t.prev_length>=t.good_match&&(a>>=2),o>t.lookahead&&(o=t.lookahead);do{if(l[(r=e)+s]===y&&l[r+s-1]===m&&l[r]===l[n]&&l[++r]===l[n+1]){n+=2,r++;do{}while(l[++n]===l[++r]&&l[++n]===l[++r]&&l[++n]===l[++r]&&l[++n]===l[++r]&&l[++n]===l[++r]&&l[++n]===l[++r]&&l[++n]===l[++r]&&l[++n]===l[++r]&&n<u);if(i=p-(u-n),n=u-p,i>s){if(t.match_start=e,s=i,i>=o)break;m=l[n+s-1],y=l[n+s]}}}while((e=d[e&f])>h&&0!=--a);return s<=t.lookahead?s:t.lookahead}function E(t){var e,r,i,n,h,l,p,f,d,u,m=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=m+(m-c)){a.arraySet(t.window,t.window,m,m,0),t.match_start-=m,t.strstart-=m,t.block_start-=m,e=r=t.hash_size;do{i=t.head[--e],t.head[e]=i>=m?i-m:0}while(--r);e=r=m;do{i=t.prev[--e],t.prev[e]=i>=m?i-m:0}while(--r);n+=m}if(0===t.strm.avail_in)break;if(l=t.strm,p=t.window,f=t.strstart+t.lookahead,d=n,u=void 0,(u=l.avail_in)>d&&(u=d),r=0===u?0:(l.avail_in-=u,a.arraySet(p,l.input,l.next_in,u,f),1===l.state.wrap?l.adler=s(l.adler,p,u,f):2===l.state.wrap&&(l.adler=o(l.adler,p,u,f)),l.next_in+=u,l.total_in+=u,u),t.lookahead+=r,t.lookahead+t.insert>=3)for(h=t.strstart-t.insert,t.ins_h=t.window[h],t.ins_h=(t.ins_h<<t.hash_shift^t.window[h+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[h+3-1])&t.hash_mask,t.prev[h&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=h,h++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<c&&0!==t.strm.avail_in)}function w(t,e){for(var r,i;;){if(t.lookahead<c){if(E(t),t.lookahead<c&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-c&&(t.match_length=_(t,r)),t.match_length>=3)if(i=n._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=n._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(x(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(x(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(x(t,!1),0===t.strm.avail_out)?1:2}function S(t,e){for(var r,i,a;;){if(t.lookahead<c){if(E(t),t.lookahead<c&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-c&&(t.match_length=_(t,r),t.match_length<=5&&(1===t.strategy||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){a=t.strstart+t.lookahead-3,i=n._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=a&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(x(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((i=n._tr_tally(t,0,t.window[t.strstart-1]))&&x(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=n._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(x(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(x(t,!1),0===t.strm.avail_out)?1:2}function A(t,e,r,i,a){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=a}function P(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new a.Buf16(1146),this.dyn_dtree=new a.Buf16(122),this.bl_tree=new a.Buf16(78),g(this.dyn_ltree),g(this.dyn_dtree),g(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new a.Buf16(16),this.heap=new a.Buf16(573),g(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new a.Buf16(573),g(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function C(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:d,t.adler=2===e.wrap?0:1,e.last_flush=0,n._tr_init(e),0):m(t,l)}function D(t){var e,r=C(t);return 0===r&&((e=t.state).window_size=2*e.w_size,g(e.head),e.max_lazy_match=i[e.level].max_lazy,e.good_match=i[e.level].good_length,e.nice_match=i[e.level].nice_length,e.max_chain_length=i[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0),r}function T(t,e,r,i,n,s){if(!t)return l;var o=1;if(-1===e&&(e=6),i<0?(o=0,i=-i):i>15&&(o=2,i-=16),n<1||n>9||8!==r||i<8||i>15||e<0||e>9||s<0||s>4)return m(t,l);8===i&&(i=9);var h=new P;return t.state=h,h.strm=t,h.wrap=o,h.gzhead=null,h.w_bits=i,h.w_size=1<<h.w_bits,h.w_mask=h.w_size-1,h.hash_bits=n+7,h.hash_size=1<<h.hash_bits,h.hash_mask=h.hash_size-1,h.hash_shift=~~((h.hash_bits+3-1)/3),h.window=new a.Buf8(2*h.w_size),h.head=new a.Buf16(h.hash_size),h.prev=new a.Buf16(h.w_size),h.lit_bufsize=1<<n+6,h.pending_buf_size=4*h.lit_bufsize,h.pending_buf=new a.Buf8(h.pending_buf_size),h.d_buf=1*h.lit_bufsize,h.l_buf=3*h.lit_bufsize,h.level=e,h.strategy=s,h.method=r,D(t)}i=[new A(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(E(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,x(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-c&&(x(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(x(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(x(t,!1),t.strm.avail_out),1)})),new A(4,4,8,4,w),new A(4,5,16,8,w),new A(4,6,32,32,w),new A(4,4,16,16,S),new A(8,16,32,32,S),new A(8,16,128,128,S),new A(8,32,128,256,S),new A(32,128,258,1024,S),new A(32,258,258,4096,S)],e.deflateInit=function(t,e){return T(t,e,8,15,8,0)},e.deflateInit2=T,e.deflateReset=D,e.deflateResetKeep=C,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?l:(t.state.gzhead=e,0):l},e.deflate=function(t,e){var r,a,s,h;if(!t||!t.state||e>5||e<0)return t?m(t,l):l;if(a=t.state,!t.output||!t.input&&0!==t.avail_in||a.status===u&&4!==e)return m(t,0===t.avail_out?-5:l);if(a.strm=t,r=a.last_flush,a.last_flush=e,42===a.status)if(2===a.wrap)t.adler=0,b(a,31),b(a,139),b(a,8),a.gzhead?(b(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),b(a,255&a.gzhead.time),b(a,a.gzhead.time>>8&255),b(a,a.gzhead.time>>16&255),b(a,a.gzhead.time>>24&255),b(a,9===a.level?2:a.strategy>=2||a.level<2?4:0),b(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(b(a,255&a.gzhead.extra.length),b(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(t.adler=o(t.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69):(b(a,0),b(a,0),b(a,0),b(a,0),b(a,0),b(a,9===a.level?2:a.strategy>=2||a.level<2?4:0),b(a,3),a.status=d);else{var c=8+(a.w_bits-8<<4)<<8;c|=(a.strategy>=2||a.level<2?0:a.level<6?1:6===a.level?2:3)<<6,0!==a.strstart&&(c|=32),c+=31-c%31,a.status=d,k(a,c),0!==a.strstart&&(k(a,t.adler>>>16),k(a,65535&t.adler)),t.adler=1}if(69===a.status)if(a.gzhead.extra){for(s=a.pending;a.gzindex<(65535&a.gzhead.extra.length)&&(a.pending!==a.pending_buf_size||(a.gzhead.hcrc&&a.pending>s&&(t.adler=o(t.adler,a.pending_buf,a.pending-s,s)),v(t),s=a.pending,a.pending!==a.pending_buf_size));)b(a,255&a.gzhead.extra[a.gzindex]),a.gzindex++;a.gzhead.hcrc&&a.pending>s&&(t.adler=o(t.adler,a.pending_buf,a.pending-s,s)),a.gzindex===a.gzhead.extra.length&&(a.gzindex=0,a.status=73)}else a.status=73;if(73===a.status)if(a.gzhead.name){s=a.pending;do{if(a.pending===a.pending_buf_size&&(a.gzhead.hcrc&&a.pending>s&&(t.adler=o(t.adler,a.pending_buf,a.pending-s,s)),v(t),s=a.pending,a.pending===a.pending_buf_size)){h=1;break}h=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,b(a,h)}while(0!==h);a.gzhead.hcrc&&a.pending>s&&(t.adler=o(t.adler,a.pending_buf,a.pending-s,s)),0===h&&(a.gzindex=0,a.status=91)}else a.status=91;if(91===a.status)if(a.gzhead.comment){s=a.pending;do{if(a.pending===a.pending_buf_size&&(a.gzhead.hcrc&&a.pending>s&&(t.adler=o(t.adler,a.pending_buf,a.pending-s,s)),v(t),s=a.pending,a.pending===a.pending_buf_size)){h=1;break}h=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,b(a,h)}while(0!==h);a.gzhead.hcrc&&a.pending>s&&(t.adler=o(t.adler,a.pending_buf,a.pending-s,s)),0===h&&(a.status=f)}else a.status=f;if(a.status===f&&(a.gzhead.hcrc?(a.pending+2>a.pending_buf_size&&v(t),a.pending+2<=a.pending_buf_size&&(b(a,255&t.adler),b(a,t.adler>>8&255),t.adler=0,a.status=d)):a.status=d),0!==a.pending){if(v(t),0===t.avail_out)return a.last_flush=-1,0}else if(0===t.avail_in&&y(e)<=y(r)&&4!==e)return m(t,-5);if(a.status===u&&0!==t.avail_in)return m(t,-5);if(0!==t.avail_in||0!==a.lookahead||0!==e&&a.status!==u){var _=2===a.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(E(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,r=n._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(x(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(x(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(x(t,!1),0===t.strm.avail_out)?1:2}(a,e):3===a.strategy?function(t,e){for(var r,i,a,s,o=t.window;;){if(t.lookahead<=p){if(E(t),t.lookahead<=p&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(i=o[a=t.strstart-1])===o[++a]&&i===o[++a]&&i===o[++a]){s=t.strstart+p;do{}while(i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&i===o[++a]&&a<s);t.match_length=p-(s-a),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=n._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=n._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(x(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(x(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(x(t,!1),0===t.strm.avail_out)?1:2}(a,e):i[a.level].func(a,e);if(3!==_&&4!==_||(a.status=u),1===_||3===_)return 0===t.avail_out&&(a.last_flush=-1),0;if(2===_&&(1===e?n._tr_align(a):5!==e&&(n._tr_stored_block(a,0,0,!1),3===e&&(g(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),v(t),0===t.avail_out))return a.last_flush=-1,0}return 4!==e?0:a.wrap<=0?1:(2===a.wrap?(b(a,255&t.adler),b(a,t.adler>>8&255),b(a,t.adler>>16&255),b(a,t.adler>>24&255),b(a,255&t.total_in),b(a,t.total_in>>8&255),b(a,t.total_in>>16&255),b(a,t.total_in>>24&255)):(k(a,t.adler>>>16),k(a,65535&t.adler)),v(t),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?0:1)},e.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&e!==f&&e!==d&&e!==u?m(t,l):(t.state=null,e===d?m(t,-3):0):l},e.deflateSetDictionary=function(t,e){var r,i,n,o,h,p,c,f,d=e.length;if(!t||!t.state)return l;if(2===(o=(r=t.state).wrap)||1===o&&42!==r.status||r.lookahead)return l;for(1===o&&(t.adler=s(t.adler,e,d,0)),r.wrap=0,d>=r.w_size&&(0===o&&(g(r.head),r.strstart=0,r.block_start=0,r.insert=0),f=new a.Buf8(r.w_size),a.arraySet(f,e,d-r.w_size,r.w_size,0),e=f,d=r.w_size),h=t.avail_in,p=t.next_in,c=t.input,t.avail_in=d,t.next_in=0,t.input=e,E(r);r.lookahead>=3;){i=r.strstart,n=r.lookahead-2;do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[i+3-1])&r.hash_mask,r.prev[i&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=i,i++}while(--n);r.strstart=i,r.lookahead=2,E(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,t.next_in=p,t.input=c,t.avail_in=h,r.wrap=o,0},e.deflateInfo="pako deflate (from Nodeca project)"},2401:t=>{"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},4264:t=>{"use strict";t.exports=function(t,e){var r,i,a,n,s,o,h,l,p,c,f,d,u,m,y,g,v,x,b,k,_,E,w,S,A;r=t.state,i=t.next_in,S=t.input,a=i+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),o=n+(t.avail_out-257),h=r.dmax,l=r.wsize,p=r.whave,c=r.wnext,f=r.window,d=r.hold,u=r.bits,m=r.lencode,y=r.distcode,g=(1<<r.lenbits)-1,v=(1<<r.distbits)-1;t:do{u<15&&(d+=S[i++]<<u,u+=8,d+=S[i++]<<u,u+=8),x=m[d&g];e:for(;;){if(d>>>=b=x>>>24,u-=b,0==(b=x>>>16&255))A[n++]=65535&x;else{if(!(16&b)){if(0==(64&b)){x=m[(65535&x)+(d&(1<<b)-1)];continue e}if(32&b){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}k=65535&x,(b&=15)&&(u<b&&(d+=S[i++]<<u,u+=8),k+=d&(1<<b)-1,d>>>=b,u-=b),u<15&&(d+=S[i++]<<u,u+=8,d+=S[i++]<<u,u+=8),x=y[d&v];r:for(;;){if(d>>>=b=x>>>24,u-=b,!(16&(b=x>>>16&255))){if(0==(64&b)){x=y[(65535&x)+(d&(1<<b)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(_=65535&x,u<(b&=15)&&(d+=S[i++]<<u,(u+=8)<b&&(d+=S[i++]<<u,u+=8)),(_+=d&(1<<b)-1)>h){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=b,u-=b,_>(b=n-s)){if((b=_-b)>p&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(E=0,w=f,0===c){if(E+=l-b,b<k){k-=b;do{A[n++]=f[E++]}while(--b);E=n-_,w=A}}else if(c<b){if(E+=l+c-b,(b-=c)<k){k-=b;do{A[n++]=f[E++]}while(--b);if(E=0,c<k){k-=b=c;do{A[n++]=f[E++]}while(--b);E=n-_,w=A}}}else if(E+=c-b,b<k){k-=b;do{A[n++]=f[E++]}while(--b);E=n-_,w=A}for(;k>2;)A[n++]=w[E++],A[n++]=w[E++],A[n++]=w[E++],k-=3;k&&(A[n++]=w[E++],k>1&&(A[n++]=w[E++]))}else{E=n-_;do{A[n++]=A[E++],A[n++]=A[E++],A[n++]=A[E++],k-=3}while(k>2);k&&(A[n++]=A[E++],k>1&&(A[n++]=A[E++]))}break}}break}}while(i<a&&n<o);i-=k=u>>3,d&=(1<<(u-=k<<3))-1,t.next_in=i,t.next_out=n,t.avail_in=i<a?a-i+5:5-(i-a),t.avail_out=n<o?o-n+257:257-(n-o),r.hold=d,r.bits=u}},7948:(t,e,r)=>{"use strict";var i=r(4236),a=r(6069),n=r(2869),s=r(4264),o=r(9241),h=-2,l=12,p=30;function c(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new i.Buf16(320),this.work=new i.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function d(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new i.Buf32(852),e.distcode=e.distdyn=new i.Buf32(592),e.sane=1,e.back=-1,0):h}function u(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,d(t)):h}function m(t,e){var r,i;return t&&t.state?(i=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?h:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,u(t))):h}function y(t,e){var r,i;return t?(i=new f,t.state=i,i.window=null,0!==(r=m(t,e))&&(t.state=null),r):h}var g,v,x=!0;function b(t){if(x){var e;for(g=new i.Buf32(512),v=new i.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(o(1,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;o(2,t.lens,0,32,v,0,t.work,{bits:5}),x=!1}t.lencode=g,t.lenbits=9,t.distcode=v,t.distbits=5}function k(t,e,r,a){var n,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new i.Buf8(s.wsize)),a>=s.wsize?(i.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):((n=s.wsize-s.wnext)>a&&(n=a),i.arraySet(s.window,e,r-a,n,s.wnext),(a-=n)?(i.arraySet(s.window,e,r-a,a,0),s.wnext=a,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}e.inflateReset=u,e.inflateReset2=m,e.inflateResetKeep=d,e.inflateInit=function(t){return y(t,15)},e.inflateInit2=y,e.inflate=function(t,e){var r,f,d,u,m,y,g,v,x,_,E,w,S,A,P,C,D,T,F,M,I,B,V,R,L=0,G=new i.Buf8(4),z=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return h;(r=t.state).mode===l&&(r.mode=13),m=t.next_out,d=t.output,g=t.avail_out,u=t.next_in,f=t.input,y=t.avail_in,v=r.hold,x=r.bits,_=y,E=g,B=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;x<16;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(2&r.wrap&&35615===v){r.check=0,G[0]=255&v,G[1]=v>>>8&255,r.check=n(r.check,G,2,0),v=0,x=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&v)<<8)+(v>>8))%31){t.msg="incorrect header check",r.mode=p;break}if(8!=(15&v)){t.msg="unknown compression method",r.mode=p;break}if(x-=4,I=8+(15&(v>>>=4)),0===r.wbits)r.wbits=I;else if(I>r.wbits){t.msg="invalid window size",r.mode=p;break}r.dmax=1<<I,t.adler=r.check=1,r.mode=512&v?10:l,v=0,x=0;break;case 2:for(;x<16;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(r.flags=v,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=p;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=p;break}r.head&&(r.head.text=v>>8&1),512&r.flags&&(G[0]=255&v,G[1]=v>>>8&255,r.check=n(r.check,G,2,0)),v=0,x=0,r.mode=3;case 3:for(;x<32;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}r.head&&(r.head.time=v),512&r.flags&&(G[0]=255&v,G[1]=v>>>8&255,G[2]=v>>>16&255,G[3]=v>>>24&255,r.check=n(r.check,G,4,0)),v=0,x=0,r.mode=4;case 4:for(;x<16;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}r.head&&(r.head.xflags=255&v,r.head.os=v>>8),512&r.flags&&(G[0]=255&v,G[1]=v>>>8&255,r.check=n(r.check,G,2,0)),v=0,x=0,r.mode=5;case 5:if(1024&r.flags){for(;x<16;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}r.length=v,r.head&&(r.head.extra_len=v),512&r.flags&&(G[0]=255&v,G[1]=v>>>8&255,r.check=n(r.check,G,2,0)),v=0,x=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((w=r.length)>y&&(w=y),w&&(r.head&&(I=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),i.arraySet(r.head.extra,f,u,w,I)),512&r.flags&&(r.check=n(r.check,f,w,u)),y-=w,u+=w,r.length-=w),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===y)break t;w=0;do{I=f[u+w++],r.head&&I&&r.length<65536&&(r.head.name+=String.fromCharCode(I))}while(I&&w<y);if(512&r.flags&&(r.check=n(r.check,f,w,u)),y-=w,u+=w,I)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===y)break t;w=0;do{I=f[u+w++],r.head&&I&&r.length<65536&&(r.head.comment+=String.fromCharCode(I))}while(I&&w<y);if(512&r.flags&&(r.check=n(r.check,f,w,u)),y-=w,u+=w,I)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;x<16;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(v!==(65535&r.check)){t.msg="header crc mismatch",r.mode=p;break}v=0,x=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=l;break;case 10:for(;x<32;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}t.adler=r.check=c(v),v=0,x=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=m,t.avail_out=g,t.next_in=u,t.avail_in=y,r.hold=v,r.bits=x,2;t.adler=r.check=1,r.mode=l;case l:if(5===e||6===e)break t;case 13:if(r.last){v>>>=7&x,x-=7&x,r.mode=27;break}for(;x<3;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}switch(r.last=1&v,x-=1,3&(v>>>=1)){case 0:r.mode=14;break;case 1:if(b(r),r.mode=20,6===e){v>>>=2,x-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=p}v>>>=2,x-=2;break;case 14:for(v>>>=7&x,x-=7&x;x<32;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if((65535&v)!=(v>>>16^65535)){t.msg="invalid stored block lengths",r.mode=p;break}if(r.length=65535&v,v=0,x=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(w=r.length){if(w>y&&(w=y),w>g&&(w=g),0===w)break t;i.arraySet(d,f,u,w,m),y-=w,u+=w,g-=w,m+=w,r.length-=w;break}r.mode=l;break;case 17:for(;x<14;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(r.nlen=257+(31&v),v>>>=5,x-=5,r.ndist=1+(31&v),v>>>=5,x-=5,r.ncode=4+(15&v),v>>>=4,x-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=p;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;x<3;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}r.lens[z[r.have++]]=7&v,v>>>=3,x-=3}for(;r.have<19;)r.lens[z[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,V={bits:r.lenbits},B=o(0,r.lens,0,19,r.lencode,0,r.work,V),r.lenbits=V.bits,B){t.msg="invalid code lengths set",r.mode=p;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;C=(L=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,D=65535&L,!((P=L>>>24)<=x);){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(D<16)v>>>=P,x-=P,r.lens[r.have++]=D;else{if(16===D){for(R=P+2;x<R;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(v>>>=P,x-=P,0===r.have){t.msg="invalid bit length repeat",r.mode=p;break}I=r.lens[r.have-1],w=3+(3&v),v>>>=2,x-=2}else if(17===D){for(R=P+3;x<R;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}x-=P,I=0,w=3+(7&(v>>>=P)),v>>>=3,x-=3}else{for(R=P+7;x<R;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}x-=P,I=0,w=11+(127&(v>>>=P)),v>>>=7,x-=7}if(r.have+w>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=p;break}for(;w--;)r.lens[r.have++]=I}}if(r.mode===p)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=p;break}if(r.lenbits=9,V={bits:r.lenbits},B=o(1,r.lens,0,r.nlen,r.lencode,0,r.work,V),r.lenbits=V.bits,B){t.msg="invalid literal/lengths set",r.mode=p;break}if(r.distbits=6,r.distcode=r.distdyn,V={bits:r.distbits},B=o(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,V),r.distbits=V.bits,B){t.msg="invalid distances set",r.mode=p;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(y>=6&&g>=258){t.next_out=m,t.avail_out=g,t.next_in=u,t.avail_in=y,r.hold=v,r.bits=x,s(t,E),m=t.next_out,d=t.output,g=t.avail_out,u=t.next_in,f=t.input,y=t.avail_in,v=r.hold,x=r.bits,r.mode===l&&(r.back=-1);break}for(r.back=0;C=(L=r.lencode[v&(1<<r.lenbits)-1])>>>16&255,D=65535&L,!((P=L>>>24)<=x);){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(C&&0==(240&C)){for(T=P,F=C,M=D;C=(L=r.lencode[M+((v&(1<<T+F)-1)>>T)])>>>16&255,D=65535&L,!(T+(P=L>>>24)<=x);){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}v>>>=T,x-=T,r.back+=T}if(v>>>=P,x-=P,r.back+=P,r.length=D,0===C){r.mode=26;break}if(32&C){r.back=-1,r.mode=l;break}if(64&C){t.msg="invalid literal/length code",r.mode=p;break}r.extra=15&C,r.mode=22;case 22:if(r.extra){for(R=r.extra;x<R;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}r.length+=v&(1<<r.extra)-1,v>>>=r.extra,x-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;C=(L=r.distcode[v&(1<<r.distbits)-1])>>>16&255,D=65535&L,!((P=L>>>24)<=x);){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(0==(240&C)){for(T=P,F=C,M=D;C=(L=r.distcode[M+((v&(1<<T+F)-1)>>T)])>>>16&255,D=65535&L,!(T+(P=L>>>24)<=x);){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}v>>>=T,x-=T,r.back+=T}if(v>>>=P,x-=P,r.back+=P,64&C){t.msg="invalid distance code",r.mode=p;break}r.offset=D,r.extra=15&C,r.mode=24;case 24:if(r.extra){for(R=r.extra;x<R;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}r.offset+=v&(1<<r.extra)-1,v>>>=r.extra,x-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=p;break}r.mode=25;case 25:if(0===g)break t;if(w=E-g,r.offset>w){if((w=r.offset-w)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=p;break}w>r.wnext?(w-=r.wnext,S=r.wsize-w):S=r.wnext-w,w>r.length&&(w=r.length),A=r.window}else A=d,S=m-r.offset,w=r.length;w>g&&(w=g),g-=w,r.length-=w;do{d[m++]=A[S++]}while(--w);0===r.length&&(r.mode=21);break;case 26:if(0===g)break t;d[m++]=r.length,g--,r.mode=21;break;case 27:if(r.wrap){for(;x<32;){if(0===y)break t;y--,v|=f[u++]<<x,x+=8}if(E-=g,t.total_out+=E,r.total+=E,E&&(t.adler=r.check=r.flags?n(r.check,d,E,m-E):a(r.check,d,E,m-E)),E=g,(r.flags?v:c(v))!==r.check){t.msg="incorrect data check",r.mode=p;break}v=0,x=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;x<32;){if(0===y)break t;y--,v+=f[u++]<<x,x+=8}if(v!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=p;break}v=0,x=0}r.mode=29;case 29:B=1;break t;case p:B=-3;break t;case 31:return-4;case 32:default:return h}return t.next_out=m,t.avail_out=g,t.next_in=u,t.avail_in=y,r.hold=v,r.bits=x,(r.wsize||E!==t.avail_out&&r.mode<p&&(r.mode<27||4!==e))&&k(t,t.output,t.next_out,E-t.avail_out)?(r.mode=31,-4):(_-=t.avail_in,E-=t.avail_out,t.total_in+=_,t.total_out+=E,r.total+=E,r.wrap&&E&&(t.adler=r.check=r.flags?n(r.check,d,E,t.next_out-E):a(r.check,d,E,t.next_out-E)),t.data_type=r.bits+(r.last?64:0)+(r.mode===l?128:0)+(20===r.mode||15===r.mode?256:0),(0===_&&0===E||4===e)&&0===B&&(B=-5),B)},e.inflateEnd=function(t){if(!t||!t.state)return h;var e=t.state;return e.window&&(e.window=null),t.state=null,0},e.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?h:(r.head=e,e.done=!1,0):h},e.inflateSetDictionary=function(t,e){var r,i=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?h:11===r.mode&&a(1,e,i,0)!==r.check?-3:k(t,e,i,i)?(r.mode=31,-4):(r.havedict=1,0):h},e.inflateInfo="pako inflate (from Nodeca project)"},9241:(t,e,r)=>{"use strict";var i=r(4236),a=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],n=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],s=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],o=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,r,h,l,p,c,f){var d,u,m,y,g,v,x,b,k,_=f.bits,E=0,w=0,S=0,A=0,P=0,C=0,D=0,T=0,F=0,M=0,I=null,B=0,V=new i.Buf16(16),R=new i.Buf16(16),L=null,G=0;for(E=0;E<=15;E++)V[E]=0;for(w=0;w<h;w++)V[e[r+w]]++;for(P=_,A=15;A>=1&&0===V[A];A--);if(P>A&&(P=A),0===A)return l[p++]=20971520,l[p++]=20971520,f.bits=1,0;for(S=1;S<A&&0===V[S];S++);for(P<S&&(P=S),T=1,E=1;E<=15;E++)if(T<<=1,(T-=V[E])<0)return-1;if(T>0&&(0===t||1!==A))return-1;for(R[1]=0,E=1;E<15;E++)R[E+1]=R[E]+V[E];for(w=0;w<h;w++)0!==e[r+w]&&(c[R[e[r+w]]++]=w);if(0===t?(I=L=c,v=19):1===t?(I=a,B-=257,L=n,G-=257,v=256):(I=s,L=o,v=-1),M=0,w=0,E=S,g=p,C=P,D=0,m=-1,y=(F=1<<P)-1,1===t&&F>852||2===t&&F>592)return 1;for(;;){x=E-D,c[w]<v?(b=0,k=c[w]):c[w]>v?(b=L[G+c[w]],k=I[B+c[w]]):(b=96,k=0),d=1<<E-D,S=u=1<<C;do{l[g+(M>>D)+(u-=d)]=x<<24|b<<16|k|0}while(0!==u);for(d=1<<E-1;M&d;)d>>=1;if(0!==d?(M&=d-1,M+=d):M=0,w++,0==--V[E]){if(E===A)break;E=e[r+c[w]]}if(E>P&&(M&y)!==m){for(0===D&&(D=P),g+=S,T=1<<(C=E-D);C+D<A&&!((T-=V[C+D])<=0);)C++,T<<=1;if(F+=1<<C,1===t&&F>852||2===t&&F>592)return 1;l[m=M&y]=P<<24|C<<16|g-p|0}}return 0!==M&&(l[g+M]=E-D<<24|64<<16|0),f.bits=P,0}},8898:t=>{"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},342:(t,e,r)=>{"use strict";var i=r(4236);function a(t){for(var e=t.length;--e>=0;)t[e]=0}var n=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],s=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],h=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],l=new Array(576);a(l);var p=new Array(60);a(p);var c=new Array(512);a(c);var f=new Array(256);a(f);var d=new Array(29);a(d);var u,m,y,g=new Array(30);function v(t,e,r,i,a){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=a,this.has_stree=t&&t.length}function x(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function b(t){return t<256?c[t]:c[256+(t>>>7)]}function k(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function _(t,e,r){t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,k(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function E(t,e,r){_(t,r[2*e],r[2*e+1])}function w(t,e){var r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1}function S(t,e,r){var i,a,n=new Array(16),s=0;for(i=1;i<=15;i++)n[i]=s=s+r[i-1]<<1;for(a=0;a<=e;a++){var o=t[2*a+1];0!==o&&(t[2*a]=w(n[o]++,o))}}function A(t){var e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function P(t){t.bi_valid>8?k(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function C(t,e,r,i){var a=2*e,n=2*r;return t[a]<t[n]||t[a]===t[n]&&i[e]<=i[r]}function D(t,e,r){for(var i=t.heap[r],a=r<<1;a<=t.heap_len&&(a<t.heap_len&&C(e,t.heap[a+1],t.heap[a],t.depth)&&a++,!C(e,i,t.heap[a],t.depth));)t.heap[r]=t.heap[a],r=a,a<<=1;t.heap[r]=i}function T(t,e,r){var i,a,o,h,l=0;if(0!==t.last_lit)do{i=t.pending_buf[t.d_buf+2*l]<<8|t.pending_buf[t.d_buf+2*l+1],a=t.pending_buf[t.l_buf+l],l++,0===i?E(t,a,e):(E(t,(o=f[a])+256+1,e),0!==(h=n[o])&&_(t,a-=d[o],h),E(t,o=b(--i),r),0!==(h=s[o])&&_(t,i-=g[o],h))}while(l<t.last_lit);E(t,256,e)}function F(t,e){var r,i,a,n=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,h=e.stat_desc.elems,l=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<h;r++)0!==n[2*r]?(t.heap[++t.heap_len]=l=r,t.depth[r]=0):n[2*r+1]=0;for(;t.heap_len<2;)n[2*(a=t.heap[++t.heap_len]=l<2?++l:0)]=1,t.depth[a]=0,t.opt_len--,o&&(t.static_len-=s[2*a+1]);for(e.max_code=l,r=t.heap_len>>1;r>=1;r--)D(t,n,r);a=h;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],D(t,n,1),i=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=i,n[2*a]=n[2*r]+n[2*i],t.depth[a]=(t.depth[r]>=t.depth[i]?t.depth[r]:t.depth[i])+1,n[2*r+1]=n[2*i+1]=a,t.heap[1]=a++,D(t,n,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,i,a,n,s,o,h=e.dyn_tree,l=e.max_code,p=e.stat_desc.static_tree,c=e.stat_desc.has_stree,f=e.stat_desc.extra_bits,d=e.stat_desc.extra_base,u=e.stat_desc.max_length,m=0;for(n=0;n<=15;n++)t.bl_count[n]=0;for(h[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<573;r++)(n=h[2*h[2*(i=t.heap[r])+1]+1]+1)>u&&(n=u,m++),h[2*i+1]=n,i>l||(t.bl_count[n]++,s=0,i>=d&&(s=f[i-d]),o=h[2*i],t.opt_len+=o*(n+s),c&&(t.static_len+=o*(p[2*i+1]+s)));if(0!==m){do{for(n=u-1;0===t.bl_count[n];)n--;t.bl_count[n]--,t.bl_count[n+1]+=2,t.bl_count[u]--,m-=2}while(m>0);for(n=u;0!==n;n--)for(i=t.bl_count[n];0!==i;)(a=t.heap[--r])>l||(h[2*a+1]!==n&&(t.opt_len+=(n-h[2*a+1])*h[2*a],h[2*a+1]=n),i--)}}(t,e),S(n,l,t.bl_count)}function M(t,e,r){var i,a,n=-1,s=e[1],o=0,h=7,l=4;for(0===s&&(h=138,l=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)a=s,s=e[2*(i+1)+1],++o<h&&a===s||(o<l?t.bl_tree[2*a]+=o:0!==a?(a!==n&&t.bl_tree[2*a]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,n=a,0===s?(h=138,l=3):a===s?(h=6,l=3):(h=7,l=4))}function I(t,e,r){var i,a,n=-1,s=e[1],o=0,h=7,l=4;for(0===s&&(h=138,l=3),i=0;i<=r;i++)if(a=s,s=e[2*(i+1)+1],!(++o<h&&a===s)){if(o<l)do{E(t,a,t.bl_tree)}while(0!=--o);else 0!==a?(a!==n&&(E(t,a,t.bl_tree),o--),E(t,16,t.bl_tree),_(t,o-3,2)):o<=10?(E(t,17,t.bl_tree),_(t,o-3,3)):(E(t,18,t.bl_tree),_(t,o-11,7));o=0,n=a,0===s?(h=138,l=3):a===s?(h=6,l=3):(h=7,l=4)}}a(g);var B=!1;function V(t,e,r,a){_(t,0+(a?1:0),3),function(t,e,r,a){P(t),k(t,r),k(t,~r),i.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r)}e._tr_init=function(t){B||(function(){var t,e,r,i,a,h=new Array(16);for(r=0,i=0;i<28;i++)for(d[i]=r,t=0;t<1<<n[i];t++)f[r++]=i;for(f[r-1]=i,a=0,i=0;i<16;i++)for(g[i]=a,t=0;t<1<<s[i];t++)c[a++]=i;for(a>>=7;i<30;i++)for(g[i]=a<<7,t=0;t<1<<s[i]-7;t++)c[256+a++]=i;for(e=0;e<=15;e++)h[e]=0;for(t=0;t<=143;)l[2*t+1]=8,t++,h[8]++;for(;t<=255;)l[2*t+1]=9,t++,h[9]++;for(;t<=279;)l[2*t+1]=7,t++,h[7]++;for(;t<=287;)l[2*t+1]=8,t++,h[8]++;for(S(l,287,h),t=0;t<30;t++)p[2*t+1]=5,p[2*t]=w(t,5);u=new v(l,n,257,286,15),m=new v(p,s,0,30,15),y=new v(new Array(0),o,0,19,7)}(),B=!0),t.l_desc=new x(t.dyn_ltree,u),t.d_desc=new x(t.dyn_dtree,m),t.bl_desc=new x(t.bl_tree,y),t.bi_buf=0,t.bi_valid=0,A(t)},e._tr_stored_block=V,e._tr_flush_block=function(t,e,r,i){var a,n,s=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),F(t,t.l_desc),F(t,t.d_desc),s=function(t){var e;for(M(t,t.dyn_ltree,t.l_desc.max_code),M(t,t.dyn_dtree,t.d_desc.max_code),F(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*h[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),a=t.opt_len+3+7>>>3,(n=t.static_len+3+7>>>3)<=a&&(a=n)):a=n=r+5,r+4<=a&&-1!==e?V(t,e,r,i):4===t.strategy||n===a?(_(t,2+(i?1:0),3),T(t,l,p)):(_(t,4+(i?1:0),3),function(t,e,r,i){var a;for(_(t,e-257,5),_(t,r-1,5),_(t,i-4,4),a=0;a<i;a++)_(t,t.bl_tree[2*h[a]+1],3);I(t,t.dyn_ltree,e-1),I(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),T(t,t.dyn_ltree,t.dyn_dtree)),A(t),i&&P(t)},e._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(f[r]+256+1)]++,t.dyn_dtree[2*b(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){_(t,2,3),E(t,256,l),function(t){16===t.bi_valid?(k(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},2292:t=>{"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},8212:t=>{"use strict";"undefined"==typeof process||!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?t.exports={nextTick:function(t,e,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var a,n,s=arguments.length;switch(s){case 0:case 1:return process.nextTick(t);case 2:return process.nextTick((function(){t.call(null,e)}));case 3:return process.nextTick((function(){t.call(null,e,r)}));case 4:return process.nextTick((function(){t.call(null,e,r,i)}));default:for(a=new Array(s-1),n=0;n<a.length;)a[n++]=arguments[n];return process.nextTick((function(){t.apply(null,a)}))}}}:t.exports=process},6753:(t,e,r)=>{"use strict";var i=r(8212),a=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=c;var n=Object.create(r(6497));n.inherits=r(4378);var s=r(9481),o=r(4229);n.inherits(c,s);for(var h=a(o.prototype),l=0;l<h.length;l++){var p=h[l];c.prototype[p]||(c.prototype[p]=o.prototype[p])}function c(t){if(!(this instanceof c))return new c(t);s.call(this,t),o.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",f)}function f(){this.allowHalfOpen||this._writableState.ended||i.nextTick(d,this)}function d(t){t.end()}Object.defineProperty(c.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(c.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),c.prototype._destroy=function(t,e){this.push(null),this.end(),i.nextTick(e,t)}},2725:(t,e,r)=>{"use strict";t.exports=n;var i=r(4605),a=Object.create(r(6497));function n(t){if(!(this instanceof n))return new n(t);i.call(this,t)}a.inherits=r(4378),a.inherits(n,i),n.prototype._transform=function(t,e,r){r(null,t)}},9481:(t,e,r)=>{"use strict";var i=r(8212);t.exports=v;var a,n=r(5826);v.ReadableState=g,r(7187).EventEmitter;var s=function(t,e){return t.listeners(e).length},o=r(9740),h=r(3545).Buffer,l=r.g.Uint8Array||function(){},p=Object.create(r(6497));p.inherits=r(4378);var c=r(4616),f=void 0;f=c&&c.debuglog?c.debuglog("stream"):function(){};var d,u=r(5057),m=r(1195);p.inherits(v,o);var y=["error","close","destroy","pause","resume"];function g(t,e){t=t||{};var i=e instanceof(a=a||r(6753));this.objectMode=!!t.objectMode,i&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var n=t.highWaterMark,s=t.readableHighWaterMark,o=this.objectMode?16:16384;this.highWaterMark=n||0===n?n:i&&(s||0===s)?s:o,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new u,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=r(2553).s),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function v(t){if(a=a||r(6753),!(this instanceof v))return new v(t);this._readableState=new g(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),o.call(this)}function x(t,e,r,i,a){var n,s=t._readableState;return null===e?(s.reading=!1,function(t,e){if(!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,E(t)}}(t,s)):(a||(n=function(t,e){var r,i;return i=e,h.isBuffer(i)||i instanceof l||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(s,e)),n?t.emit("error",n):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===h.prototype||(e=function(t){return h.from(t)}(e)),i?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):b(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?b(t,s,e,!1):S(t,s)):b(t,s,e,!1))):i||(s.reading=!1)),function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function b(t,e,r,i){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,i?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&E(t)),S(t,e)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),v.prototype.destroy=m.destroy,v.prototype._undestroy=m.undestroy,v.prototype._destroy=function(t,e){this.push(null),e(t)},v.prototype.push=function(t,e){var r,i=this._readableState;return i.objectMode?r=!0:"string"==typeof t&&((e=e||i.defaultEncoding)!==i.encoding&&(t=h.from(t,e),e=""),r=!0),x(this,t,e,!1,r)},v.prototype.unshift=function(t){return x(this,t,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(t){return d||(d=r(2553).s),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var k=8388608;function _(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=k?t=k:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function E(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(f("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(w,t):w(t))}function w(t){f("emit readable"),t.emit("readable"),D(t)}function S(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(A,t,e))}function A(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(f("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1}function P(t){f("readable nexttick read 0"),t.read(0)}function C(t,e){e.reading||(f("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),D(t),e.flowing&&!e.reading&&t.read(0)}function D(t){var e=t._readableState;for(f("flow",e.flowing);e.flowing&&null!==t.read(););}function T(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var i;return t<e.head.data.length?(i=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):i=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,i=1,a=r.data;for(t-=a.length;r=r.next;){var n=r.data,s=t>n.length?n.length:t;if(s===n.length?a+=n:a+=n.slice(0,t),0==(t-=s)){s===n.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=n.slice(s));break}++i}return e.length-=i,a}(t,e):function(t,e){var r=h.allocUnsafe(t),i=e.head,a=1;for(i.data.copy(r),t-=i.data.length;i=i.next;){var n=i.data,s=t>n.length?n.length:t;if(n.copy(r,r.length-t,0,s),0==(t-=s)){s===n.length?(++a,i.next?e.head=i.next:e.head=e.tail=null):(e.head=i,i.data=n.slice(s));break}++a}return e.length-=a,r}(t,e),i}(t,e.buffer,e.decoder),r);var r}function F(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(M,e,t))}function M(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function I(t,e){for(var r=0,i=t.length;r<i;r++)if(t[r]===e)return r;return-1}v.prototype.read=function(t){f("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return f("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?F(this):E(this),null;if(0===(t=_(t,e))&&e.ended)return 0===e.length&&F(this),null;var i,a=e.needReadable;return f("need readable",a),(0===e.length||e.length-t<e.highWaterMark)&&f("length less than watermark",a=!0),e.ended||e.reading?f("reading or ended",a=!1):a&&(f("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=_(r,e))),null===(i=t>0?T(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&F(this)),null!==i&&this.emit("data",i),i},v.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(t,e){var r=this,a=this._readableState;switch(a.pipesCount){case 0:a.pipes=t;break;case 1:a.pipes=[a.pipes,t];break;default:a.pipes.push(t)}a.pipesCount+=1,f("pipe count=%d opts=%j",a.pipesCount,e);var o=e&&!1===e.end||t===process.stdout||t===process.stderr?g:h;function h(){f("onend"),t.end()}a.endEmitted?i.nextTick(o):r.once("end",o),t.on("unpipe",(function e(i,n){f("onunpipe"),i===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,f("cleanup"),t.removeListener("close",m),t.removeListener("finish",y),t.removeListener("drain",l),t.removeListener("error",u),t.removeListener("unpipe",e),r.removeListener("end",h),r.removeListener("end",g),r.removeListener("data",d),p=!0,!a.awaitDrain||t._writableState&&!t._writableState.needDrain||l())}));var l=function(t){return function(){var e=t._readableState;f("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,D(t))}}(r);t.on("drain",l);var p=!1,c=!1;function d(e){f("ondata"),c=!1,!1!==t.write(e)||c||((1===a.pipesCount&&a.pipes===t||a.pipesCount>1&&-1!==I(a.pipes,t))&&!p&&(f("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,c=!0),r.pause())}function u(e){f("onerror",e),g(),t.removeListener("error",u),0===s(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",y),g()}function y(){f("onfinish"),t.removeListener("close",m),g()}function g(){f("unpipe"),r.unpipe(t)}return r.on("data",d),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events.error?n(t._events.error)?t._events.error.unshift(r):t._events.error=[r,t._events.error]:t.on(e,r)}(t,"error",u),t.once("close",m),t.once("finish",y),t.emit("pipe",r),a.flowing||(f("pipe resume"),r.resume()),t},v.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var i=e.pipes,a=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var n=0;n<a;n++)i[n].emit("unpipe",this,r);return this}var s=I(e.pipes,t);return-1===s||(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},v.prototype.on=function(t,e){var r=o.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var a=this._readableState;a.endEmitted||a.readableListening||(a.readableListening=a.needReadable=!0,a.emittedReadable=!1,a.reading?a.length&&E(this):i.nextTick(P,this))}return r},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var t=this._readableState;return t.flowing||(f("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(C,t,e))}(this,t)),this},v.prototype.pause=function(){return f("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(f("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(t){var e=this,r=this._readableState,i=!1;for(var a in t.on("end",(function(){if(f("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(a){f("wrapped data"),r.decoder&&(a=r.decoder.write(a)),r.objectMode&&null==a||(r.objectMode||a&&a.length)&&(e.push(a)||(i=!0,t.pause()))})),t)void 0===this[a]&&"function"==typeof t[a]&&(this[a]=function(e){return function(){return t[e].apply(t,arguments)}}(a));for(var n=0;n<y.length;n++)t.on(y[n],this.emit.bind(this,y[n]));return this._read=function(e){f("wrapped _read",e),i&&(i=!1,t.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=T},4605:(t,e,r)=>{"use strict";t.exports=s;var i=r(6753),a=Object.create(r(6497));function n(t,e){var r=this._transformState;r.transforming=!1;var i=r.writecb;if(!i)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),i(t);var a=this._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&this._read(a.highWaterMark)}function s(t){if(!(this instanceof s))return new s(t);i.call(this,t),this._transformState={afterTransform:n.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",o)}function o(){var t=this;"function"==typeof this._flush?this._flush((function(e,r){h(t,e,r)})):h(this,null,null)}function h(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}a.inherits=r(4378),a.inherits(s,i),s.prototype.push=function(t,e){return this._transformState.needTransform=!1,i.prototype.push.call(this,t,e)},s.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},s.prototype._write=function(t,e,r){var i=this._transformState;if(i.writecb=r,i.writechunk=t,i.writeencoding=e,!i.transforming){var a=this._readableState;(i.needTransform||a.needReadable||a.length<a.highWaterMark)&&this._read(a.highWaterMark)}},s.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},s.prototype._destroy=function(t,e){var r=this;i.prototype._destroy.call(this,t,(function(t){e(t),r.emit("close")}))}},4229:(t,e,r)=>{"use strict";var i=r(8212);function a(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var i=t.entry;for(t.entry=null;i;){var a=i.callback;e.pendingcb--,a(undefined),i=i.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=y;var n,s=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:i.nextTick;y.WritableState=m;var o=Object.create(r(6497));o.inherits=r(4378);var h,l={deprecate:r(1159)},p=r(9740),c=r(3545).Buffer,f=r.g.Uint8Array||function(){},d=r(1195);function u(){}function m(t,e){n=n||r(6753),t=t||{};var o=e instanceof n;this.objectMode=!!t.objectMode,o&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var h=t.highWaterMark,l=t.writableHighWaterMark,p=this.objectMode?16:16384;this.highWaterMark=h||0===h?h:o&&(l||0===l)?l:p,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var c=!1===t.decodeStrings;this.decodeStrings=!c,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,a=r.sync,n=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,a,n){--e.pendingcb,r?(i.nextTick(n,a),i.nextTick(_,t,e),t._writableState.errorEmitted=!0,t.emit("error",a)):(n(a),t._writableState.errorEmitted=!0,t.emit("error",a),_(t,e))}(t,r,a,e,n);else{var o=b(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||x(t,r),a?s(v,t,r,o,n):v(t,r,o,n)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function y(t){if(n=n||r(6753),!(h.call(y,this)||this instanceof n))return new y(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),p.call(this)}function g(t,e,r,i,a,n,s){e.writelen=i,e.writecb=s,e.writing=!0,e.sync=!0,r?t._writev(a,e.onwrite):t._write(a,n,e.onwrite),e.sync=!1}function v(t,e,r,i){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,i(),_(t,e)}function x(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var i=e.bufferedRequestCount,n=new Array(i),s=e.corkedRequestsFree;s.entry=r;for(var o=0,h=!0;r;)n[o]=r,r.isBuf||(h=!1),r=r.next,o+=1;n.allBuffers=h,g(t,e,!0,e.length,n,"",s.finish),e.pendingcb++,e.lastBufferedRequest=null,s.next?(e.corkedRequestsFree=s.next,s.next=null):e.corkedRequestsFree=new a(e),e.bufferedRequestCount=0}else{for(;r;){var l=r.chunk,p=r.encoding,c=r.callback;if(g(t,e,!1,e.objectMode?1:l.length,l,p,c),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function b(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function k(t,e){t._final((function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),_(t,e)}))}function _(t,e){var r=b(e);return r&&(function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,i.nextTick(k,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}o.inherits(y,p),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:l.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(h=Function.prototype[Symbol.hasInstance],Object.defineProperty(y,Symbol.hasInstance,{value:function(t){return!!h.call(this,t)||this===y&&t&&t._writableState instanceof m}})):h=function(t){return t instanceof this},y.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},y.prototype.write=function(t,e,r){var a,n=this._writableState,s=!1,o=!n.objectMode&&(a=t,c.isBuffer(a)||a instanceof f);return o&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(r=e,e=null),o?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=u),n.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),i.nextTick(e,r)}(this,r):(o||function(t,e,r,a){var n=!0,s=!1;return null===r?s=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(t.emit("error",s),i.nextTick(a,s),n=!1),n}(this,n,t,r))&&(n.pendingcb++,s=function(t,e,r,i,a,n){if(!r){var s=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,r)),e}(e,i,a);i!==s&&(r=!0,a="buffer",i=s)}var o=e.objectMode?1:i.length;e.length+=o;var h=e.length<e.highWaterMark;if(h||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:i,encoding:a,isBuf:r,callback:n,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else g(t,e,!1,o,i,a,n);return h}(this,n,o,t,e,r)),s},y.prototype.cork=function(){this._writableState.corked++},y.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||x(this,t))},y.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(y.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),y.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"))},y.prototype._writev=null,y.prototype.end=function(t,e,r){var a=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),a.corked&&(a.corked=1,this.uncork()),a.ending||a.finished||function(t,e,r){e.ending=!0,_(t,e),r&&(e.finished?i.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1}(this,a,r)},Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),y.prototype.destroy=d.destroy,y.prototype._undestroy=d.undestroy,y.prototype._destroy=function(t,e){this.end(),e(t)}},5057:(t,e,r)=>{"use strict";var i=r(3545).Buffer,a=r(2361);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var e,r,a=i.allocUnsafe(t>>>0),n=this.head,s=0;n;)e=a,r=s,n.data.copy(e,r),s+=n.data.length,n=n.next;return a},t}(),a&&a.inspect&&a.inspect.custom&&(t.exports.prototype[a.inspect.custom]=function(){var t=a.inspect({length:this.length});return this.constructor.name+" "+t})},1195:(t,e,r)=>{"use strict";var i=r(8212);function a(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var r=this,n=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return n||s?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||i.nextTick(a,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(i.nextTick(a,r,t),r._writableState&&(r._writableState.errorEmitted=!0)):e&&e(t)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},9740:(t,e,r)=>{t.exports=r(5925)},3545:(t,e,r)=>{var i=r(7072),a=i.Buffer;function n(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return a(t,e,r)}a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?t.exports=i:(n(i,e),e.Buffer=s),n(a,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return a(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var i=a(t);return void 0!==e?"string"==typeof r?i.fill(e,r):i.fill(e):i.fill(0),i},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return a(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i.SlowBuffer(t)}},1451:(t,e,r)=>{var i=r(4667);"disable"===process.env.READABLE_STREAM&&i?(t.exports=i,(e=t.exports=i.Readable).Readable=i.Readable,e.Writable=i.Writable,e.Duplex=i.Duplex,e.Transform=i.Transform,e.PassThrough=i.PassThrough,e.Stream=i):((e=t.exports=r(9481)).Stream=i||e,e.Readable=e,e.Writable=r(4229),e.Duplex=r(6753),e.Transform=r(4605),e.PassThrough=r(2725))},1623:t=>{"use strict";t.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},2553:(t,e,r)=>{"use strict";var i=r(396).Buffer,a=i.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function n(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(i.isEncoding===a||!a(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=h,this.end=l,e=4;break;case"utf8":this.fillLast=o,e=4;break;case"base64":this.text=p,this.end=c,e=3;break;default:return this.write=f,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function o(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function h(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var i=r.charCodeAt(r.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function p(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function c(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function f(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.s=n,n.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},n.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},n.prototype.text=function(t,e){var r=function(t,e,r){var i=e.length-1;if(i<r)return 0;var a=s(e[i]);return a>=0?(a>0&&(t.lastNeed=a-1),a):--i<r||-2===a?0:(a=s(e[i]))>=0?(a>0&&(t.lastNeed=a-2),a):--i<r||-2===a?0:(a=s(e[i]))>=0?(a>0&&(2===a?a=0:t.lastNeed=a-3),a):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var i=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,i),t.toString("utf8",e,i)},n.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},396:(t,e,r)=>{var i=r(2783),a=i.Buffer;function n(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return a(t,e,r)}a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?t.exports=i:(n(i,e),e.Buffer=s),n(a,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return a(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var i=a(t);return void 0!==e?"string"==typeof r?i.fill(e,r):i.fill(e):i.fill(0),i},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return a(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i.SlowBuffer(t)}},3684:(t,e,r)=>{"use strict";r.r(e);var i=r(6085),a={};try{a.EventTarget=(new EventTarget).constructor}catch(t){!function(t,e){var r=t.create,i=t.defineProperty,n=s.prototype;function s(){e.set(this,r(null))}function o(t,e,r){i(t,e,{configurable:!0,writable:!0,value:r})}function h(t){var e=t.options;e&&e.once&&t.target.removeEventListener(this.type,t.listener),"function"==typeof t.listener?t.listener.call(t.target,this):t.listener.handleEvent(this)}o(n,"addEventListener",(function(t,r,i){for(var a=e.get(this),n=a[t]||(a[t]=[]),s=0,o=n.length;s<o;s++)if(n[s].listener===r)return;n.push({target:this,listener:r,options:i})})),o(n,"dispatchEvent",(function(t){var r=e.get(this)[t.type];return r&&(o(t,"target",this),o(t,"currentTarget",this),r.slice(0).forEach(h,t),delete t.currentTarget,delete t.target),!0})),o(n,"removeEventListener",(function(t,r){for(var i=e.get(this),a=i[t]||(i[t]=[]),n=0,s=a.length;n<s;n++)if(a[n].listener===r)return void a.splice(n,1)})),a.EventTarget=s}(Object,new WeakMap)}const n=a.EventTarget;class s extends Event{constructor(t,e){super("convert",e),this.filesToConvert=Array.from(t)}}const o=t=>{if(t.dataTransfer&&t.dataTransfer.types)for(let e=0;e<t.dataTransfer.types.length;e++)if("Files"===t.dataTransfer.types[e])return!0;return!1};class h extends n{constructor(){super(),this.dragTimeOut=null,this.overlayElement=document.createElement("div"),this.overlayElement.id="grad-paa-overlay",document.body.appendChild(this.overlayElement),this.toggleOverlay(!1),document.body.addEventListener("dragover",(t=>this.onDrag(t))),this.overlayElement.addEventListener("drop",(t=>this.onDrop(t))),this.overlayElement.addEventListener("dragover",(t=>t.preventDefault()))}onDrag(t){o(t)&&(this.toggleOverlay(!0),null!==this.dragTimeOut&&window.clearTimeout(this.dragTimeOut),this.dragTimeOut=window.setTimeout((()=>{this.toggleOverlay(!1)}),100))}onDrop(t){t.preventDefault(),t.stopPropagation(),o(t)&&this.dispatchEvent(new s(t.dataTransfer.files))}toggleOverlay(t){t?this.overlayElement.classList.add("grad-paa-overlay--shown"):this.overlayElement.classList.remove("grad-paa-overlay--shown")}}var l=r(1248),p=r.n(l);const c=JSON.parse('{"v":"5.7.4","fr":30,"ip":0,"op":495,"w":512,"h":512,"nm":"logo_clean","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"drop1","parent":21,"sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":404,"s":[0]},{"t":405,"s":[100]}],"ix":11},"r":{"a":0,"k":-2.584,"ix":10},"p":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":405,"s":[250.014,258.681,0],"to":[0,0,0],"ti":[0,0,0]},{"t":411,"s":[252.417,308.623,0]}],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":405,"s":[{"i":[[-0.25,5.75],[0.25,-3],[-3.25,0.25],[1.625,7.375]],"o":[[0.25,-5.75],[-0.25,3],[3.25,-0.25],[-1.625,-7.375]],"v":[[81.25,-206.75],[77.875,-198.625],[77.5,-176],[81.625,-188.5]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":411,"s":[{"i":[[3.267,0.105],[0.25,-3],[-3.25,0.25],[1.625,7.375]],"o":[[-3.267,-0.105],[-0.25,3],[3.25,-0.25],[-1.625,-7.375]],"v":[[79.107,-183.99],[77.875,-198.625],[77.5,-176],[81.625,-188.5]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":412,"s":[{"i":[[3.267,0.105],[0.25,-3],[-3.25,0.25],[1.245,0.429]],"o":[[-3.267,-0.105],[-0.25,3],[3.25,-0.25],[-1.245,-0.429]],"v":[[79.107,-183.99],[69.799,-188.212],[77.5,-176],[83.335,-183.633]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":413,"s":[{"i":[[3.228,-0.517],[3.737,-4.345],[-17.384,-4.343],[1.245,0.429]],"o":[[-10.317,1.652],[-1.051,1.222],[3.162,0.79],[-1.245,-0.429]],"v":[[75.669,-184.092],[58.275,-191.886],[77.5,-176],[82.342,-182.626]],"c":true}]},{"t":415,"s":[{"i":[[3.228,-0.517],[1.769,-2.878],[-5.151,-0.123],[1.245,0.429]],"o":[[-10.317,1.652],[-1.769,2.878],[3.259,0.078],[-1.245,-0.429]],"v":[[67.319,-180.532],[55.109,-180.113],[68.983,-178.314],[73.989,-179.566]],"c":true}]}],"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,0.4,0,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":0,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Kontur 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[0.400000035763,0.666666686535,0.400000035763,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Form 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"fuss_l Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[204.147,323.461,0],"ix":2,"l":2},"a":{"a":0,"k":[204.147,323.461,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.229,1.288],[3.336,-1.502],[0,0],[0,0],[0,0]],"o":[[0,0],[-3.337,1.501],[0,0],[0,0],[0,0]],"v":[[11.595,-5.953],[7.925,-3.507],[-11.61,2.605],[-11.353,5.952],[9.28,-1.057]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[190.11,333.252],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.236,1.76],[3.584,-3.078],[6.407,-6.764]],"o":[[3.237,-1.76],[-3.584,3.077],[-0.723,-3.966]],"v":[[1.533,-5.2],[4.989,-1.62],[-6.371,5.818]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[147.939,317.302],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.402,1.411],[3.885,-2.688],[7.078,-6.056]],"o":[[3.403,-1.411],[-3.885,2.684],[-0.305,-4.021]],"v":[[1.183,-4.359],[4.247,-0.436],[-7.827,5.77]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[148.588,315.848],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 3","np":4,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.068,1.534],[0.598,1.438],[1.014,1.23],[1.198,1.104],[0,0],[-0.35,0.381],[-0.382,-0.297],[-0.676,-0.573],[-0.539,-0.723],[-0.716,-1.672],[-0.059,-1.816],[0.701,-1.82],[0.529,0.205],[-0.141,0.505]],"o":[[0.391,-1.386],[-0.083,-1.559],[-0.595,-1.434],[-0.969,-1.259],[0,0],[-0.381,-0.351],[0.333,-0.363],[0.691,0.538],[0.609,0.647],[1.183,1.345],[0.665,1.702],[0.059,1.842],[-0.203,0.529],[-0.498,-0.192],[0,0]],"v":[[1.862,8.477],[2.351,3.899],[1.358,-0.644],[-0.959,-4.726],[-4.295,-8.199],[-4.365,-8.262],[-4.421,-9.588],[-3.153,-9.694],[-1.068,-8.068],[0.774,-6.132],[3.602,-1.529],[4.659,3.813],[3.778,9.233],[2.45,9.823],[1.83,8.588]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[178.186,330.091],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 4","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.001,1.41],[0.519,1.32],[0.949,1.114],[1.134,0.989],[0,0],[-0.336,0.393],[-0.388,-0.278],[-0.649,-0.515],[-0.517,-0.677],[-0.635,-1.597],[0.026,-1.695],[0.721,-1.662],[0.516,0.232],[-0.162,0.494]],"o":[[0.406,-1.268],[-0.015,-1.434],[-0.512,-1.316],[-0.901,-1.142],[0,0],[-0.392,-0.337],[0.317,-0.37],[0.665,0.477],[0.587,0.592],[1.14,1.242],[0.59,1.622],[-0.025,1.719],[-0.232,0.516],[-0.483,-0.215],[0,0]],"v":[[1.439,7.75],[2.061,3.548],[1.286,-0.632],[-0.814,-4.362],[-3.956,-7.485],[-4.035,-7.55],[-4.136,-8.872],[-2.885,-9.026],[-0.884,-7.577],[0.889,-5.802],[3.55,-1.452],[4.358,3.593],[3.311,8.593],[1.959,9.109],[1.405,7.854]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[182.706,329.245],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 5","np":4,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.067,1.285],[0.441,1.203],[0.884,0.996],[1.069,0.875],[0,0],[-0.322,0.404],[-0.396,-0.259],[-0.623,-0.458],[-0.497,-0.628],[-0.555,-1.52],[0.11,-1.573],[0.743,-1.505],[0.502,0.259],[-0.183,0.482]],"o":[[0.421,-1.15],[0.053,-1.309],[-0.43,-1.198],[-0.835,-1.027],[0,0],[-0.404,-0.322],[0.302,-0.379],[0.637,0.417],[0.565,0.537],[1.096,1.139],[0.514,1.544],[-0.11,1.596],[-0.258,0.502],[-0.468,-0.24],[0,0]],"v":[[0.998,7.022],[1.753,3.195],[1.196,-0.622],[-0.686,-3.998],[-3.634,-6.773],[-3.722,-6.841],[-3.87,-8.156],[-2.634,-8.359],[-0.718,-7.087],[0.986,-5.473],[3.482,-1.378],[4.04,3.372],[2.825,7.953],[1.449,8.394],[0.961,7.12]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[187.247,328.396],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 6","np":4,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.134,1.161],[0.362,1.084],[0.821,0.878],[1.005,0.76],[0,0],[-0.309,0.416],[-0.405,-0.239],[-0.597,-0.399],[-0.476,-0.582],[-0.473,-1.444],[0.193,-1.452],[0.763,-1.348],[0.487,0.285],[-0.204,0.47]],"o":[[0.435,-1.033],[0.121,-1.185],[-0.347,-1.081],[-0.766,-0.912],[0,0],[-0.415,-0.306],[0.286,-0.387],[0.608,0.358],[0.543,0.483],[1.052,1.035],[0.439,1.465],[-0.195,1.474],[-0.286,0.488],[-0.453,-0.265],[0,0]],"v":[[0.538,6.294],[1.426,2.842],[1.087,-0.61],[-0.579,-3.635],[-3.332,-6.061],[-3.429,-6.133],[-3.622,-7.441],[-2.403,-7.692],[-0.571,-6.599],[1.065,-5.144],[3.393,-1.304],[3.703,3.15],[2.322,7.312],[0.922,7.679],[0.499,6.386]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[191.803,327.552],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 7","np":4,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.202,1.037],[0.284,0.966],[0.756,0.761],[0.939,0.646],[0,0],[-0.293,0.426],[-0.413,-0.217],[-0.571,-0.343],[-0.455,-0.534],[-0.392,-1.366],[0.277,-1.329],[0.785,-1.189],[0.474,0.314],[-0.225,0.459]],"o":[[0.45,-0.915],[0.19,-1.062],[-0.263,-0.965],[-0.699,-0.796],[0,0],[-0.426,-0.293],[0.271,-0.396],[0.577,0.303],[0.522,0.427],[1.009,0.932],[0.363,1.388],[-0.28,1.354],[-0.313,0.475],[-0.437,-0.289],[0,0]],"v":[[0.061,5.566],[1.081,2.49],[0.96,-0.6],[-0.488,-3.272],[-3.047,-5.35],[-3.153,-5.423],[-3.393,-6.726],[-2.189,-7.027],[-0.442,-6.109],[1.125,-4.816],[3.287,-1.231],[3.348,2.927],[1.799,6.67],[0.375,6.962],[0.019,5.65]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[196.379,326.707],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 8","np":4,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[4.282,4.852],[5.153,-0.554],[-0.417,-3.226],[-8.514,4.728],[0,0]],"o":[[0,0],[-4.282,-4.852],[-5.154,0.554],[0.417,3.225],[4.872,-2.706],[0,0]],"v":[[15.909,6.294],[11.745,-8.619],[-3.102,-13.586],[-15.609,0.882],[-2.382,-0.773],[11.062,14.141]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[154.639,321.87],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 9","np":4,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.54,-0.749],[6.714,2.703],[-5.906,-4.025],[-6.326,1.722],[2.315,3.395]],"o":[[0,0],[-1.877,6.04],[7.041,-5.029],[3.988,-1.085],[-1.052,-1.54]],"v":[[12.91,-10.123],[-18.574,-10.303],[-9.278,10.871],[14.371,0.778],[18.135,-8.391]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[182.674,331.325],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 10","np":4,"cix":2,"bm":0,"ix":10,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.52,-5.633],[3.302,-3.902],[2.357,1.788],[-8.514,4.728],[0,0]],"o":[[0,0],[1.52,5.635],[-3.302,3.901],[-2.358,-1.789],[4.872,-2.706],[0,0]],"v":[[2.155,-14.806],[11.812,-4.736],[7.568,9.461],[-10.975,13.019],[-2.314,3.109],[-4.233,-12.413]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[166.483,339.517],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 11","np":4,"cix":2,"bm":0,"ix":11,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[5.916,3.511],[-7.59,-0.511],[-1.057,-0.116],[-5.891,-7.466],[1.19,-4.06],[-6.291,0],[0,0],[0.835,5.224],[-0.606,6.035],[7.229,-1.818]],"o":[[0,0],[-26.588,-12.167],[1.162,0.077],[3.15,0.345],[1.878,5.658],[-1.354,4.62],[7.457,0],[0,0],[10.898,-3.319],[0.415,-4.116],[0,0]],"v":[[3.672,-7.681],[-2.783,-17.793],[-28.593,2.415],[-15.51,-2.187],[-5.744,10.122],[-17.975,23.926],[-6.469,29.96],[8.21,24.857],[12.868,13.962],[34.928,2.731],[28.954,-8.996]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[168.957,326.36],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 12","np":4,"cix":2,"bm":0,"ix":12,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.601,3.165],[-0.233,-4.278],[0.499,-6.297]],"o":[[0.6,-3.164],[0.232,4.278],[-3.597,-2.279]],"v":[[-2.429,-4.282],[2.549,-3.921],[1.541,6.893]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[137.245,337.864],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 13","np":4,"cix":2,"bm":0,"ix":13,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.981,3.066],[0.29,-4.276],[1.261,-6.188]],"o":[[0.981,-3.067],[-0.289,4.274],[-3.293,-2.7]],"v":[[-2.102,-4.133],[2.794,-3.167],[0.479,7.443]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[136.601,337.075],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 14","np":4,"cix":2,"bm":0,"ix":14,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.169,-0.199],[-0.042,-0.051],[0,0],[1.172,1.074],[3.309,0.766],[1.557,-0.906],[0.822,-1.85],[0.713,-1.948],[0,0],[0.397,-0.883],[0.246,-0.275],[0.308,-0.007],[0.615,0.44],[0.452,0.679],[0.448,0.992],[0.509,2.519],[-0.094,1.779],[-0.511,0.728],[-2.549,1.691],[0,0],[2.368,-3.378],[0.109,-2.054],[-0.474,-2.354],[-0.997,-2.206],[-0.553,-0.833],[-0.687,-0.492],[-1.028,0.025],[-0.93,1.042],[-0.438,0.974],[-0.507,1.387],[0,0],[-1.204,2.709],[-0.643,0.374],[-0.999,-0.231],[-2.224,-2.04],[-0.641,-0.707]],"o":[[0.085,0.101],[0,0],[-0.688,-0.759],[-2.283,-2.094],[-1.469,-0.34],[-1.426,0.83],[-1.247,2.805],[0,0],[-0.507,1.383],[-0.409,0.908],[-0.397,0.446],[-0.241,0.006],[-0.234,-0.166],[-0.435,-0.655],[-0.897,-1.984],[-0.434,-2.154],[0.097,-1.822],[1.528,-2.182],[0,0],[-5.014,1.921],[-1.01,1.441],[-0.112,2.099],[0.555,2.747],[0.499,1.103],[0.539,0.809],[1.076,0.769],[1.248,-0.03],[0.581,-0.651],[0.449,-0.998],[0,0],[0.715,-1.95],[0.673,-1.512],[0.631,-0.367],[2.462,0.57],[1.083,0.992],[0.32,0.353]],"v":[[16.177,7.982],[16.368,8.21],[17.769,5.018],[14.928,2.158],[6.105,-3.185],[1.41,-2.633],[-1.908,1.479],[-4.762,8.675],[-4.773,8.708],[-6.107,12.099],[-7.082,13.809],[-8.111,14.359],[-9.375,13.862],[-10.426,12.634],[-11.768,10.143],[-13.988,3.164],[-14.512,-2.862],[-13.526,-6.708],[-7.433,-12.803],[-5.11,-17.54],[-16.104,-8.523],[-17.657,-3.029],[-17.076,3.789],[-14.638,11.445],[-13.048,14.384],[-11.205,16.432],[-8.037,17.516],[-4.734,15.914],[-3.236,13.396],[-1.816,9.794],[-1.812,9.783],[0.97,2.763],[2.993,0.096],[5.396,-0.109],[12.801,4.486],[15.437,7.141]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[146.556,332.526],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 15","np":4,"cix":2,"bm":0,"ix":15,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[8.174,0],[3.234,-4.615],[-0.909,-4.506],[-1.841,-1.316],[-0.634,0.014],[-0.663,0.744],[-1.014,2.771],[-1.23,2.768],[-1.035,0.602],[-1.233,-0.285],[0,0],[-1.839,-3.891],[0,0]],"o":[[-8.175,0],[-1.521,2.169],[1.063,5.269],[0.845,0.604],[0.778,-0.018],[0.826,-0.925],[0.715,-1.954],[0.747,-1.681],[1.094,-0.637],[5.772,1.335],[0,0],[0,0],[0,0]],"v":[[-0.734,-16.615],[-17.641,-6.952],[-18.357,4.139],[-13.116,15.811],[-10.9,16.6],[-8.734,15.523],[-6.12,9.913],[-3.295,2.784],[-0.624,-0.605],[2.924,-0.984],[14.826,7.951],[19.266,15.069],[15.035,-5.559]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[149.382,331.863],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 16","np":4,"cix":2,"bm":0,"ix":16,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"fuss_r Konturen","parent":11,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.235,0.423],[-0.306,-3.652],[0,0],[0,0],[0,0]],"o":[[0,0],[0.307,3.652],[0,0],[0,0],[0,0]],"v":[[-0.314,-12.94],[-0.671,-8.538],[3.465,11.543],[0.417,12.94],[-3.465,-8.538]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[308.303,393.105],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.57,3.01],[0.116,-3.932],[0.302,-8.208]],"o":[[-0.571,-3.011],[-0.117,3.931],[3.014,-1.636]],"v":[[1.886,-2.785],[-2.339,-3.109],[-1.276,7.042]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[344.985,422.36],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.334,0.402],[-1.636,0.839],[-1.807,0.242],[-1.749,-0.382],[-0.858,-0.219],[-0.807,-0.343],[0.204,-0.477],[0.458,0.152],[0,0],[1.571,0.239],[1.539,-0.173],[1.401,-0.682],[1.019,-1.014],[0,0],[0.398,0.403]],"o":[[1.248,-1.495],[1.615,-0.829],[1.807,-0.183],[0.893,0.122],[0.828,0.315],[0.475,0.203],[-0.193,0.452],[0,0],[-1.543,-0.515],[-1.565,-0.291],[-1.547,0.173],[-1.372,0.684],[0,0],[-0.403,0.399],[-0.376,-0.38]],"v":[[-10.109,1.736],[-5.805,-1.66],[-0.629,-3.322],[4.762,-3.076],[7.345,-2.401],[9.777,-1.362],[10.272,-0.13],[9.118,0.394],[9.024,0.363],[4.374,-0.877],[-0.311,-0.929],[-4.76,0.402],[-8.52,3.048],[-8.599,3.127],[-10.05,3.121]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[317.881,401.648],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 3","np":4,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.311,0.416],[-1.489,0.855],[-1.703,0.268],[-1.637,-0.394],[-0.8,-0.228],[-0.742,-0.349],[0.225,-0.467],[0.447,0.166],[0,0],[1.434,0.235],[1.398,-0.189],[1.259,-0.68],[0.91,-0.968],[0,0],[0.416,0.383]],"o":[[1.102,-1.437],[1.467,-0.844],[1.701,-0.217],[0.842,0.127],[0.766,0.32],[0.465,0.223],[-0.21,0.439],[0,0],[-1.414,-0.513],[-1.433,-0.291],[-1.405,0.184],[-1.232,0.683],[0,0],[-0.383,0.416],[-0.389,-0.359]],"v":[[-9.358,1.782],[-5.501,-1.557],[-0.704,-3.293],[4.384,-3.071],[6.794,-2.377],[9.031,-1.326],[9.467,-0.077],[8.302,0.395],[8.204,0.358],[3.954,-0.881],[-0.321,-0.913],[-4.346,0.432],[-7.714,3.012],[-7.787,3.092],[-9.234,3.152]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[316.461,397.329],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 4","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.285,0.428],[-1.341,0.87],[-1.597,0.297],[-1.524,-0.408],[-0.743,-0.236],[-0.676,-0.352],[0.244,-0.455],[0.436,0.181],[0,0],[1.3,0.235],[1.254,-0.205],[1.116,-0.68],[0.8,-0.924],[0,0],[0.432,0.363]],"o":[[0.954,-1.38],[1.321,-0.858],[1.597,-0.252],[0.79,0.131],[0.703,0.325],[0.453,0.244],[-0.229,0.425],[0,0],[-1.282,-0.512],[-1.299,-0.292],[-1.263,0.196],[-1.091,0.681],[0,0],[-0.363,0.432],[-0.403,-0.341]],"v":[[-8.605,1.828],[-5.195,-1.455],[-0.777,-3.266],[4.008,-3.065],[6.245,-2.354],[8.286,-1.292],[8.666,-0.026],[7.49,0.396],[7.385,0.352],[3.533,-0.886],[-0.329,-0.898],[-3.931,0.462],[-6.907,2.977],[-6.972,3.056],[-8.414,3.182]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[315.04,393.01],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 5","np":4,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.263,0.439],[-1.193,0.884],[-1.492,0.326],[-1.415,-0.42],[-0.686,-0.242],[-0.61,-0.355],[0.264,-0.442],[0.427,0.196],[0,0],[1.168,0.231],[1.11,-0.221],[0.975,-0.68],[0.69,-0.88],[0,0],[0.448,0.344]],"o":[[0.806,-1.321],[1.173,-0.873],[1.489,-0.284],[0.74,0.135],[0.639,0.329],[0.441,0.266],[-0.245,0.413],[0,0],[-1.151,-0.512],[-1.165,-0.294],[-1.123,0.207],[-0.949,0.682],[0,0],[-0.343,0.451],[-0.416,-0.32]],"v":[[-7.851,1.873],[-4.887,-1.353],[-0.848,-3.24],[3.633,-3.061],[5.697,-2.332],[7.541,-1.259],[7.864,0.023],[6.676,0.396],[6.568,0.346],[3.113,-0.891],[-0.335,-0.884],[-3.514,0.491],[-6.098,2.94],[-6.158,3.018],[-7.593,3.211]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[313.62,388.695],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 6","np":4,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.236,0.454],[-1.045,0.9],[-1.387,0.354],[-1.301,-0.432],[-0.626,-0.25],[-0.544,-0.359],[0.285,-0.431],[0.416,0.209],[0,0],[1.035,0.227],[0.969,-0.235],[0.833,-0.68],[0.581,-0.837],[0,0],[0.466,0.324]],"o":[[0.659,-1.263],[1.026,-0.887],[1.384,-0.319],[0.687,0.14],[0.576,0.334],[0.43,0.287],[-0.264,0.4],[0,0],[-1.022,-0.51],[-1.03,-0.294],[-0.983,0.219],[-0.808,0.679],[0,0],[-0.324,0.467],[-0.43,-0.3]],"v":[[-7.099,1.915],[-4.581,-1.253],[-0.921,-3.214],[3.257,-3.057],[5.146,-2.311],[6.796,-1.227],[7.061,0.073],[5.864,0.396],[5.749,0.337],[2.691,-0.897],[-0.342,-0.87],[-3.099,0.52],[-5.29,2.904],[-5.343,2.98],[-6.774,3.238]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[312.199,384.378],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 7","np":4,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[6.819,-12.164],[0,0]],"o":[[0,0],[0,0]],"v":[[-11.656,1.956],[11.656,3.156]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[322.794,414.251],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 8","np":4,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,3.303],[0.973,-1.991],[0.701,-6.652]],"o":[[0,-3.304],[-0.973,1.99],[3.751,-1.066]],"v":[[2.835,-3.048],[-2.325,-5.694],[-2.835,6.628]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":25,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[344.214,423.404],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 9","np":4,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-6.33,-1.4],[-2.019,-4.786],[3.027,-1.197],[0,9.752],[0,0]],"o":[[0,0],[6.329,1.398],[2.021,4.785],[-3.028,1.199],[0,-5.248],[0,0]],"v":[[-12.121,-10.606],[2.958,-14.187],[14.525,-3.585],[7.94,14.387],[2.958,1.996],[-16.546,-2.569]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[335.244,418.587],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 10","np":4,"cix":2,"bm":0,"ix":10,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.579,-2.589],[-5.615,-4.573],[6.376,3.224],[1.565,6.379],[-4.085,-0.383]],"o":[[0,0],[-4.362,4.572],[0.975,-8.609],[-0.986,-4.02],[1.854,0.175]],"v":[[-2.104,-14.361],[13.316,13.141],[-9.673,15.259],[-12.33,-10.357],[-6.15,-18.1]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[319.243,397.027],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 11","np":4,"cix":2,"bm":0,"ix":11,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"farbe_1 Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.398,-1.76],[1.569,0.838]],"o":[[-0.946,1.774],[-2.603,-0.707]],"v":[[2.661,-0.605],[-1.456,1.527]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.4,0.666999966491,0.4,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[281.371,137.766],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"farbe_2 Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.982,0.003],[1.856,0.991]],"o":[[0.599,2.599],[-2.32,-1.238]],"v":[[0.824,-3.775],[0.302,2.784]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.4,0.666999966491,0.4,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[275.493,149.806],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"farbe_3 Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.143,2.88],[2.416,-0.23],[4.315,0.847],[2.345,-3.534],[-2.181,-3.215],[-3.728,0.972],[5.276,-5.159],[-4.872,-0.322],[-0.885,2.946],[-3.633,0.794]],"o":[[2.513,-2.304],[-2.384,0.171],[-5.397,-1.057],[-2.344,3.533],[2.18,3.215],[3.728,-0.972],[-5.275,5.159],[4.871,0.322],[0.885,-2.946],[3.633,-0.795]],"v":[[18.075,-8.512],[13.971,-10.702],[1.427,-11.248],[-12.145,-6.87],[-18.406,-2.01],[-6.917,-6.358],[-12.218,3.573],[-10.977,11.983],[-4.444,-0.253],[4.644,-6.111]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.4,0.666999966491,0.4,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[304.806,134.738],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"pinsel Konturen","parent":17,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.194,-0.002],[-0.141,-0.438],[3.921,-7.973],[0.258,-0.502],[0.346,-1.09],[-0.834,-1.52],[0,0],[0,0],[1.571,2.693],[0.494,4.794],[-0.425,0.908],[-0.384,0.157],[-0.396,-0.089],[-0.706,-0.413],[-0.018,-0.011],[-0.297,-0.14],[-0.136,0.005],[-0.107,0.069],[-0.139,0.144],[-0.344,0.5],[-0.536,0.875],[-0.216,0.348],[-0.636,0.627],[-0.163,0.098]],"o":[[0.441,0.006],[1.326,4.145],[-0.275,0.56],[-0.669,1.303],[-0.468,1.475],[0,0],[0,0],[-1.721,-0.415],[-1.577,-2.706],[-0.261,-2.526],[0.219,-0.468],[0.376,-0.154],[0.755,0.168],[0.018,0.011],[0.37,0.216],[0.307,0.145],[0.029,-0.002],[0.102,-0.068],[0.277,-0.288],[0.492,-0.714],[0.217,-0.352],[0.746,-1.194],[0.161,-0.159],[0.162,-0.096]],"v":[[5.672,-14.495],[6.511,-13.691],[3.359,4.412],[2.556,6.001],[0.961,9.524],[1.31,13.872],[1.652,14.497],[0.96,14.329],[-4.218,9.567],[-7.575,-1.729],[-7.281,-6.735],[-6.374,-7.67],[-5.196,-7.725],[-2.909,-6.661],[-2.853,-6.628],[-1.849,-6.077],[-1.191,-5.877],[-0.991,-5.964],[-0.628,-6.28],[0.308,-7.482],[1.865,-9.932],[2.516,-10.985],[4.645,-13.937],[5.133,-14.33]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0.314,-0.326],[0.157,-0.103],[0.188,-0.008],[0,0],[0,0],[0.316,0.15],[0.363,0.213],[0,0],[0.657,0.147],[0.216,-0.088],[0.166,-0.356],[-0.26,-2.519],[-1.524,-2.615],[-1.32,-0.591],[-0.438,1.382],[-0.68,1.323],[-0.261,0.53],[1.256,3.928],[0.017,0],[0.106,-0.064],[0.141,-0.139],[0.754,-1.208],[0.214,-0.348],[0.501,-0.728]],"o":[[-0.156,0.162],[-0.155,0.101],[0,0],[0,0],[-0.302,0.013],[-0.327,-0.154],[0,0],[-0.748,-0.438],[-0.321,-0.072],[-0.207,0.085],[-0.347,0.739],[0.486,4.719],[1.305,2.234],[-0.584,-1.432],[0.363,-1.143],[0.253,-0.492],[3.884,-7.898],[-0.117,-0.365],[-0.035,0],[-0.105,0.062],[-0.573,0.565],[-0.211,0.337],[-0.542,0.881],[-0.348,0.509]],"v":[[-0.175,-5.843],[-0.646,-5.437],[-1.164,-5.248],[-1.179,-5.563],[-1.164,-5.248],[-2.118,-5.507],[-3.17,-6.084],[-3.171,-6.084],[-5.334,-7.11],[-6.136,-7.087],[-6.71,-6.468],[-6.948,-1.793],[-3.674,9.25],[0.425,13.481],[0.36,9.333],[2.02,5.665],[2.794,4.134],[5.911,-13.499],[5.664,-13.865],[5.456,-13.788],[5.087,-13.488],[3.051,-10.651],[2.413,-9.618],[0.826,-7.125]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[287.545,188.113],"ix":2},"a":{"a":0,"k":[-19.857,-65.254],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":6,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.291,4.037],[1.746,-0.075],[-1.04,-10.091],[-3.196,-0.772],[-1.95,3.968]],"o":[[-1.034,-3.229],[-1.746,0.075],[0.982,9.513],[-1.767,-3.22],[3.903,-7.936]],"v":[[6.612,-12.195],[-0.779,-4.163],[-6.863,-0.361],[1.434,15.423],[3.477,5.673]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.4,0.666999966491,0.4,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[307.001,251.967],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.292,4.037],[1.746,-0.075],[-1.041,-10.091],[-3.198,-0.772],[-1.951,3.968]],"o":[[-1.033,-3.229],[-1.746,0.075],[0.982,9.513],[-1.768,-3.221],[3.902,-7.936]],"v":[[6.611,-11.866],[0.081,-15.677],[-6.862,-0.032],[1.435,15.752],[3.478,6.002]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.2,0.2,0.2,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[306.752,251.233],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 3","np":4,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.007,-0.174],[0.174,-0.006],[0.695,-0.61],[0.113,0.13],[-0.13,0.115],[-3.357,0.129]],"o":[[0.007,0.173],[-3.21,0.124],[-0.13,0.115],[-0.116,-0.131],[0.804,-0.705],[0.175,-0.007]],"v":[[3.505,-1.092],[3.202,-0.765],[-2.952,1.287],[-3.396,1.258],[-3.368,0.814],[3.177,-1.394]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[300.581,219.114],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[254,287],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 4","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.418,1.215],[0.808,-0.136],[0.979,-1.179],[-0.778,-0.333],[0,0],[0,0]],"o":[[0.417,-1.215],[-2.245,0.514],[-0.98,1.179],[0,0],[0,0],[-1.963,-6.01]],"v":[[2.738,-10.102],[0.833,-11.214],[-7.127,-8.2],[-6.016,-5.727],[2.619,11.35],[8.106,9.446]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.811764717102,0.811764717102,0.811764717102,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[302.038,227.323],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 6","np":4,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.045,0.007],[0,0],[0.605,-0.095],[0.539,-0.233],[0,0],[-1.223,0.444],[-0.892,0.144]],"o":[[0,0],[-0.959,-0.142],[-0.483,0.076],[0,0],[0.635,-0.617],[1.23,-0.445],[0.046,-0.008]],"v":[[8.116,10.935],[-4.927,-15.572],[-7.178,-15.624],[-8.664,-15.169],[1.87,13.565],[4.651,11.802],[7.98,10.957]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0.03,-0.002],[0.116,-0.012],[0.408,-0.066],[1.084,-0.392],[0.499,-0.51],[0.119,-0.162],[0.027,-0.04],[0.006,-0.007],[0,0],[0,0],[0,0],[0,0],[0,0],[-0.98,0.154],[-1.322,-0.232]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[-0.014,0.001],[-0.058,0.005],[-0.235,0.024],[-0.819,0.133],[-0.988,0.358],[-0.247,0.254],[-0.058,0.08],[-0.012,0.02],[0,0],[0,0],[0,0],[0,0],[0,0],[0.964,-0.481],[0.982,-0.154],[0,0]],"v":[[-3.658,-17.275],[11.029,12.576],[9.611,12.66],[9.61,12.66],[9.608,12.66],[9.594,12.661],[9.527,12.667],[9.262,12.691],[8.282,12.823],[5.296,13.579],[3.069,15.038],[2.52,15.682],[2.393,15.866],[2.366,15.908],[2.363,15.913],[2.363,15.914],[1.352,17.646],[-11.029,-16.125],[-10.273,-16.503],[-7.471,-17.491],[-4.13,-17.358]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[293.862,204.71],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 7","np":6,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[1.862,-0.93],[0,0],[-2.313,0.838]],"o":[[0,0],[-2.534,-0.446],[0,0],[0,0],[2.313,-0.839]],"v":[[9.702,12.436],[-4.147,-15.707],[-9.702,-14.938],[1.696,16.154],[5.121,13.411]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.811999990426,0.573000021542,0.328999986836,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[293.714,203.99],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 8","np":4,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":8,"ty":4,"nm":"fluegel_l Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":0,"s":[{"i":[[21.421,-50.233],[-4.185,-1.765],[-9.659,3.399],[-0.144,0.545],[-3.671,-0.493],[-14.341,-10.395],[-2.024,-0.702],[-1.276,2.655],[0,0],[12.704,-0.241]],"o":[[2.837,4.336],[6.453,2.72],[-8.508,-6.717],[0.243,-0.917],[7.111,0.961],[6.286,4.556],[1.976,0.298],[1.276,-2.655],[-21.715,-9.241],[-19.457,0.369]],"v":[[-60.973,37.859],[-21.28,-0.463],[2.889,-1.48],[-9.656,-12.374],[16.48,-5.394],[46.765,-20.736],[55.95,-9.478],[59.775,-15.9],[60.973,-28.453],[9.345,-41.954]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.333,"y":0},"t":404,"s":[{"i":[[21.421,-50.233],[-4.185,-1.765],[-9.659,3.399],[-0.144,0.545],[-3.671,-0.493],[-13.862,-11.026],[-7.875,0],[-4.648,3.428],[0,0],[12.704,-0.241]],"o":[[2.837,4.336],[6.453,2.72],[-8.508,-6.717],[0.243,-0.917],[7.111,0.961],[13.861,11.026],[4.336,0],[4.648,-3.428],[-21.715,-9.241],[-19.457,0.369]],"v":[[-60.973,37.859],[-21.28,-0.463],[2.889,-1.48],[-9.656,-12.374],[16.48,-5.394],[46.765,-20.736],[54.325,19.272],[55.9,-10.025],[60.973,-28.453],[9.345,-41.954]],"c":true}]},{"t":405,"s":[{"i":[[21.421,-50.233],[-4.185,-1.765],[-9.659,3.399],[-0.144,0.545],[-3.671,-0.493],[-14.341,-10.395],[-2.024,-0.702],[-1.276,2.655],[0,0],[12.704,-0.241]],"o":[[2.837,4.336],[6.453,2.72],[-8.508,-6.717],[0.243,-0.917],[7.111,0.961],[6.286,4.556],[1.976,0.298],[1.276,-2.655],[-21.715,-9.241],[-19.457,0.369]],"v":[[-60.973,37.859],[-21.28,-0.463],[2.889,-1.48],[-9.656,-12.374],[16.48,-5.394],[46.765,-20.736],[55.95,-9.478],[59.775,-15.9],[60.973,-28.453],[9.345,-41.954]],"c":true}]}],"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.4,0.666999966491,0.4,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[266.074,59.68],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[21.421,-50.233],[-4.185,-1.765],[-9.659,3.399],[-0.144,0.545],[-3.671,-0.493],[-13.862,-11.026],[-0.649,0.048],[-4.725,10.711],[0,0],[12.704,-0.241]],"o":[[2.837,4.336],[6.453,2.72],[-8.508,-6.717],[0.243,-0.917],[7.111,0.961],[13.861,11.026],[0.601,-0.202],[4.726,-10.711],[-21.715,-9.241],[-19.457,0.369]],"v":[[205.101,97.539],[244.794,59.217],[268.963,58.2],[256.418,47.306],[282.554,54.286],[312.839,38.944],[321.399,51.077],[321.974,49.655],[327.047,31.227],[275.419,17.726]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":4,"nm":"fluegel_r Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.874,0.089],[5.67,0],[14.418,-18.902],[0.946,-16.066],[6.571,-1.165],[2.157,-2.77],[0,0],[-8.804,8.648]],"o":[[0.649,2.502],[-8.255,0],[-3.735,4.897],[-3.779,-22.367],[-0.797,-0.275],[-6.823,8.773],[8.413,-19.438],[42.037,-39.041]],"v":[[38.569,-6.878],[38.569,16.434],[30.314,8.559],[11.475,24.625],[14.355,-0.379],[1.381,21.018],[-44.732,40.585],[-18.906,-1.544]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.4,0.666999966491,0.4,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[394.294,119.852],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":4,"nm":"font Konturen","parent":11,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[3.368,7.457],[0.06,-12.991],[-3.247,7.457]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[-4.751,-24.357],[4.751,-24.357],[14.495,24.357],[6.255,24.357],[4.329,13.111],[-4.15,13.111],[-6.134,24.357],[-14.494,24.357]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.948999980852,0.948999980852,0.948999980852,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[351.973,464.3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":6,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[3.368,7.457],[0.06,-12.991],[-3.248,7.457]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[-4.751,-24.357],[4.751,-24.357],[14.494,24.357],[6.255,24.357],[4.33,13.111],[-4.15,13.111],[-6.134,24.357],[-14.494,24.357]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.948999980852,0.948999980852,0.948999980852,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[320.551,464.3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":6,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.842,1.002],[0,2.647],[0.28,1.002],[0.882,0.522],[1.805,0],[0,0],[0,0]],"o":[[2.405,0],[0.843,-1.043],[0,-1.924],[-0.281,-1.042],[-0.843,-0.521],[0,0],[0,0],[0,0]],"v":[[-1.112,-3.548],[3.759,-5.052],[5.023,-10.586],[4.602,-14.975],[2.858,-17.322],[-1.112,-18.102],[-4.541,-18.102],[-4.541,-3.548]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,-9.222],[8.702,0],[0,0],[0,0],[0,0]],"o":[[0,0],[8.3,0],[0,8.82],[0,0],[0,0],[0,0],[0,0]],"v":[[-13.382,-24.357],[0.933,-24.357],[13.382,-10.525],[0.331,2.707],[-4.541,2.707],[-4.541,24.358],[-13.382,24.358]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.948999980852,0.948999980852,0.948999980852,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[292.714,464.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 3","np":6,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.883,0.681],[-0.24,1.203],[0,2.406],[0,0],[0.28,1.123],[0.922,0.521],[1.924,0],[0,0],[0,0]],"o":[[1.965,0],[0.881,-0.683],[0.241,-1.243],[0,0],[0,-2.165],[-0.281,-1.123],[-0.882,-0.562],[0,0],[0,0],[0,0]],"v":[[-1.865,18.163],[2.406,17.142],[4.089,14.314],[4.45,8.841],[4.45,-9.803],[4.03,-14.734],[2.225,-17.2],[-1.985,-18.042],[-4.631,-18.042],[-4.631,18.163]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-2.245,-1.083],[-0.923,-2.205],[0,-3.609],[0,0],[0.961,-2.286],[2.205,-1.163],[3.769,0],[0,0]],"o":[[0,0],[3.93,0],[2.245,1.042],[0.961,2.164],[0,0],[0,3.688],[-0.923,2.285],[-2.205,1.123],[0,0],[0,0]],"v":[[-13.472,-24.357],[-1.985,-24.357],[7.277,-22.733],[12.029,-17.861],[13.472,-9.201],[13.472,8.541],[12.029,17.502],[7.337,22.674],[-1.624,24.358],[-13.472,24.358]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.819999964097,0.552999997606,0.122000002394,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[259.327,464.299],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 4","np":6,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[3.368,7.457],[0.06,-12.991],[-3.248,7.457]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[-4.751,-24.357],[4.751,-24.357],[14.494,24.357],[6.255,24.357],[4.33,13.11],[-4.15,13.11],[-6.134,24.357],[-14.494,24.357]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.819999964097,0.552999997606,0.122000002394,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[226.461,464.3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 5","np":6,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.042,1.163],[0,2.647],[0.962,1.163],[2.446,0],[0,0],[0,0]],"o":[[2.526,0],[1.083,-1.163],[0,-2.565],[-0.922,-1.163],[0,0],[0,0],[0,0]],"v":[[-2.225,-3.49],[3.127,-5.232],[4.751,-10.947],[3.308,-16.54],[-1.744,-18.284],[-5.052,-18.284],[-5.052,-3.49]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-2.526,-1.965],[0,-4.732],[0.922,-1.964],[2.205,-0.882],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[5.132,0],[2.526,1.924],[0,3.087],[-0.882,1.924],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"v":[[-13.893,-24.357],[-2.165,-24.357],[9.322,-21.411],[13.111,-11.427],[11.728,-3.849],[7.097,0.361],[13.893,24.358],[4.992,24.358],[-0.842,2.044],[-5.052,2.044],[-5.052,24.358],[-13.893,24.358]],"c":true},"ix":2},"nm":"Pfad 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.819999964097,0.552999997606,0.122000002394,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[194.613,464.3],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 6","np":6,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.969,0],[2.045,2.846],[0,5.413],[0,0],[-2.085,2.806],[-5.092,0],[-2.085,-2.406],[0,-4.69],[0,0],[0,0],[0,0],[0.24,1.043],[0.721,0.56],[1.403,0],[0.722,-0.721],[0.24,-1.123],[0,-1.803],[0,0],[-0.722,-1.362],[-2.045,0],[-0.762,1.444],[0,2.887],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],"o":[[-4.611,0],[-2.005,-2.886],[0,0],[0,-5.573],[2.085,-2.846],[4.811,0],[2.085,2.366],[0,0],[0,0],[0,0],[0,-1.763],[-0.201,-1.042],[-0.682,-0.563],[-1.483,0],[-0.721,0.723],[-0.201,1.122],[0,0],[0,2.766],[0.762,1.364],[2.004,0],[0.801,-1.443],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1.523,3.607]],"v":[[-0.811,24.96],[-10.796,20.689],[-13.803,8.238],[-13.803,-8.12],[-10.676,-20.69],[0.09,-24.96],[10.434,-21.352],[13.562,-10.767],[13.562,-8.24],[5.083,-8.24],[5.083,-11.008],[4.721,-15.217],[3.339,-17.621],[0.21,-18.464],[-3.098,-17.383],[-4.54,-14.615],[-4.842,-10.225],[-4.842,10.164],[-3.758,16.357],[0.451,18.402],[4.602,16.237],[5.803,9.742],[5.803,5.172],[0.572,5.172],[0.572,-0.422],[13.803,-0.422],[13.803,24.297],[8.029,24.297],[7.428,19.547]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.819999964097,0.552999997606,0.122000002394,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[160.145,464.36],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 7","np":4,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"balken Konturen","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-1.451,0],[0,0],[0,1.448],[0,0],[1.45,0],[0,0],[0,-1.448]],"o":[[0,1.448],[0,0],[1.45,0],[0,0],[0,-1.448],[0,0],[-1.451,0],[0,0]],"v":[[-137.665,44.632],[-135.039,47.253],[135.039,47.253],[137.665,44.632],[137.665,-44.632],[135.039,-47.254],[-135.039,-47.254],[-137.665,-44.632]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[256.004,463.409],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"fuss_r_2 Konturen","parent":11,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[5.873,2.972],[0,0],[0,0]],"o":[[0,0],[2.599,-0.578],[7.999,1.764],[0,0]],"v":[[-0.247,4.015],[-7.56,-5.057],[-2.323,-4.578],[7.561,5.23]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":20,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[350.2,412.177],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.285,2.218],[-2.195,-3.402],[-3.951,-4.684]],"o":[[-2.285,-2.218],[2.197,3.402],[1.802,-3.154]],"v":[[0.797,-3.984],[-3.261,-1.782],[3.654,6.202]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[357.881,414.994],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-6.363,-1.4],[-2.03,-4.786],[3.042,-1.197],[0,9.752],[0,0]],"o":[[0,0],[6.362,1.398],[2.031,4.785],[-3.043,1.199],[0,-5.581],[0,0]],"v":[[-13.84,-10.606],[1.318,-14.187],[12.944,-3.585],[6.324,14.387],[1.318,1.996],[-14.974,-3.849]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[350.683,418.587],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 3","np":4,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[5.656,-1.4],[1.805,-4.786],[-2.704,-1.197],[0,9.752],[0,0]],"o":[[0,0],[-5.655,1.398],[-1.804,4.785],[2.705,1.199],[0,-5.581],[0,0]],"v":[[12.301,-10.606],[-1.172,-14.187],[-11.507,-3.585],[-5.623,14.387],[-1.172,1.996],[13.311,-3.849]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.8,0.475,0.063000002094,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[314.839,418.587],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 4","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.923,-7.212],[0,0],[-5.944,-3.478],[-5.227,-5.089],[0,0],[8.622,-6.801],[3.872,7.906],[0,0],[5.026,9.346],[0,0],[-4.975,1.802],[-4.984,3.455]],"o":[[0,0],[0,0],[6.273,-2.972],[5.231,5.088],[0,0],[-2.14,1.689],[-3.872,-7.904],[0,0],[-2.722,-6.709],[0,0],[-2.39,-11.152],[3.399,-2.357]],"v":[[-16.204,-31.984],[-5.072,-9.202],[6.908,-8.451],[27.459,-4.969],[34.915,8.35],[29.192,35.357],[22.862,31.29],[-14.412,19.974],[-35.092,18.125],[-35.569,4.117],[-28.472,-6.771],[-29.365,-31.532]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.004000000393,0.004000000393,0.011999999776,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[334.976,410.747],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 5","np":4,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":13,"ty":4,"nm":"mouth Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.117,-0.125],[-3.306,3.114],[0,0],[3.069,0.343],[0.5,-0.182],[0.462,-0.391],[0.221,-0.204],[1.332,-0.569],[0.938,0.066],[0.161,0.015],[0.516,-0.163],[0.988,-0.665],[0.217,-0.148],[0.939,-0.533],[1.075,-0.17],[0.078,-0.013],[0.586,-0.524],[0.261,-0.487],[0.166,-0.275],[1.849,-0.964],[0.885,-2.654],[0,0],[-2.533,1.32],[-0.355,0.587],[-0.087,0.162],[-0.746,0.668],[-1.129,0.181],[-0.059,0.009],[-0.929,0.527],[-0.788,0.538],[-0.227,0.153],[-1.031,0.326],[-0.616,-0.063],[-0.116,-0.008],[-1.389,0.594],[-0.725,0.668],[-0.305,0.257],[-0.802,0.29]],"o":[[2.222,0.248],[0,0],[-3.426,3.228],[-0.868,-0.097],[-0.507,0.183],[-0.193,0.163],[-0.77,0.713],[-1.688,0.721],[-0.208,-0.015],[-0.568,-0.054],[-0.741,0.234],[-0.204,0.138],[-0.797,0.544],[-1.239,0.703],[-0.081,0.013],[-1.192,0.191],[-0.477,0.427],[-0.111,0.208],[-0.551,0.911],[-2.026,1.056],[0,0],[1.013,-3.036],[1.57,-0.819],[0.078,-0.128],[0.301,-0.565],[1.056,-0.944],[0.059,-0.01],[1.133,-0.181],[0.864,-0.49],[0.227,-0.155],[0.979,-0.658],[0.915,-0.289],[0.132,0.013],[0.664,0.047],[1.003,-0.429],[0.261,-0.241],[0.547,-0.462],[0.808,-0.293]],"v":[[13.202,-9.06],[21.466,-13.121],[22.762,-11.745],[12.992,-7.181],[10.997,-7.003],[9.594,-6.134],[8.976,-5.578],[5.911,-3.405],[2.168,-2.693],[1.619,-2.741],[0.195,-2.663],[-2.349,-1.271],[-2.981,-0.841],[-5.599,0.839],[-9.235,1.919],[-9.473,1.958],[-12.051,2.855],[-12.974,4.117],[-13.376,4.833],[-16.586,7.611],[-20.969,13.121],[-22.762,12.523],[-17.459,5.935],[-14.994,3.854],[-14.75,3.415],[-13.311,1.447],[-9.773,0.091],[-9.597,0.064],[-6.532,-0.805],[-4.084,-2.378],[-3.404,-2.84],[-0.375,-4.466],[1.931,-4.613],[2.302,-4.579],[5.168,-5.143],[7.536,-6.829],[8.374,-7.578],[10.353,-8.779]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[285.546,190.986],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":14,"ty":4,"nm":"feather_head_1 Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.762,-7.695],[1.026,3.52],[-2.207,5.431],[-1.258,-7.638]],"o":[[-5.267,-5.06],[-1.028,-3.52],[4.169,-0.534],[0.448,2.732]],"v":[[4.776,13.415],[-4.664,0.545],[-2.896,-12.881],[5.245,-2.225]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[324.78,115.495],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":15,"ty":4,"nm":"feather_head_2 Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.158,1.502],[6.905,-10.529],[9.35,-8.377],[-2.654,5.346],[-2.355,2.129],[0,0],[0,0]],"o":[[5.51,3.949],[-2.469,3.766],[-0.663,-11.854],[1.181,-2.38],[0,0],[0,0],[2.355,-1.674]],"v":[[7.488,-19.966],[5.395,1.751],[-12.335,19.966],[-9.349,-5.834],[-4.044,-12.597],[-0.941,-5.435],[-0.781,-15.202]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[342.264,113.488],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":16,"ty":4,"nm":"mouth_bottom Konturen","parent":17,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.908,0.959],[26.596,-9.63],[0,0],[0,0],[-0.106,0.239]],"o":[[0,0],[-4.674,1.692],[0,0],[0.242,-0.102],[0.457,-1.034]],"v":[[19.584,-10.358],[-9.754,0.602],[-20.645,10.358],[19.646,-6.788],[20.188,-7.307]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.522000002394,0.275,0.019999999626,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[285.839,190.834],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":17,"ty":4,"nm":"beak Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.803,-1.179],[-0.138,0.426],[-1.705,-1.165]],"o":[[-1.804,1.182],[0.138,-0.427],[1.714,1.163]],"v":[[3.116,2.932],[-4.781,-3.687],[2.736,-2.656]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[268.242,169.431],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.674,-1.702],[2.041,2.455],[-0.354,-0.003],[-2.051,-1.38]],"o":[[-2.27,1.449],[-0.228,-0.274],[2.281,0.02],[2.562,1.718]],"v":[[4.409,4.15],[-6.855,-4.902],[-6.527,-5.596],[3.788,-4.009]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.522000002394,0.258999992819,0.019999999626,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[267.952,170.396],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-10.283,-28.468],[-1.301,-5.516],[1.237,-0.406],[1.902,-0.813],[0,0],[6.258,-7.502],[1.479,-1.558],[0,0],[-6.083,3.404],[0,0],[0,0]],"o":[[6.595,-1.549],[0.299,1.267],[-1.556,0.511],[0.033,-0.108],[0,0],[-6.262,7.5],[0,0],[-3.144,-6.152],[0,0],[0,0],[0,0]],"v":[[16.378,-9.789],[37.153,-4.328],[35.375,-1.383],[30.139,0.634],[30.189,0.471],[-6.685,18.419],[-16.131,38.257],[-32.627,6.315],[-31.37,-14.633],[-7.743,-28.526],[-7.654,-28.529]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.819999964097,0.552999997606,0.118000000598,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[268.504,185.931],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 3","np":4,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":18,"ty":4,"nm":"pupil Konturen","parent":19,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.913,0],[0,1.914],[1.914,0],[0,-1.913]],"o":[[1.914,0],[0,-1.913],[-1.913,0],[0,1.914]],"v":[[0,3.465],[3.466,0],[0,-3.465],[-3.465,0]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[294.882,154.243],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":19,"ty":4,"nm":"eye Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":417,"s":[{"i":[[-1.449,4.46],[-4.457,-1.449],[-1.021,-1.691],[0.793,-2.439],[4.464,1.451]],"o":[[1.45,-4.46],[2.018,0.656],[1.235,2.042],[-1.45,4.461],[-4.457,-1.448]],"v":[[-7.762,-2.627],[2.949,-8.09],[7.148,-3.432],[8.418,2.629],[-2.308,8.088]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":418,"s":[{"i":[[-0.139,0.364],[-1.059,-0.454],[-0.962,-0.554],[0.171,-0.423],[4.464,1.451]],"o":[[0.142,-0.894],[1.059,0.454],[2.068,1.191],[-0.365,0.654],[-4.457,-1.448]],"v":[[-7.762,-2.627],[-5.57,-1.211],[4.262,2.067],[8.418,2.629],[0.962,1.255]],"c":true}]},{"i":{"x":0.833,"y":0.833},"o":{"x":0.167,"y":0.167},"t":422,"s":[{"i":[[-0.139,0.364],[-1.059,-0.454],[-0.962,-0.554],[0.171,-0.423],[4.464,1.451]],"o":[[0.142,-0.894],[1.059,0.454],[2.068,1.191],[-0.365,0.654],[-4.457,-1.448]],"v":[[-7.762,-2.627],[-5.57,-1.211],[4.262,2.067],[8.418,2.629],[0.962,1.255]],"c":true}]},{"t":423,"s":[{"i":[[-1.449,4.46],[-4.457,-1.449],[-1.021,-1.691],[0.793,-2.439],[4.464,1.451]],"o":[[1.45,-4.46],[2.018,0.656],[1.235,2.042],[-1.45,4.461],[-4.457,-1.448]],"v":[[-7.762,-2.627],[2.949,-8.09],[7.148,-3.432],[8.418,2.629],[-2.308,8.088]],"c":true}]}],"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[294.395,154.143],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":20,"ty":4,"nm":"wing_r Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[1.574,-64.354],[3.29,-5.753],[-17.325,-6.931],[0,0],[14.749,6.98],[3.354,-3.079],[-6.929,-5.67],[0,0],[22.267,8.048],[3.663,0.134],[-0.184,0.387],[0.31,14.769],[-6.085,-13.54],[6.016,17.432],[-0.025,0.989],[0,0],[-4.507,-10.021],[5.956,15.038],[-0.111,1.967],[-3.055,-6.801],[7.324,12.907],[-0.105,1.467],[-2.576,-5.738],[6.469,9.228],[-0.599,11.022],[0.355,5.775],[-9.956,-1.372],[5.622,36.844],[0,0],[-1.126,-3.664]],"o":[[-1.575,64.354],[0,0],[17.327,6.931],[-21.737,17.956],[0,0],[0,0],[6.932,5.67],[-13.351,3.465],[-14.1,6.083],[-0.43,-0.017],[5.584,-11.733],[3.923,3.979],[-1.414,-20.338],[0.027,-0.998],[0,0],[3.19,3.628],[-1.021,-14.693],[0.098,-2.024],[2.544,3.629],[-0.756,-10.907],[0.109,-1.524],[2.237,3.427],[-0.653,-9.411],[2.106,-11.254],[0.315,-5.789],[9.608,20.19],[14.931,2.058],[-3.112,-20.41],[2.853,-2.561],[0,0]],"v":[[46.645,-31.447],[15.142,58.965],[40.973,73.14],[88.542,86.372],[-17.249,97.978],[-28.503,109.92],[-14.156,127.325],[11.797,141.324],[-55.639,136.288],[-87.851,142.153],[-88.358,141.324],[-76.549,93.434],[-59.164,122.028],[-76.52,53.949],[-76.442,50.973],[-76.423,50.265],[-61.858,71.195],[-75.383,22.369],[-75.065,16.373],[-63.439,32.907],[-73.768,-4.01],[-73.436,-8.524],[-63.213,5.341],[-72.488,-26.336],[-68.13,-59.691],[-68.776,-77.657],[-39.429,-45.314],[-13.707,-105.79],[2.129,-142.227],[10.646,-139.866]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[419.295,249.203],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":21,"ty":4,"nm":"body Konturen","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0.108,"ix":10},"p":{"a":0,"k":[312.437,390.027,0],"ix":2,"l":2},"a":{"a":0,"k":[312.437,390.027,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-1.363,4.369],[-17.619,-5.724],[-1.355,-23.521],[4.242,-18.144],[0.479,-3.685],[0,0],[0,0],[0.739,-2.655],[0.381,0.187],[0,0],[0.354,-3.677],[0,0],[-0.088,-5.22],[0,0],[-2.811,-13.758],[2.126,2.324],[0.085,-1.144],[4.627,-8.355],[1.494,4.746],[13.06,9.997],[0,0],[4.531,0.667],[0,0],[0,0],[6.529,2.137],[0,0],[0,0],[4.663,2.253],[0,0],[0,0],[0,0],[-17.467,4.956],[-0.199,6.028],[-5.103,3.185],[-7.939,3.825],[1.264,-0.263],[4.284,-1.134],[0,0],[-3.137,4.166],[0,0],[-5.945,1.747],[0,0],[3.121,-0.153],[0,0],[0,0],[4.159,-1.674],[0,0],[-2.105,5.056],[-0.295,1.163],[0,0],[0,0],[8.261,5.452],[0,0]],"o":[[5.293,-17.029],[11.747,3.817],[1.465,6.756],[1.29,2.77],[-2.38,-3.799],[0,0],[0,0],[-2.3,-1.848],[0,0],[0,0],[3.782,4.908],[0,0],[0.089,5.214],[0,0],[-3.148,-3.862],[-0.773,-0.845],[-1.362,18.221],[-4.893,8.833],[-1.1,-3.491],[10.978,14.15],[-4.869,-0.247],[0,0],[0,0],[-7.811,-1.387],[0,0],[0,0],[-6.195,-2.202],[0,0],[0,0],[-8.853,-4.596],[0,0],[-11.474,-0.576],[0.061,-1.837],[11.036,-6.887],[0.947,-0.456],[-3.101,0.647],[10.361,-9.478],[0,0],[3.139,-4.172],[0,0],[1.874,-3.182],[0,0],[0.963,-2.582],[0,0],[0,0],[1.779,-3.263],[0,0],[1.96,-4.711],[0,0],[0,0],[-0.886,0.878],[0,0],[-10.658,-7.299]],"v":[[-5.611,-107.752],[56.911,-132.031],[76.561,-91.024],[71.712,-35.355],[77.252,-20.851],[71.879,-25.795],[69.831,-13.448],[75.738,3.459],[69.564,-0.312],[69.53,-0.329],[68.64,18.821],[77.901,39.914],[67.706,33.968],[69.743,58.55],[78.592,83.236],[69.896,73.231],[67.623,74.004],[55.387,127.871],[29.637,131.541],[11.174,101.979],[23.344,137.755],[9.234,136.358],[0.921,116.872],[4.74,135.629],[-16.827,130.197],[-9.745,111.647],[-20.715,128.87],[-37.058,122.045],[-23.6,107.559],[-41.081,120.03],[-54.901,111.76],[-22.832,91.558],[-73.49,74.004],[-73.49,56.036],[-41.507,42.182],[-42.694,39.994],[-54.516,42.753],[-32.849,27.982],[-16.751,9.292],[-28.493,8.11],[-8.603,-3.511],[1.935,-19.527],[-5.316,-20.111],[9.4,-30.318],[15,-41.51],[7.747,-40.669],[20.754,-49.147],[27.242,-62.28],[31.717,-76.843],[31.721,-76.861],[31.702,-76.84],[10.701,-79.772],[10.439,-79.948]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":1,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[270.888,258.168],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[4.915,4.937],[-3.542,2.554],[-11.132,3.16],[-0.7,0.909],[-15.325,10.141],[-1.356,1.882],[6.666,0],[-10.55,2.513],[-2.702,3.587],[2.136,0],[-12.65,8.621],[0,0],[-3.216,3.101],[-2.985,1.03],[-1.453,4.472],[1.221,0.936],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1.394,1.95]],"o":[[0,0],[-26.368,-6.729],[-7.373,-7.405],[5.905,-4.257],[-5.895,0.301],[1.589,-2.063],[5.965,-5.952],[1.723,-2.393],[8.26,-11.412],[2.41,-1.955],[-4.448,-1.021],[2.907,-5.057],[0,0],[3.089,-5.707],[3.216,-3.102],[5.832,-13.256],[1.453,-4.472],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-3.958,3.36],[0,0]],"v":[[20.768,94.558],[-29.527,80.22],[-76.451,62.72],[-84.904,44.939],[-59.348,33.812],[-67.141,32.9],[-41.769,14.594],[-30.787,2.843],[-46.828,1.339],[-18.977,-17.545],[-11.309,-25.857],[-21.184,-27.389],[2.149,-47.907],[-6.824,-45.364],[2.634,-58.576],[11.935,-64.773],[22.863,-91.365],[23.211,-99.478],[1.904,-124.632],[67.407,-118.17],[72.993,-100.093],[85.092,-25.565],[88.446,104.468],[53.433,121.272],[44.038,121.925]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gr","it":[{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":0,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"mm","mm":4,"nm":"Pfade zusammenführen 1","mn":"ADBE Vector Filter - Merge","hd":false},{"ty":"fl","c":{"a":0,"k":[0.808000033509,0.804000016755,0.769000004787,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[277.188,268.771],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 2","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0},{"ddd":0,"ind":22,"ty":4,"nm":"wing_l Konturen","parent":21,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[256,256,0],"ix":2,"l":2},"a":{"a":0,"k":[256,256,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-13.517,12.739],[-27.961,-10.589],[51.018,-64.44],[12.266,-3.066],[13.185,-12.306],[-18.218,110.412],[-19.189,34.793]],"o":[[16.004,88.031],[20.774,7.868],[-7.17,9.056],[-10.216,2.552],[-17.857,-6.181],[7.069,-42.845],[6.762,-12.261]],"v":[[0.157,-154.751],[66.104,-6.821],[27.105,112.506],[12.776,152.199],[-27.081,149.575],[-68.66,-1.123],[-30.262,-117.249]],"c":true},"ix":2},"nm":"Pfad 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fläche 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[248.34,189.171],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transformieren"}],"nm":"Gruppe 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":1800,"st":0,"bm":0}],"markers":[]}');var f=r.t(c,2);class d extends n{constructor(t){super(),this.installEvent=null,this.lottie={animation:null,elem:null,resizeHandler:null},this.element=t;const e=this.element.querySelector("[data-grad-paa-convert]");if(null===e)return void console.error("Couldn't find convert button");e.classList.remove("grad-paa-btn--loader"),e.removeAttribute("data-grad-paa-convert"),e.addEventListener("click",(()=>{this.dispatchEvent(new Event("convert-files"))}));const r=this.element.querySelector("[data-grad-paa-lottie]");null!==r?(r.removeAttribute("data-grad-paa-lottie"),this.lottie.elem=r,this.setupLottie(),this.setupInstallButton()):console.error("Couldn't find lottie element")}setupLottie(){null!==this.lottie.elem&&(this.lottie.elem.innerHTML="",this.lottie.animation=p().loadAnimation({container:this.lottie.elem,renderer:"canvas",loop:!0,autoplay:!0,animationData:f}),this.lottie.animation.play(),this.lottie.resizeHandler=()=>window.requestAnimationFrame((()=>{var t;null===(t=this.lottie.animation)||void 0===t||t.resize()})),window.addEventListener("resize",this.lottie.resizeHandler))}removeLottie(){var t;null===(t=this.lottie.animation)||void 0===t||t.destroy(),null!==this.lottie.resizeHandler&&window.removeEventListener("resize",this.lottie.resizeHandler),this.lottie.animation=null,this.lottie.resizeHandler=null}setupInstallButton(){window.addEventListener("beforeinstallprompt",(t=>{return e=this,r=void 0,a=function*(){t.preventDefault(),this.installEvent=t;const e=this.element.querySelector("[data-grad-paa-install]");null!==e&&"0"===e.style.opacity&&(e.removeAttribute("data-grad-paa-install"),e.style.opacity="1",e.addEventListener("click",(()=>{null!==this.installEvent&&(this.installEvent.prompt(),this.installEvent.userChoice.then((({outcome:t})=>{"accepted"===t&&(e.style.opacity="0")})))})))},new((i=void 0)||(i=Promise))((function(t,n){function s(t){try{h(a.next(t))}catch(t){n(t)}}function o(t){try{h(a.throw(t))}catch(t){n(t)}}function h(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(s,o)}h((a=a.apply(e,r||[])).next())}));var e,r,i,a}))}toggle(t){t?(this.element.style.display="",window.requestAnimationFrame((()=>{this.setupLottie()}))):(this.removeLottie(),this.element.style.display="none")}}const u=document.createElement("template");u.innerHTML='\n    <div class="grad-paa-dialog__backdrop"></div>\n    <div class="grad-paa-dialog__dialog">\n        <h2 class="grad-paa-dialog__heading"></h2>\n        <button class="grad-paa-dialog__close grad-paa-btn--not-responsive">\n            <i class="material-icons-round">cancel</i>\n        </button>\n        <div class="grad-paa-dialog__actions"></div>\n    </div>\n';class m{constructor(t,e,r){var i,a,n,s,o,h;if(this.element=document.createElement("div"),this.element.className="grad-paa-dialog",this.element.appendChild(u.content.cloneNode(!0)),document.body.appendChild(this.element),window.requestAnimationFrame((()=>{window.requestAnimationFrame((()=>{this.element.classList.add("grad-paa-dialog--shown")}))})),t.length>0){const e=this.element.querySelector(".grad-paa-dialog__heading");null!==e&&(e.textContent=t)}else null===(i=this.element.querySelector(".grad-paa-dialog__heading"))||void 0===i||i.remove();!1===(null==r?void 0:r.close)?null===(a=this.element.querySelector(".grad-paa-dialog__close"))||void 0===a||a.remove():(null===(n=this.element.querySelector(".grad-paa-dialog__close"))||void 0===n||n.addEventListener("click",(()=>this.close())),null===(s=this.element.querySelector(".grad-paa-dialog__backdrop"))||void 0===s||s.addEventListener("click",(()=>this.close()))),e.classList.add("grad-paa-dialog__content");const l=this.element.querySelector(".grad-paa-dialog__actions");null===(o=this.element.querySelector(".grad-paa-dialog__dialog"))||void 0===o||o.insertBefore(e,l);const p=null!==(h=null==r?void 0:r.actions)&&void 0!==h?h:[];for(const t of p)l.appendChild(t);0===p.length&&l.remove()}get dialogElement(){return this.element.querySelector(".grad-paa-dialog__dialog")}close(){this.element.classList.remove("grad-paa-dialog--shown"),window.setTimeout((()=>{this.element.remove()}),400)}}class y extends m{constructor(t,e,r,i={text:"Cancel"},a,n){var s;let o;"string"==typeof e?(o=document.createElement("div"),o.innerHTML=e):o=e;const h=y.generateButton(r),l=y.generateButton(i),p=[l,h];if(void 0!==a){const t=y.generateButton(a);t.addEventListener("click",(()=>this.resolve(null))),p.unshift(t)}if(super(t,o,{close:!1,actions:p}),void 0!==a){const t=this.element.querySelector(".grad-paa-dialog__actions");null!==t&&(t.style.justifySelf="stretch",t.style.gridTemplateColumns="1fr auto auto",t.style.justifyItems="flex-start")}this.promise=new Promise((t=>{this.resolve=t})),this.keyUpEventHandler=t=>{"Enter"===t.key&&this.resolve(!0)},window.addEventListener("keyup",this.keyUpEventHandler),this.promise.finally((()=>{window.removeEventListener("keyup",this.keyUpEventHandler),this.close()})),h.addEventListener("click",(()=>this.resolve(!0))),l.addEventListener("click",(()=>this.resolve(!1))),null!==this.dialogElement&&(this.dialogElement.style.width=null!==(s=null==n?void 0:n.width)&&void 0!==s?s:"600px")}static new(t,e,r,i={text:"Cancel"},a,n){return new y(t,e,r,i,a,n).promise}static generateButton(t){const e=document.createElement("button");return e.innerHTML=t.text,e.classList.add("grad-paa-btn--not-responsive"),void 0!==t.color&&e.style.setProperty("--button-color",t.color),t.primary&&e.classList.add("grad-paa-btn--primary"),e}}const g="image/vnd.paa";function v(t){const e=t.split(".").pop();return null==e?void 0:e.toLowerCase()}function x(t){return t.split(".").slice(0,-1).join(".")}function b(t){const e=URL.createObjectURL(t.blob),r=document.createElement("a");r.download=t.name,r.href=e,document.body.appendChild(r),r.click(),document.body.removeChild(r),r.remove(),window.setTimeout((()=>URL.revokeObjectURL(e)),200)}class k extends Event{constructor(t,e,r){super(t,r),this.file=e}}var _=function(t,e,r,i){return new(r||(r=Promise))((function(a,n){function s(t){try{h(i.next(t))}catch(t){n(t)}}function o(t){try{h(i.throw(t))}catch(t){n(t)}}function h(t){var e;t.done?a(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,o)}h((i=i.apply(t,e||[])).next())}))};function E(t){return _(this,void 0,void 0,(function*(){const e=URL.createObjectURL(t);try{return yield function(t){return _(this,void 0,void 0,(function*(){const e=new Image;e.decoding="async",e.src=t;const r=new Promise(((t,r)=>{e.onload=()=>t(),e.onerror=()=>r(Error("Image loading error"))}));return e.decode&&(yield e.decode().catch((()=>null))),yield r,e}))}(e)}finally{URL.revokeObjectURL(e)}}))}function w(t){return _(this,void 0,void 0,(function*(){const e=document.createElement("canvas");e.width=t.width,e.height=t.height;const r=e.getContext("2d");if(null===r)throw new Error("Couldn't get context of canvas.");r.drawImage(t,0,0);const i=r.getImageData(0,0,e.width,e.height);return e.remove(),i}))}function S(t,e,r){let i,a;const n=new Promise(((n,s)=>{i=t=>{"data"===t.data.type?n(t.data.data):s(t.data.data)},a=t=>s(t),t.addEventListener("message",i),t.addEventListener("error",a),t.postMessage(e,null!=r?r:[])}));return n.finally((()=>{t.removeEventListener("message",i),t.removeEventListener("error",a)})),n}var A=r(963),P=r.n(A),C=r(5936),D=r.n(C),T=function(t,e,r,i){return new(r||(r=Promise))((function(a,n){function s(t){try{h(i.next(t))}catch(t){n(t)}}function o(t){try{h(i.throw(t))}catch(t){n(t)}}function h(t){var e;t.done?a(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,o)}h((i=i.apply(t,e||[])).next())}))};class F extends n{constructor(t,e){super(),this._result=null,this._worker=null,this._preChecksDone=!1,this._warning=null,this._error=null,this.imageData=null,this.inputFile=t,this.id=e,this.preChecks().catch((t=>{this.error=t,console.error(t)}))}get state(){return null!==this.warning?"warning":null!==this.error?"error":null!==this.result?"done":this._preChecksDone?null!==this.worker?"loading":"queued":"setup"}get worker(){return this._worker}set worker(t){if(!this._preChecksDone)throw new Error("Cannot set worker for ConversionFile, because pre-checks aren't done yet.");this._worker=t,this.dispatchEvent(new Event("update"))}get warning(){return this._warning}set warning(t){this._warning=t,this.dispatchEvent(new Event("update"))}get error(){return this._error}set error(t){this._error=t,this.dispatchEvent(new Event("update"))}get preChecksDone(){return this._preChecksDone}set preChecksDone(t){this._preChecksDone=t,this.dispatchEvent(new Event("preChecksDone")),this.dispatchEvent(new Event("update"))}get extension(){return v(this.inputFile.name)}get newExtension(){return"paa"===this.extension?"png":"paa"}get newName(){return`${x(this.inputFile.name)}.${this.newExtension}`}get name(){return this.inputFile.name}get result(){return this._result}download(){null!==this.result&&b(this.result)}preChecks(){return T(this,void 0,void 0,(function*(){if(!function({blob:t,name:e}){return["image/png","image/svg+xml","image/jpeg",g].includes(t.type)||/\.paa$/i.test(e)}(this.inputFile))return this.warning={displayText:"Non supported format",description:`\n                    <p>The file you uploaded is not in a supported format.</p>\n                    <p>We support the following file formats:</p>\n                    <ul>\n                        ${[".png",".jpg / .jpeg",".svg",".paa"].map((t=>`<li style="margin: .5rem 0;"><code>${t}</code></li>`)).join("")}\n                    </ul>\n                `},void(this.preChecksDone=!0);switch(this.extension){case"paa":{const e=yield(t=this.inputFile.blob.slice(0,2),new Promise(((e,r)=>{const i=new FileReader;i.onload=()=>e(i.result),i.onerror=r,i.readAsArrayBuffer(t)})));switch(new Uint16Array(e)[0]){case 65281:case 65285:break;case 65282:case 65283:case 65284:case 17476:case 5461:case 34952:case 32896:this.warning={displayText:"Unsupported PAA type",description:'\n                            <p>PAA files come in different types, which you can read more about <a target="_blank" rel="noreferrer" href="https://community.bistudio.com/wiki?title=PAA_File_Format#TypeOfPaX_.28optional.29">here</a>.</p>\n                            <p>To reduce complexity we only support the most common types DXT1 and DXT5. All other types are either old or barely used.</p>\n                        '};break;default:this.warning={displayText:"Invalid PAA file",description:'\n                            <p>Seems like your file is not a valid PAA file.</p>\n                            <button class="grad-paa-btn--primary grad-paa-btn--not-responsive" style="float: right;" data-grad-paa-open-feedback>Report Error</button>\n                        '}}}break;case"svg":{const t=new DOMParser,e=yield new Response(this.inputFile.blob).text(),r=t.parseFromString(e,"image/svg+xml"),i=r.documentElement;if(r.getElementsByTagName("parsererror").length>0){this.warning={displayText:"Invalid SVG image",description:'\n                            <p>Seems like your file is not a valid SVG image.</p>\n                            <button class="grad-paa-btn--primary grad-paa-btn--not-responsive" style="float: right;" data-grad-paa-open-feedback>Report Error</button>\n                        '};break}if(i.hasAttribute("width")&&i.hasAttribute("height")){this.imageData=yield E(this.inputFile.blob).then(w);break}const a=i.getAttribute("viewBox");if(null===a){this.warning={displayText:"SVGs must have width/height or viewBox",description:"SVGs must have either <code>width</code> and <code>height</code> attributes or a valid <code>viewBox</code> attribute, in order to be decoded."};break}const[,,n,s]=a.split(/\s+/);i.setAttribute("width",n),i.setAttribute("height",s);const o=(new XMLSerializer).serializeToString(r);this.imageData=yield E(new Blob([o],{type:"image/svg+xml"})).then(w)}break;default:this.imageData=yield function(t){return _(this,void 0,void 0,(function*(){return w("createImageBitmap"in self?yield createImageBitmap(t):yield E(t))}))}(this.inputFile.blob)}var t;!this.imageData||Math.log2(this.imageData.width)%1==0&&Math.log2(this.imageData.height)%1==0||(this.warning={displayText:"Dimensions have to be powers of two",description:'\n                    <p>The dimensions (width and height) of PAA images have to be powers of two (2ⁿ).</p>\n                    <p>Your image has to fulfill the same conditions in order to convert it to PAA.</p>\n                    <svg viewBox="0 0 160 80" fill="none" xmlns="http://www.w3.org/2000/svg" style="color: var(--text-color); width: 15em; display: block; margin: 0 auto;">\n                        <rect x="16.5" y="0.5" width="127" height="63" stroke="currentColor" stroke-opacity="0.25"/>\n                        <path d="M16 72L21 74.8868V69.1132L16 72ZM72 71.5H20.5V72.5H72V71.5Z" fill="currentColor" fill-opacity="0.5"/>\n                        <path d="M152 0L149.113 5H154.887L152 0ZM152.5 24V4.5H151.5V24H152.5Z" fill="currentColor" fill-opacity="0.5"/>\n                        <path d="M152 64L154.887 59H149.113L152 64ZM151.5 40V59.5H152.5V40H151.5Z" fill="currentColor" fill-opacity="0.5"/>\n                        <path d="M144 72L139 69.1132V74.8868L144 72ZM139.5 71.5H88V72.5H139.5V71.5Z" fill="currentColor" fill-opacity="0.5"/>\n                        <path d="M80.3984 76.5H74.8086V75.7207L77.7617 72.4395C78.1992 71.9434 78.5 71.541 78.6641 71.2324C78.832 70.9199 78.916 70.5977 78.916 70.2656C78.916 69.8203 78.7812 69.4551 78.5117 69.1699C78.2422 68.8848 77.8828 68.7422 77.4336 68.7422C76.8945 68.7422 76.4746 68.8965 76.1738 69.2051C75.877 69.5098 75.7285 69.9355 75.7285 70.4824H74.6445C74.6445 69.6973 74.8965 69.0625 75.4004 68.5781C75.9082 68.0938 76.5859 67.8516 77.4336 67.8516C78.2266 67.8516 78.8535 68.0605 79.3145 68.4785C79.7754 68.8926 80.0059 69.4453 80.0059 70.1367C80.0059 70.9766 79.4707 71.9766 78.4004 73.1367L76.1152 75.6152H80.3984V76.5ZM82.3027 67.998L82.4785 68.7188C82.7676 68.1797 83.1973 67.9102 83.7676 67.9102C84.7832 67.9102 85.291 68.5234 85.291 69.75V72.6855H84.2949V69.8379C84.2832 69.1152 84.002 68.7539 83.4512 68.7539C83.0215 68.7539 82.7207 68.9668 82.5488 69.3926V72.6855H81.5527V67.998H82.3027Z" fill="currentColor"/>\n                        <path d="M152.398 36.5H146.809V35.7207L149.762 32.4395C150.199 31.9434 150.5 31.541 150.664 31.2324C150.832 30.9199 150.916 30.5977 150.916 30.2656C150.916 29.8203 150.781 29.4551 150.512 29.1699C150.242 28.8848 149.883 28.7422 149.434 28.7422C148.895 28.7422 148.475 28.8965 148.174 29.2051C147.877 29.5098 147.729 29.9355 147.729 30.4824H146.645C146.645 29.6973 146.896 29.0625 147.4 28.5781C147.908 28.0938 148.586 27.8516 149.434 27.8516C150.227 27.8516 150.854 28.0605 151.314 28.4785C151.775 28.8926 152.006 29.4453 152.006 30.1367C152.006 30.9766 151.471 31.9766 150.4 33.1367L148.115 35.6152H152.398V36.5ZM154.303 27.998L154.479 28.7188C154.768 28.1797 155.197 27.9102 155.768 27.9102C156.783 27.9102 157.291 28.5234 157.291 29.75V32.6855H156.295V29.8379C156.283 29.1152 156.002 28.7539 155.451 28.7539C155.021 28.7539 154.721 28.9668 154.549 29.3926V32.6855H153.553V27.998H154.303Z" fill="currentColor"/>\n                    </svg>\n                    <code style="font-size: 0.8em">2ⁿ = 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 ...</code>\n                '}),this.preChecksDone=!0}))}convert(){return T(this,void 0,void 0,(function*(){if(null!==this.warning)throw new Error("Cannot start conversion with warnings.");if(!this.preChecksDone)throw new Error("Conversion started before pre-Checks were done.");try{if("paa"===this.extension){this.worker=new Worker(P()),this.imageData=yield S(this.worker,this.inputFile.blob);const t=yield function(t,e="image/png",r=1){const i=document.createElement("canvas");i.width=t.width,i.height=t.height;const a=i.getContext("2d");if(null===a)throw new Error("Couldn't get context of canvas.");return a.putImageData(t,0,0),new Promise(((t,a)=>{i.toBlob((e=>{i.remove(),null===e?a(new Error("Couldn't generate blob from canvas.")):t(e)}),e,r)}))}(this.imageData);this._result={blob:t,name:this.newName}}else{this.worker=new Worker(D());const t=yield S(this.worker,this.imageData,[this.imageData.data.buffer]);this._result={blob:t,name:this.newName}}this.trackConversion()}catch(t){this.error=t,console.error(t)}finally{this.worker&&(this.worker.terminate(),this.worker=null)}}))}trackConversion(){if(null===this.result)return;let t,e;"paa"===this.newExtension?(t="toPAA",e=this.inputFile.blob.type):(t="fromPAA",e=this.result.blob.type),gtag("event",t,{event_category:"conversion",non_interaction:!0,event_label:e})}cancel(){if(this.worker)return this.worker.terminate()}}class M{constructor(){this.arr=[]}enqueue(t){return this.arr.push(t)}dequeue(){return this.arr.shift()||null}remove(t){const e=this.arr.indexOf(t);return e>-1?(this.arr.splice(e,1),t):null}moveToFront(t){this.remove(t),this.arr.unshift(t)}get size(){return this.arr.length}}class I extends n{constructor(){super(...arguments),this.files=new Map,this.takenIds=new Set,this.queue=new M,this.runningConversions=0}static getInstance(){return null===I.instance&&(I.instance=new I),I.instance}convertFiles(...t){return e=this,r=void 0,a=function*(){if(0===t.length)return;const e=new Map(Array.from(this.files).map((([t,e])=>[e.name,t])));let r,i=t.filter((({name:t})=>e.has(t))).length;for(const a of t){const t={blob:a,name:a.name};if(e.has(t.name)){i--;const a=v(t.name),n=x(t.name);let s,o=2,h=`${n}_${o}.${a}`;for(;e.has(h);)o++,h=`${n}_${o}.${a}`;if(void 0===r){const e=document.createElement("div");let a=!1;e.innerHTML=`<p>Do you want to replace the existing file or rename the new file "${h}".</p>`,i>0&&(e.innerHTML=e.innerHTML+'\n                            <p style="display: flex; align-items: center; margin-top: .5rem; margin-bottom: -1rem;">\n                                <input type="checkbox" style="margin-left: 0;" />\n                                <label>Do this for all current items</label>\n                            </p>',e.querySelector("input").addEventListener("change",(t=>{a=t.target.checked}))),s=yield y.new(`"${t.name}" already exists`,e,{text:"Replace",color:"var(--color-error)",primary:!0},{text:"Rename"},{text:"Skip"}),a&&(r=s)}else s=r;switch(s){case null:continue;case!0:{const r=e.get(t.name);this.cancelID(r)}break;case!1:t.name=h}}const n=this.generateID(),s=new F(t,n);this.files.set(n,s),this.dispatchEvent(new k("added",s)),s.addEventListener("preChecksDone",(()=>{this.queue.enqueue(n),this.run()}),{once:!0}),s.addEventListener("update",(()=>{this.dispatchEvent(new k("update",s))}))}},new((i=void 0)||(i=Promise))((function(t,n){function s(t){try{h(a.next(t))}catch(t){n(t)}}function o(t){try{h(a.throw(t))}catch(t){n(t)}}function h(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(s,o)}h((a=a.apply(e,r||[])).next())}));var e,r,i,a}cancelID(t){const e=this.files.get(t);e&&(e.cancel(),this.files.delete(t),this.queue.remove(t),this.dispatchEvent(new k("removed",e)))}prioritizeID(t){this.files.get(t)&&this.queue.moveToFront(t)}run(){for(;this.queue.size>0&&this.runningConversions<8;){const t=this.queue.dequeue(),e=this.files.get(t);e&&null===e.warning&&(this.runningConversions++,e.convert().finally((()=>{this.runningConversions--,this.run()})))}}generateID(){let t=Math.random().toString(36).substr(2,9);for(;this.takenIds.has(t);)t=Math.random().toString(36).substr(2,9);return this.takenIds.add(t),t}get length(){return this.files.size}entries(){return this.files.entries()}}I.instance=null;class B extends m{constructor(t,e,r){var i;let a;"string"==typeof e?(a=document.createElement("div"),a.innerHTML=e):a=e,super(t,a,{actions:[]}),null!==this.dialogElement&&(this.dialogElement.style.width=null!==(i=null==r?void 0:r.width)&&void 0!==i?i:"600px")}}class V{constructor(t,e){this.openDialog=null,this.moreMenuHandler=null,this.mainActionCallback=null,this.file=t,this.element=document.createElement("li"),e.appendChild(this.element),this.initialRender(),this.file.addEventListener("update",(()=>this.render()))}initialRender(){var t,e;this.element.classList.add("grad-paa-file-item"),this.element.innerHTML=`\n            <i class="material-icons-round grad-paa-file-item__icon">insert_photo</i>\n            <span class="grad-paa-file-item__name">\n                <span>${this.file.newName}</span>\n                <span style="opacity: 0.5; margin-left: .5rem;">from ${this.file.name}</span>\n            </span>\n            <div class="grad-paa-file-item__main-action"></div>\n            <div class="grad-paa-file-item__more">\n                <i class="material-icons-round">more_vert</i>\n                <ul></ul>\n            </div>\n        `,null===(t=this.element.querySelector(".grad-paa-file-item__more > i"))||void 0===t||t.addEventListener("click",(()=>this.toggleMoreMenu(!0))),null===(e=this.element.querySelector(".grad-paa-file-item__main-action"))||void 0===e||e.addEventListener("click",(t=>{null!==this.mainActionCallback&&this.mainActionCallback(t)})),this.render()}toggleMoreMenu(t){const e=this.element.querySelector(".grad-paa-file-item__more > ul");if(null===e)throw new Error("Couldn't find list element");t?(e.style.transform="scale(1)",null===this.moreMenuHandler&&(this.moreMenuHandler=t=>{const e=this.element.querySelector(".grad-paa-file-item__more > ul");if(!e||!t.target)return;const r=t.target;r===e||e.contains(r)||(t.preventDefault(),t.stopPropagation(),this.moreMenuHandler=null,this.toggleMoreMenu(!1))},window.setTimeout((()=>{null!==this.moreMenuHandler&&window.addEventListener("click",this.moreMenuHandler,{once:!0,capture:!0})}),50))):(e.style.transform="",null!==this.moreMenuHandler&&window.removeEventListener("click",this.moreMenuHandler),this.moreMenuHandler=null)}render(){var t,e,r;this.element.querySelectorAll(".grad-paa-file-item__message").forEach((t=>t.remove()));const i=[];switch(this.file.state){case"warning":{this.setMainActionIcon("warning","warning","Show Warning",this.showWarning);const r=document.createElement("div");r.className="grad-paa-file-item__message",r.style.color="var(--color-warning)",r.innerHTML=`<span>${null===(t=this.file.warning)||void 0===t?void 0:t.displayText}</span><i class="material-icons-round" style="font-size: 0.95em; vertical-align: middle; cursor: pointer; opacity: 0.5; margin-left: .2em;">help</i>`,null===(e=r.querySelector("i"))||void 0===e||e.addEventListener("click",(()=>this.showWarning())),this.element.appendChild(r),i.push(this.createAction("Show Warning","visibility",this.showWarning),this.createAction("Delete","delete",this.cancel))}break;case"error":{this.setMainActionIcon("error","error","Show Error",this.showError);const t=document.createElement("div");t.className="grad-paa-file-item__message",t.style.color="var(--color-error)",t.innerHTML='An error occurred. Click <span style="text-decoration: underline; cursor: pointer;" data-grad-paa>here</span> to see the details.',null===(r=t.querySelector("span"))||void 0===r||r.addEventListener("click",(()=>this.showError())),this.element.appendChild(t),i.push(this.createAction("Show Error","visibility",this.showError),this.createAction("Delete","delete",this.cancel))}break;case"done":this.setMainActionIcon("get_app","primary","Download",this.download),i.push(this.createAction("Download","get_app",this.download),this.createAction("Delete","delete",this.cancel));break;case"loading":{const t=document.createElement("div");t.className="grad-paa-loader",this.setMainAction(t,"Converting File"),i.push(this.createAction("Cancel","clear",this.cancel))}break;case"queued":this.setMainActionIcon("hourglass_empty","text","Queued"),i.push(this.createAction("Prioritize","priority_high",this.prioritize),this.createAction("Cancel","clear",this.cancel));break;case"setup":this.setMainActionIcon("rule","text","Checking Prerequisites"),i.push(this.createAction("Cancel","clear",this.cancel))}const a=this.element.querySelector(".grad-paa-file-item__more > ul");if(a){a.innerHTML="";for(const t of i)a.appendChild(t)}}setMainActionIcon(t,e,r="",i){const a=document.createElement("i");a.innerHTML=t,a.className="material-icons-round",a.setAttribute("aria-label",r),a.setAttribute("style",`color: var(--color-${e});`),this.setMainAction(a,r,i)}setMainAction(t,e,r){const i=this.element.querySelector(".grad-paa-file-item__main-action");i&&(i.innerHTML="",void 0!==e&&e.length>0?(i.classList.add("grad-paa-tooltip"),i.style.setProperty("--grad-paa-tooltip",`"${e}"`)):i.classList.remove("grad-paa-tooltip"),this.mainActionCallback=r||null,i.style.cursor=void 0!==r?"pointer":"",i.appendChild(t))}createAction(t,e,r){const i=document.createElement("li");return i.innerHTML=`\n            <i class="material-icons-round" aria-hidden="true">${e}</i>\n            <span>${t}</span>\n        `,i.addEventListener("click",(t=>{this.toggleMoreMenu(!1),r.bind(this)(t)})),i}download(){this.file.download()}prioritize(){I.getInstance().prioritizeID(this.file.id)}cancel(){I.getInstance().cancelID(this.file.id)}showError(){var t;if(null===this.file.error)return;const e=document.createElement("div");e.innerHTML=`\n            <p>The following error occurred, while trying to convert your file:</p>\n            <pre style="padding: .5rem; background-color: rgba(0,0,0,0.1); color: var(--color-error); border-radius: .25rem; white-space: break-spaces;">${this.file.error}</pre>\n            <button class="grad-paa-btn--primary grad-paa-btn--not-responsive" style="float: right;">Report Error</button>\n        `,null===(t=e.querySelector("button"))||void 0===t||t.addEventListener("click",(()=>this.openFeedback())),this.openDialog=new B("An Error occurred",e)}showWarning(){if(null===this.file.warning)return;const t=document.createElement("div");t.innerHTML=this.file.warning.description,t.querySelectorAll("[data-grad-paa-open-feedback]").forEach((t=>{t.removeAttribute("data-grad-paa-open-feedback"),t.addEventListener("click",(()=>this.openFeedback()))})),this.openDialog=new B(this.file.warning.displayText,t)}openFeedback(){var t;null===(t=this.openDialog)||void 0===t||t.close(),document.location.hash="feedback"}remove(){if(window.matchMedia("(prefers-reduced-motion: reduce)").matches)return void this.element.remove();const{height:t}=this.element.getBoundingClientRect();this.element.style.overflowY="hidden",this.element.style.minHeight="initial",this.element.style.maxHeight=`${t}px`,this.element.animate({maxHeight:0,paddingBottom:0,paddingTop:0,marginBottom:0,marginTop:0,opacity:0},{duration:300,easing:"ease",fill:"forwards"}).finished.then((()=>{this.element.remove()}))}}class R extends n{constructor(t){super(),this.fileControllers=new Map,this.element=t;const e=this.element.querySelector("[data-grad-paa-convert-more]");null==e||e.addEventListener("click",(()=>{this.dispatchEvent(new Event("convert-more"))})),null==e||e.removeAttribute("data-grad-paa-convert-more");const r=this.element.querySelector("[data-grad-paa-download-all]");r.addEventListener("click",(()=>{this.dispatchEvent(new Event("download-all"))})),r.removeAttribute("data-grad-paa-download-all"),this.downloadAllBtn=r;const i=this.element.querySelector("[data-grad-paa-delete-all]");null==i||i.addEventListener("click",(()=>this.deleteAll())),null==i||i.removeAttribute("data-grad-paa-delete-all"),I.getInstance().addEventListener("added",(t=>{const e=this.element.querySelector("ul");if(null===e)return;const r=new V(t.file,e);this.fileControllers.set(t.file.id,r),r.element.scrollIntoView({behavior:"smooth"}),this.checkDownloadAllButton()})),I.getInstance().addEventListener("removed",(t=>{const e=t.file.id;if(!this.fileControllers.has(e))return;const r=this.fileControllers.get(e);null==r||r.remove(),this.fileControllers.delete(e),this.checkDownloadAllButton()})),I.getInstance().addEventListener("update",(()=>this.checkDownloadAllButton())),this.checkDownloadAllButton()}deleteAll(){return t=this,e=void 0,i=function*(){y.new("Delete all files?","<p>This will cancel any running / pending conversions and delete the results of all already converted files.</p>",{text:"Delete All",color:"var(--color-error)",primary:!0}).then((t=>{t&&this.dispatchEvent(new Event("delete-all"))}))},new((r=void 0)||(r=Promise))((function(a,n){function s(t){try{h(i.next(t))}catch(t){n(t)}}function o(t){try{h(i.throw(t))}catch(t){n(t)}}function h(t){var e;t.done?a(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,o)}h((i=i.apply(t,e||[])).next())}));var t,e,r,i}checkDownloadAllButton(){let t=!1;const e=I.getInstance().entries();for(const[,r]of e)if("done"===r.state){t=!0;break}this.downloadAllBtn.style.display=t?"":"none"}toggle(t){this.element.style.display=t?"":"none"}toggleDownloadAllSpinner(t){t?this.downloadAllBtn.classList.add("grad-paa-btn--loader"):this.downloadAllBtn.classList.remove("grad-paa-btn--loader")}}class L{constructor(){this.wrapper=document.createElement("div"),this.wrapper.className="grad-paa-snackbar-container",document.body.appendChild(this.wrapper)}showSnackbar(t,e={}){var r,i,a,n,s,o;return a=this,n=void 0,o=function*(){const a=document.createElement("div");a.className="grad-paa-snackbar grad-paa-snackbar--enter-leave";const n=null!==(r=e.timeout)&&void 0!==r?r:void 0===e.actions?5e3:0,s=null!==(i=e.actions)&&void 0!==i?i:["Dismiss"],o=document.createElement("span");return o.innerHTML=t,a.appendChild(o),this.wrapper.appendChild(a),window.requestAnimationFrame((()=>{window.requestAnimationFrame((()=>{a.classList.remove("grad-paa-snackbar--enter-leave")}))})),new Promise((t=>{const e=e=>{a.classList.add("grad-paa-snackbar--enter-leave"),window.setTimeout((()=>a.remove()),1e3),t(e)};for(const t of s){const r=document.createElement("button");r.innerText=t.toUpperCase(),a.appendChild(r),r.addEventListener("click",(()=>e(t)))}n>0&&window.setTimeout((()=>e("dismiss")),n)}))},new((s=void 0)||(s=Promise))((function(t,e){function r(t){try{h(o.next(t))}catch(t){e(t)}}function i(t){try{h(o.throw(t))}catch(t){e(t)}}function h(e){var a;e.done?t(e.value):(a=e.value,a instanceof s?a:new s((function(t){t(a)}))).then(r,i)}h((o=o.apply(a,n||[])).next())}))}}var G=function(t,e,r,i){return new(r||(r=Promise))((function(a,n){function s(t){try{h(i.next(t))}catch(t){n(t)}}function o(t){try{h(i.throw(t))}catch(t){n(t)}}function h(t){var e;t.done?a(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,o)}h((i=i.apply(t,e||[])).next())}))};class z{constructor(){this.overlayController=new h,this.overlayController.addEventListener("convert",(t=>{I.getInstance().convertFiles(...t.filesToConvert)}));const t=document.getElementById("grad-paa-home");if(null===t)throw new Error("Couldn't find home element.");this.homeController=new d(t),this.homeController.addEventListener("convert-files",(()=>this.openInput())),this.inputElement=this.setupInput();const e=document.getElementById("grad-paa-file-list");if(null===e)throw new Error("Couldn't find file list element.");this.fileListController=new R(e),this.fileListController.addEventListener("convert-more",(()=>this.openInput())),this.fileListController.addEventListener("download-all",(()=>G(this,void 0,void 0,(function*(){this.fileListController.toggleDownloadAllSpinner(!0);const t=new i,e=I.getInstance().entries();for(const[,r]of e)"done"===r.state&&t.file(r.newName,r.result.blob);const r=yield t.generateAsync({type:"blob"});this.fileListController.toggleDownloadAllSpinner(!1),b({blob:r,name:"gruppe_adler_paa.zip"})})))),this.fileListController.addEventListener("delete-all",(()=>{const t=I.getInstance().entries();for(const[e]of t)I.getInstance().cancelID(e)})),this.snackbarController=new L;const r=()=>{const t=I.getInstance().length>0;this.homeController.toggle(!t),this.fileListController.toggle(t)};I.getInstance().addEventListener("added",r),I.getInstance().addEventListener("removed",r)}setupInput(){const t=document.createElement("input");return t.type="file",t.accept="image/png,image/svg+xml,image/jpeg,.paa",t.multiple=!0,t.style.display="none",t.addEventListener("change",(()=>{if(!t.files)return;const e=Array.from(t.files);I.getInstance().convertFiles(...e),t.value=""})),t}openInput(){this.inputElement.click()}showSnackbar(t,e){return G(this,void 0,void 0,(function*(){return this.snackbarController.showSnackbar(t,e)}))}}var O=function(t,e,r,i){return new(r||(r=Promise))((function(a,n){function s(t){try{h(i.next(t))}catch(t){n(t)}}function o(t){try{h(i.throw(t))}catch(t){n(t)}}function h(t){var e;t.done?a(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,o)}h((i=i.apply(t,e||[])).next())}))};window.addEventListener("DOMContentLoaded",(()=>O(void 0,void 0,void 0,(function*(){!function(t){O(this,void 0,void 0,(function*(){if(!("serviceWorker"in navigator))return;const e=null!==navigator.serviceWorker.controller;navigator.serviceWorker.register("/service-worker.js").then((()=>{e||t.showSnackbar("Ready to work offline")})),e&&(function(){return O(this,void 0,void 0,(function*(){const t=yield navigator.serviceWorker.getRegistration();return void 0===t?null:null!==t.waiting?t.waiting:new Promise((e=>{t.addEventListener("updatefound",(()=>O(this,void 0,void 0,(function*(){t.installing.addEventListener("statechange",(r=>{"installed"===r.target.state&&e(t.waiting)}),{once:!0})}))))}))}))}().then((e=>O(this,void 0,void 0,(function*(){null!==e&&"reload"===(yield t.showSnackbar("Update available",{actions:["reload","dismiss"]}))&&e.postMessage("skip-waiting")})))),navigator.serviceWorker.addEventListener("controllerchange",(()=>{window.location.reload()})))}))}(new z)}))))},1159:(t,e,r)=>{t.exports=r(4916).deprecate},963:(t,e,r)=>{t.exports=r.p+"968.f8c81bd1.worker.js"},5936:(t,e,r)=>{t.exports=r.p+"939.224c7577.worker.js"},6372:()=>{},5925:()=>{},2361:()=>{},4616:()=>{},7072:()=>{},4667:()=>{},2783:()=>{},4916:()=>{}},__webpack_module_cache__={},leafPrototypes,getProto;function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](r,r.exports,__webpack_require__),r.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},getProto=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,__webpack_require__.t=function(t,e){if(1&e&&(t=this(t)),8&e)return t;if("object"==typeof t&&t){if(4&e&&t.__esModule)return t;if(16&e&&"function"==typeof t.then)return t}var r=Object.create(null);__webpack_require__.r(r);var i={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var a=2&e&&t;"object"==typeof a&&!~leafPrototypes.indexOf(a);a=getProto(a))Object.getOwnPropertyNames(a).forEach((e=>i[e]=()=>t[e]));return i.default=()=>t,__webpack_require__.d(r,i),r},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.p="";var __webpack_exports__=__webpack_require__(3684);return __webpack_exports__})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,